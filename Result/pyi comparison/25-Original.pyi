# (generated with --quick)

import pathlib
import redis.client
import redis.exceptions
from typing import Any, Coroutine, Type

ConnectionError: Type[redis.exceptions.ConnectionError]
CreateDirectoryException: Any
MissingEnv: Any
Path: Type[pathlib.Path]
Redis: Type[redis.client.Redis]
asyncio: module
datetime: Type[datetime.datetime]
os: module
time: module
timedelta: Type[datetime.timedelta]

def check_running(name: str) -> bool: ...
def get_homedir() -> pathlib.Path: ...
def get_socket_path(name: str) -> str: ...
def get_storage_path() -> pathlib.Path: ...
def is_running() -> dict: ...
def long_sleep(sleep_in_sec: int, shutdown_check: int = ...) -> bool: ...
def long_sleep_async(sleep_in_sec: int, shutdown_check: int = ...) -> Coroutine[Any, Any, bool]: ...
def safe_create_dir(to_create: pathlib.Path) -> None: ...
def set_running(name: str) -> None: ...
def shutdown_requested() -> bool: ...
def unset_running(name: str) -> None: ...
