# (generated with --quick)

import __future__
import collections
import os
from typing import Any, Callable, Dict, Generator, Iterator, List, Optional, Tuple, Type, TypeVar, Union

defaultdict: Type[collections.defaultdict]
error: Type[OSError]
io: module
platform: module
print_function: __future__._Feature
stat: module

AnyStr = TypeVar('AnyStr', str, bytes)

def _get_magic(file, length) -> Any: ...
def block_iter(fileobj, blocksize = ...) -> Generator[Any, Any, None]: ...
def exists(path: Union[_PathLike, bytes, int, str]) -> bool: ...
def index_inodes(root) -> Dict[Tuple[int, int], Any]: ...
def is_elf(file) -> bool: ...
def is_executable(mode) -> Any: ...
def is_hardlinked(f1, f2) -> bool: ...
def is_macho(file) -> bool: ...
def is_pe(file) -> bool: ...
@overload
def join(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def join(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def lstat(path: Union[_PathLike, bytes, str], *, dir_fd: Optional[int] = ...) -> os.stat_result: ...
def walk(top: Union[_PathLike[AnyStr], AnyStr], topdown: bool = ..., onerror: Optional[Callable[[OSError], Any]] = ..., followlinks: bool = ...) -> Iterator[Tuple[AnyStr, List[AnyStr], List[AnyStr]]]: ...
