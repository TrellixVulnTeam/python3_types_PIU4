# (generated with --quick)

import collections
import functools
import inspect
from typing import Any, Callable, FrozenSet, Sequence, Tuple, Type, TypeVar, Union

OrderedDict: Type[collections.OrderedDict]
partial: Type[functools.partial]
weakref: module

_T0 = TypeVar('_T0')

class Cached(type):
    _Cached__cache: weakref.WeakValueDictionary[nothing, nothing]
    __doc__: str
    def __call__(self, *args) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...

class Singleton(type):
    _Singleton__instance: None
    __doc__: str
    def __call__(self, *args, **kwargs) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...

def basic_memoize(func) -> Callable: ...
def cache(func = ..., *, key = ...) -> Union[Callable, functools.partial[nothing]]: ...
def freeze(*args, **kwargs) -> Tuple[tuple, FrozenSet[Tuple[str, Any]]]: ...
def freeze_as_received(func) -> Callable: ...
def instance_cached(cls: _T0 = ..., *, cache = ...) -> Union[functools.partial[nothing], _T0]: ...
def lru_cache(maxsize = ...) -> Callable: ...
def memoize(func = ..., *, cache = ..., key = ...) -> Union[Callable, functools.partial[nothing]]: ...
def nop(*args, **kwargs) -> None: ...
def only_args(*args, **kwargs) -> tuple: ...
def signature(callable: Callable, *, follow_wrapped: bool = ...) -> inspect.Signature: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
