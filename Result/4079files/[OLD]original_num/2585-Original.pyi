# (generated with --quick)

from typing import Any, Optional

Interfaces: Any
Log: Any
TaskManager: Any
Tasks: Any
threading: module

class WorkItemOptimizer(Any):
    _condition: threading.Condition
    interfaces: Any
    task_manager: Any
    def __init__(self, interface_holder, num_cores) -> None: ...
    def add_network_item(self, work_item, data) -> bool: ...
    def add_work_item(self, work_item, data) -> bool: ...
    def disperse_work_item(self) -> Optional[bool]: ...
    def execute_work_item(self, work_item, user) -> bool: ...
    def find_open_node(self) -> Any: ...
    def run_work_item_from_network(self) -> Optional[bool]: ...
    def run_work_item_from_user(self) -> Optional[bool]: ...
    def send_work_item_to_node(self, node, work_item) -> bool: ...
    def work_item_finished_callback(self, future) -> None: ...
