# (generated with --quick)

import collections
import fractions
from typing import Any, Tuple, Type, TypeVar, Union

Fraction: Type[fractions.Fraction]
Image: module
ImageDraw: module
ImageFile: module
ImageFont: module
OrderedDict: Type[collections.OrderedDict]
math: module
picamera: Any
sys: module
time: module

_T0 = TypeVar('_T0')
_T2 = TypeVar('_T2')

def draw_aperture(aperture, draw) -> None: ...
def draw_graph(draw, pic_pixels, aperture: object, spectrum_angle, wavelength_factor) -> Tuple[collections.OrderedDict[str, Any], Any]: ...
def draw_scan_line(aperture, draw, spectrum_angle) -> None: ...
def draw_ticks_and_frequencies(draw, aperture, spectrum_angle, wavelength_factor) -> None: ...
def export_csv(name, normalized_results) -> None: ...
def export_diagram(name, normalized_results) -> None: ...
def find_aperture(pic_pixels, pic_width: int, pic_height: int) -> Any: ...
def get_spectrum_y_bound(pix, x, middle_y: _T2, spectrum_threshold, spectrum_threshold_duration) -> Tuple[Union[int, _T2], Union[int, _T2]]: ...
def inform_user_of_exposure(max_result) -> None: ...
def main() -> None: ...
def normalize_results(results: _T0, max_result) -> _T0: ...
def save_image_with_overlay(im, name) -> None: ...
def take_picture(name: _T0, shutter) -> _T0: ...
def wavelength_to_color(lambda2) -> Tuple[int, int, int]: ...
