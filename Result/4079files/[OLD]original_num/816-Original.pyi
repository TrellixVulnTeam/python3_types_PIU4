# (generated with --quick)

from typing import Any, Optional, Tuple, Type

PIPE: int
Popen: Type[subprocess.Popen]
STDOUT: int
logger: logging.Logger
logging: module
os: module
subprocess: module

class LXDError(Exception): ...

def _run(command_args, timeout = ..., log = ...) -> Optional[Tuple[Any, int, str]]: ...
def _stdout_to_str(text_io_wrapper) -> str: ...
def delete(container, log = ...) -> Optional[Tuple[Any, int, str]]: ...
def execute(container, command_line, mode = ..., env = ...) -> Optional[Tuple[Any, int, str]]: ...
def file_pull(container, source_path, target_path) -> Optional[Tuple[Any, int, str]]: ...
def file_push(container, source_path, target_path, uid = ..., gid = ..., mode = ...) -> Optional[Tuple[Any, int, str]]: ...
def launch(image, name, ephemeral = ..., profile = ..., config = ..., instance_type = ...) -> Optional[Tuple[Any, int, str]]: ...
def profile_copy(src_name, dst_name, src_remote = ..., dst_remote = ...) -> Optional[Tuple[Any, int, str]]: ...
def profile_create(name, remote = ...) -> Optional[Tuple[Any, int, str]]: ...
def profile_delete(name, remote = ...) -> Optional[Tuple[Any, int, str]]: ...
def profile_device_remove(name, device, remote = ...) -> Optional[Tuple[Any, int, str]]: ...
def profile_set(name, key, value, remote = ...) -> Optional[Tuple[Any, int, str]]: ...
def stop(container, log = ...) -> Optional[Tuple[Any, int, str]]: ...
