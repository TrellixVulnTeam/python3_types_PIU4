# (generated with --quick)

from typing import Any
import unittest.case

Atom: Any
ListP: Any
LiteralString: Any
Nil: Any
NotParseable: Any
Number: Any
Params: Any
QuotedString: Any
RequiresContinuation: Any
String: Any
unittest: module

class TestAtom(unittest.case.TestCase):
    def test_bytes(self) -> None: ...
    def test_parse(self) -> None: ...
    def test_parse_failure(self) -> None: ...

class TestList(unittest.case.TestCase):
    def test_bytes(self) -> None: ...
    def test_parse(self) -> None: ...
    def test_parse_empty(self) -> None: ...
    def test_parse_failure(self) -> None: ...

class TestNil(unittest.case.TestCase):
    def test_bytes(self) -> None: ...
    def test_parse(self) -> None: ...
    def test_parse_failure(self) -> None: ...

class TestNumber(unittest.case.TestCase):
    def test_bytes(self) -> None: ...
    def test_parse(self) -> None: ...
    def test_parse_failure(self) -> None: ...

class TestString(unittest.case.TestCase):
    def test_build_binary(self) -> None: ...
    def test_literal_binary(self) -> None: ...
    def test_literal_bytes(self) -> None: ...
    def test_literal_parse(self) -> None: ...
    def test_literal_parse_empty(self) -> None: ...
    def test_literal_parse_failure(self) -> None: ...
    def test_literal_plus(self) -> None: ...
    def test_literal_plus_binary(self) -> None: ...
    def test_quoted_bytes(self) -> None: ...
    def test_quoted_parse(self) -> None: ...
    def test_quoted_parse_empty(self) -> None: ...
    def test_quoted_parse_failure(self) -> None: ...
