# (generated with --quick)

from typing import Any, Awaitable, Callable, Iterator, List, Optional, Sequence, Tuple, Type, Union

_Deco = Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]
_SimpleHandler = Callable[[Any], Awaitable]

AbstractView: Any
PathLike: Any
Request: Any
RouteDef: Any
StaticDef: Any
StreamResponse: Any
UrlDispatcher: Any
_HandlerType: Type[Union[Callable[[Any], Awaitable], type]]
__all__: Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]
abc: Any
attr: Any
hdrs: Any
os: Any

class AbstractRouteDef(Any):
    register: Any

class RouteTableDef(Sequence[AbstractRouteDef]):
    __doc__: str
    _items: list
    def __contains__(self, item: object) -> bool: ...
    @overload
    def __getitem__(self, index: int) -> AbstractRouteDef: ...
    @overload
    def __getitem__(self, index: slice) -> List[AbstractRouteDef]: ...
    def __iter__(self) -> Iterator[AbstractRouteDef]: ...
    def __len__(self) -> int: ...
    def delete(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def get(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def head(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def patch(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def post(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def put(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def route(self, method: str, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...
    def static(self, prefix: str, path, **kwargs) -> None: ...
    def view(self, path: str, **kwargs) -> Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]: ...

def delete(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def get(path: str, handler: Union[Callable[[Any], Awaitable], type], *, name: Optional[str] = ..., allow_head: bool = ..., **kwargs) -> Any: ...
def head(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def options(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def patch(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def post(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def put(path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def route(method: str, path: str, handler: Union[Callable[[Any], Awaitable], type], **kwargs) -> Any: ...
def static(prefix: str, path, **kwargs) -> Any: ...
def view(path: str, handler: type, **kwargs) -> Any: ...
