# (generated with --quick)

import numpy
from typing import Any, Callable, List, Sequence, Tuple

StandardScaler: Any
T: Any
Variable: Any
dt: module
np: module
nr: Any
pd: Any
requests: module
time: module
tomonth: int
toyear: int
yrmths: List[Tuple[int, int]]
z: Any

class BatchArray(BatchArraySingle):
    N: int
    batch_size: Any
    ix: Any
    num_batches: Any
    num_leftover_rows: Any
    num_truncated_rows: Any
    rem: BatchArraySingle
    retfunc: Any
    seq_len: Any
    test_samples_x: Any
    test_samples_y: Any
    train_samples_x: Any
    train_samples_y: Any
    truncate: Any
    x: Any
    xb: BatchArraySingle
    y: Any
    yb: BatchArraySingle
    def __getitem__(self, ix) -> Tuple[Any, Any]: ...
    def __init__(self, x = ..., y = ..., seq_len = ..., truncate = ..., tovar = ..., batch_size = ...) -> None: ...
    def batch_ix_iter(self, batch_size = ...) -> Any: ...

class BatchArraySingle(object):
    N: int
    idxmax: int
    ix: Any
    rem: BatchArraySingle
    retfunc: Any
    seq_len: Any
    truncate: Any
    x: Any
    def __getitem__(self, ix) -> Any: ...
    def __init__(self, x = ..., seq_len = ..., truncate = ..., tovar = ...) -> None: ...

def add_dates_(df, l) -> Tuple[Any, Any, Any]: ...
def batch_getterer(x, *, y = ..., batch_size = ..., var = ...) -> Tuple[Callable[[Any], Any], range]: ...
def batchify(x, batch_size = ..., train_len = ...) -> list: ...
def check_cached(min_time) -> Callable[[Any], Any]: ...
def check_one2one(df, k1, krest) -> None: ...
def collapse_dims(t, dim_prods) -> Any: ...
def collapse_dims_(t, dim_prods) -> List[int]: ...
def ends_with(suff) -> Callable[[Any], Any]: ...
def filter_dtypes(df, dtypes = ...) -> list: ...
def flatten_multindex(xs) -> list: ...
def gen_dat1(P = ..., N = ..., dtype = ...) -> Tuple[Any, Any]: ...
def gen_dat2(P = ..., N = ..., dtype = ...) -> Tuple[Any, Any]: ...
def impute(df) -> Any: ...
def isint(x) -> Any: ...
def join_pollen_weather(poldf, ddf, time_cols, ycol = ...) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
def log_(s) -> Any: ...
def mse(x, y) -> Any: ...
def random_requests(urls, mean = ..., sd = ..., min = ...) -> None: ...
def ravel(t) -> Any: ...
def read(fn) -> str: ...
def rep_with_dummies_(df, col) -> Any: ...
def repackage_hidden(h) -> Any: ...
def replace_with_dummies(df, cols) -> Any: ...
def show_dt(X, y, criterion = ..., max_depth = ...) -> None: ...
def test_batchify() -> None: ...
def test_collapse_dims_() -> None: ...
def test_to_sub_seqs() -> None: ...
def to_sub_seqs(x, seq_len = ..., warn = ...) -> numpy.ndarray: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
