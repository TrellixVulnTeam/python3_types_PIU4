# (generated with --quick)

from typing import Any, Callable, Iterable, Sequence, Sized, Tuple, Type, TypeVar
import unittest.case

SomeNamedTuple = `namedtuple-SomeNamedTuple-x`

add_annotations_to_signature: Any
collections: module
unittest: module

_T0 = TypeVar('_T0')
_Tnamedtuple-SomeNamedTuple-x = TypeVar('_Tnamedtuple-SomeNamedTuple-x', bound=`namedtuple-SomeNamedTuple-x`)

class ExampleClass:
    method_with_decorators: Callable
    method_with_messed_up_decorator: Callable
    method_with_recursive_decorator: Callable
    def __init__(self, an_int: int) -> None: ...
    @classmethod
    def classmethod_with_builtin_type_annotations(cls, an_int: int) -> None: ...
    def integration(self, an_int: int, a_string = ..., *, a_callable = ..., **kwargs: dict) -> str: ...
    def method_with_class_names(self, an_object: SomeClass) -> SomeClass: ...
    def method_with_default_value(self, a_float: float, an_int: int = ..., an_str: str = ...) -> None: ...
    def method_with_default_value_for_self(self = ..., an_int: int = ...) -> None: ...
    def method_with_function_annotations(self, a_callable: _T0) -> _T0: ...
    def method_with_kwonly_arg(self, a_float: float, *, an_int: int) -> None: ...
    def method_with_varargs(self, an_int: int, *varargs, **varkwargs) -> None: ...

class SomeClass:
    def __init__(self) -> None: ...

class SomeOtherClass:
    def __init__(self) -> None: ...

class TestAnnotatedDocsForMethodSignatures(unittest.case.TestCase):
    def _TestAnnotatedDocsForMethodSignatures__assert_signature_docs_override(self, expected_override, type_str, fully_qualified_name_suffix, obj) -> None: ...
    def test_class_names_are_fully_qualified(self) -> None: ...
    def test_class_signatures_are_overridden_according_to_their_init(self) -> None: ...
    def test_cls_sign_are_not_overridden_when_their_init_dont_cont_annot(self) -> None: ...
    def test_decorated_methods_are_resolved_when_decor_func_attr_is_set(self) -> None: ...
    def test_decorated_methods_dont_trigger_inf_loop_but_return_none(self) -> None: ...
    def test_decorated_methods_should_not_trigger_errors_but_return_none(self) -> None: ...
    def test_default_value_can_be_complex(self) -> None: ...
    def test_default_values_are_added_to_positional_args(self) -> None: ...
    def test_first_arg_of_methods_is_ign_even_if_it_has_a_default_value(self) -> None: ...
    def test_integration(self) -> None: ...
    def test_kwonly_args_are_appended_after_an_asterisk(self) -> None: ...
    def test_mixed_types_are_represented_as_tuples(self) -> None: ...
    def test_only_functions_classes_and_and_methods_are_considered(self) -> None: ...
    def test_string_annotations_dont_cause_infinite_recursion(self) -> None: ...
    def test_type_annotations_can_be_functions(self) -> None: ...
    def test_type_annotations_can_be_named_tuples(self) -> None: ...
    def test_varargs_are_added_into_the_signature_when_present(self) -> None: ...
    def test_varargs_can_be_annotated(self) -> None: ...
    def test_when_args_have_annots_then_signature_docs_are_overridden(self) -> None: ...
    def test_when_retval_has_annot_then_signature_docs_are_overridden(self) -> None: ...
    def test_when_there_are_no_annots_then_sign_docs_are_not_overridden(self) -> None: ...

class `namedtuple-SomeNamedTuple-x`(tuple):
    __slots__ = ["x"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str]
    x: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-SomeNamedTuple-x`], x) -> `_Tnamedtuple-SomeNamedTuple-x`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-SomeNamedTuple-x`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-SomeNamedTuple-x`: ...
    def _replace(self: `_Tnamedtuple-SomeNamedTuple-x`, **kwds) -> `_Tnamedtuple-SomeNamedTuple-x`: ...

def function_with_annotated_varargs(an_int, *varargs: list, **varkwargs: dict) -> None: ...
def function_with_complex_default_value(a_tuple: tuple = ...) -> None: ...
def function_with_mixed_types(something: _T0 = ...) -> _T0: ...
def function_with_named_tuple(a_tuple: `namedtuple-SomeNamedTuple-x`) -> None: ...
def function_with_return_annotation_only() -> str: ...
def function_with_string_annotation(an_arg) -> None: ...
def function_without_annotations(an_int) -> None: ...
def messed_up_decorator(func) -> Callable: ...
def recursive_decorator(func) -> Callable: ...
def some_decorator(func) -> Callable: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
