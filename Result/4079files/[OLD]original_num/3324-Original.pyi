# (generated with --quick)

import __builtin__
import typing
from typing import Any, Dict, List, NoReturn, Type, TypeVar, Union

ByteString: Union[NotImplementedType, Type[typing.ByteString]]
CHECK_TYPES: Dict[str, Type[Union[EmitsBytes, EmitsError, EmitsWarning, SkipBytes]]]
Iterable: Any
Sequence: Any
Tuple: Any
assembler_binary: str
files: List[str]
glob: module
logging: module
os: module
re: module
shlex: module
subprocess: module
sys: module
tempfile: module

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_TNotImplementedType = TypeVar('_TNotImplementedType', bound=NotImplementedType)

class Checker(object):
    def __call__(self, binary, console) -> NoReturn: ...
    def __init__(self, line_tail) -> NoReturn: ...

class EmitsBytes(Checker):
    bytes: bytearray
    def __call__(self, binary, output: _T1) -> typing.Tuple[Any, _T1]: ...
    def __init__(self, s) -> None: ...

class EmitsError(Checker):
    err_code: Any
    def __call__(self, binary: _T0, output) -> typing.Tuple[_T0, Any]: ...
    def __init__(self, s) -> None: ...

class EmitsNonFatalError(EmitsError):
    err_code: Any
    def __call__(self, binary: _T0, output) -> typing.Tuple[_T0, Any]: ...
    def __init__(self, *args, **kwargs) -> None: ...

class EmitsWarning(Checker):
    warn_code: Any
    def __call__(self, binary: _T0, output) -> typing.Tuple[_T0, Any]: ...
    def __init__(self, s) -> None: ...

class NotImplementedType:
    def __getitem__(cls: _TNotImplementedType, x) -> __builtin__.NotImplementedType: ...

class SkipBytes(Checker):
    length: int
    def __call__(self, binary, output: _T1) -> typing.Tuple[Any, _T1]: ...
    def __init__(self, s) -> None: ...

def filter_whitespace(s: str) -> str: ...
def find_assembler_args(sources) -> str: ...
def find_check_directives(sources) -> List[Union[EmitsBytes, EmitsError, EmitsWarning, SkipBytes]]: ...
def format_bytes(b) -> str: ...
def have_typing_module() -> bool: ...
def main(assembler, files) -> int: ...
def min_version_met() -> bool: ...
def run_assembler(assembler: str, infile: str, opts: str) -> typing.Tuple[int, Any, List[str]]: ...
