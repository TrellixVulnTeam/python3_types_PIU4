# (generated with --quick)

from typing import Any, Callable, Dict, List, Optional, TypeVar

CorruptTransactionException: Any
__all__: List[str]

_T = TypeVar('_T')

class Transaction(object):
    _Transaction__transaction_state: Optional[Callable[[], Any]]
    obj: Any
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...
    def __init__(self, obj) -> None: ...

class transactional(object):
    def __get__(self, obj, T) -> Callable: ...
    def __init__(self, method) -> None: ...
    def method(self) -> Any: ...

def _memento(obj) -> Callable[[], Any]: ...
def deepcopy(x: _T, memo: Optional[Dict[int, _T]] = ..., _nil = ...) -> _T: ...
