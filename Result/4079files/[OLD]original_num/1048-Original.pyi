# (generated with --quick)

from typing import Any, Tuple

Avg: Any
AvgWithNulls: Any
Cov: Any
SQLITE_VERSION: Any
Sum: Any
Var: Any
WinAvg: Any
con: Any
create_aggregate: Any
float64: Any
int64: Any
jitclass: Any
large_con: Any
np: module
optional: Any
pytest: Any
sqlite3: module
sqlite_udaf: Any
tempfile: module
test_aggregate_window_numba: Any
test_window_bench_builtin: Any
test_window_bench_numba: Any
test_window_bench_python: Any
xfail_if_no_window_functions: Any

class AvgPython:
    count: int
    total: Any
    def __init__(self) -> None: ...
    def finalize(self) -> float: ...
    def step(self, value) -> None: ...

class WinAvgPython:
    count: int
    total: Any
    def __init__(self) -> None: ...
    def finalize(self) -> float: ...
    def inverse(self, value) -> None: ...
    def step(self, value) -> None: ...
    def value(self) -> Any: ...

def parse_version(v: str) -> Tuple[str, ...]: ...
def run_agg_builtin(con) -> Any: ...
def run_agg_group_by_builtin(con) -> Any: ...
def run_agg_group_by_numba(con) -> Any: ...
def run_agg_group_by_python(con) -> Any: ...
def run_agg_numba(con) -> Any: ...
def run_agg_partition_by_builtin(con) -> Any: ...
def run_agg_partition_by_numba(con) -> Any: ...
def run_agg_partition_by_python(con) -> Any: ...
def run_agg_python(con) -> Any: ...
def test_aggregate(con) -> None: ...
def test_aggregate_bench_builtin(large_con, benchmark) -> None: ...
def test_aggregate_bench_numba(large_con, benchmark) -> None: ...
def test_aggregate_bench_python(large_con, benchmark) -> None: ...
def test_aggregate_group_by_bench_builtin(large_con, benchmark) -> None: ...
def test_aggregate_group_by_bench_numba(large_con, benchmark) -> None: ...
def test_aggregate_group_by_bench_python(large_con, benchmark) -> None: ...
def test_aggregate_with_empty(con) -> None: ...
