# (generated with --quick)

import collections
from typing import Any, Generator, List, Tuple, Type

Terminal: Any
defaultdict: Type[collections.defaultdict]

class WDFSA(object):
    __doc__: str
    _arcs: List[collections.defaultdict[nothing, Any]]
    _final_states: set
    _initial_states: set
    _vocabulary: set
    def _create_state(self, state) -> bool: ...
    def add_arc(self, sfrom, sto, symbol, weight) -> None: ...
    def arc_weight(self, origin, destination, sym) -> Any: ...
    def get_arcs(self, origin, symbol) -> list: ...
    def is_final(self, state) -> bool: ...
    def is_initial(self, state) -> bool: ...
    def iterarcs(self) -> Generator[Tuple[int, Any, nothing, Any], Any, None]: ...
    def iterfinal(self) -> setiterator[nothing]: ...
    def iterinitial(self) -> setiterator[nothing]: ...
    def iterstates(self) -> range: ...
    def itersymbols(self) -> setiterator: ...
    def make_final(self, state) -> None: ...
    def make_initial(self, state) -> None: ...
    def n_arcs(self) -> int: ...
    def n_states(self) -> int: ...
    def n_symbols(self) -> int: ...
    def path_weight(self, path, semiring) -> Any: ...

def make_linear_fsa(sentence, semiring, terminal_constructor = ...) -> WDFSA: ...
