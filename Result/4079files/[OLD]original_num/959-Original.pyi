# (generated with --quick)

from typing import Any, Dict, Iterator, List, Optional, Tuple, TypeVar

PageMerge: Any
PdfReader: Any
PdfWriter: Any
math: module
os: module
paperformats: Dict[str, List[int]]
re: module
sys: module
units: Dict[str, float]

_T0 = TypeVar('_T0')

def add_blanks(signature: list, pages_per_sheet: int) -> list: ...
def add_divider(sheets: list, signature_length: int) -> list: ...
def calculate_margins(output_size, current_size) -> Tuple[Any, float, float]: ...
def calculate_scaled_sub_page_size(pages_per_sheet: int, papersize: Optional[dict]) -> List[int]: ...
def calculate_signature_length(page_count: int) -> int: ...
def create_blank_copy(page) -> Any: ...
def create_filename(infile) -> str: ...
def cut_in_signatures(inpages: list, signature_length: int) -> Iterator[list]: ...
def get_media_box_size(outpages) -> List[int]: ...
def impose(pages: list, pages_per_sheet: int, binding: str) -> list: ...
def impose_and_merge(inpages: list, signature_length: int, pages_per_sheet: int, output_size: List[int], binding: str) -> list: ...
def is_landscape(page) -> Any: ...
def merge(pages, rotation, binding) -> Any: ...
def resize(outpages: list, output_size: List[int]) -> list: ...
def reverse_remainder(dividend: int, divisor: int) -> int: ...
def save_pdf(infile, outpages) -> None: ...
def set_binding(page: _T0, binding, rotation) -> _T0: ...
def validate_infile(pdf: str) -> str: ...
def validate_pages_per_sheet(pages_per_sheet: int) -> int: ...
def validate_papersize(paperformat: str, unit: str) -> Optional[List[int]]: ...
def validate_signature_length(signature_length: int) -> int: ...
