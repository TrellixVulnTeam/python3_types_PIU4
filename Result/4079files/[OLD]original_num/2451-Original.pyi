# (generated with --quick)

import collections
import model.image_models
import model.language_models
import model.vqa_model
from typing import Any, Callable, Iterable, Iterator, List, Optional, Tuple, Type, Union

RANDOM_SEED: Any
argparse: module
defaultdict: Type[collections.defaultdict]
generic_utils: Any
image_models: module
keras: Any
language_models: module
np: module
operator: module
os: module
pickle: module
preprocessing: Any
random: module
sklearn_shuffle: Any
tf: Any
time: module
vqa_model: module

def args_to_flags(args: list, kw_map: dict) -> str: ...
def batchify(batch_size, *lists) -> Iterator: ...
def construct_model(args, data_root, experiment_root, nb_classes) -> Tuple[model.vqa_model.VqaModel, model.language_models.LSTMLanguageModel, model.image_models.VGGImageModel]: ...
def get_answers_matrix(answers, encoder) -> Any: ...
def grouper(iterable, n, fillvalue = ...) -> Iterator: ...
def kw_to_flags(kw_map: dict) -> str: ...
def lines(fpath: str) -> List[str]: ...
def load_train_data(data_root) -> Tuple[List[str], List[str], List[str]]: ...
def main() -> None: ...
def mkdirp(path) -> None: ...
def parse_arguments() -> argparse.Namespace: ...
@overload
def pjoin(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def pjoin(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def select_frequent_answers(questions_train, answers_train, images_train, maxAnswers) -> Tuple[list, list, list]: ...
def shuffle(x: list, random: Optional[Callable[[], float]] = ...) -> None: ...
def zip_longest(*p: Iterable, fillvalue = ...) -> Iterator: ...
