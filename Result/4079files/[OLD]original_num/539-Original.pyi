# (generated with --quick)

import collections
import sqlite3.dbapi2
import typing
from typing import Any, Dict, Generator, Iterable, List, Pattern, Tuple, Type, TypeVar, Union

TrainingData = Tuple[List[List[str]], List[str]]

ALL_FOLDS: List[str]
Answer: Type[str]
Counter: Type[typing.Counter]
PUNCTUATION: str
QB_QUESTION_DB: str
QuestionText: Type[str]
csv: module
defaultdict: Type[collections.defaultdict]
kANGLE: Pattern[str]
kBRACKET: Pattern[str]
kMULT_SPACE: Pattern[str]
kPAREN: Pattern[str]
log: logging.Logger
logging: module
nltk: Any
os: module
re: module
sqlite3: module
string: module

_T2 = TypeVar('_T2')

class Question:
    _last_query: None
    answer: Any
    category: Any
    fold: Any
    naqt: Any
    page: Any
    protobowl: Any
    qnum: Any
    text: dict
    tournaments: Any
    def __init__(self, qnum, answer, category, naqt, protobowl, tournaments, page, fold) -> None: ...
    def __repr__(self) -> str: ...
    def add_text(self, sent, text) -> None: ...
    def flatten_text(self) -> str: ...
    def get_text(self, sentence, token) -> str: ...
    def normalized_answer(self) -> str: ...
    def partials(self, word_skip = ...) -> Generator[Tuple[Any, int, List[Union[str, _T2]]], Any, None]: ...
    def raw_words(self) -> Generator[str, Any, None]: ...
    @staticmethod
    def split_and_remove_punc(text) -> Generator[str, Any, None]: ...
    def text_lines(self) -> Generator[Dict[str, Any], Any, None]: ...
    def to_example(self) -> Tuple[List[str], str]: ...

class QuestionDatabase:
    _conn: sqlite3.dbapi2.Connection
    def __init__(self, location = ...) -> None: ...
    def all_answers(self) -> Dict[int, Any]: ...
    def all_questions(self, unfiltered = ...) -> Dict[str, Question]: ...
    def answer_map(self) -> collections.defaultdict: ...
    @staticmethod
    def normalize_answer(answer) -> str: ...
    def normalized_answers(self) -> collections.defaultdict[str, Any]: ...
    def prune_text(self) -> None: ...
    def query(self, command: str, arguments) -> Dict[str, Question]: ...
    def questions_by_answer(self, answer) -> Generator[Question, Any, None]: ...
    def questions_with_pages(self) -> Dict[str, List[Question]]: ...

class QuizBowlDataset:
    buzzer_train: Any
    db: QuestionDatabase
    guesser_train: Any
    min_class_examples: int
    training_fold: str
    def __init__(self, min_class_examples: int, *, guesser_train = ..., buzzer_train = ..., qb_question_db: str = ...) -> None: ...
    def questions_by_fold(self, folds = ...) -> Dict[str, List[Question]]: ...
    def questions_in_folds(self, folds: Iterable[str]) -> List[Question]: ...
    def training_data(self) -> Tuple[List[List[str]], List[str]]: ...
