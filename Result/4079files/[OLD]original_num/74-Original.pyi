# (generated with --quick)

from typing import Any, Dict, Optional, Union

Binary: Any
PyRakLib: Any
Session: Any
copy: module
json: module
math: module
pickle: module
random: module
sys: module
time: module

class SessionManager:
    block: dict
    ipSec: Dict[nothing, nothing]
    lastMeasure: Any
    name: Any
    packetLimit: int
    packetPool: dict
    portChecking: bool
    receiveBytes: int
    sendBytes: int
    server: Any
    serverId: int
    sessions: Dict[nothing, nothing]
    shutdown: bool
    socket: Any
    ticks: int
    def __init__(self, server, socket) -> None: ...
    def blockAddress(self, address, timeout = ...) -> None: ...
    def getID(self) -> int: ...
    def getPacketFromPool(self, id) -> Any: ...
    def getPort(self) -> Any: ...
    def getSession(self, ip, port) -> Any: ...
    def notifyACK(self, session, identifierACK) -> None: ...
    def openSession(self, session) -> None: ...
    def receivePacket(self) -> Optional[bool]: ...
    def receiveStream(self) -> Optional[bool]: ...
    def registerPacket(self, id, clazz) -> None: ...
    def registerPackets(self) -> None: ...
    def removeSession(self, session, reason = ...) -> None: ...
    def run(self) -> None: ...
    def sendPacket(self, packet, dest, port) -> None: ...
    def streamACK(self, identifier, identifierACK) -> None: ...
    def streamClose(self, identifier, reason) -> None: ...
    def streamEncapsulated(self, session, packet, flags = ...) -> None: ...
    def streamInvalid(self, identifier) -> None: ...
    def streamOpen(self, session) -> None: ...
    def streamOption(self, name, value) -> None: ...
    def streamRaw(self, address, port, payload) -> None: ...
    def tick(self) -> None: ...
    def tickProcessor(self) -> None: ...

def __getattr__(name) -> Any: ...
def microtime(get_as_float = ...) -> Union[float, str]: ...
