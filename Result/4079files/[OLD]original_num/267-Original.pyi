# (generated with --quick)

import saspy.sasresults
import typing
from typing import Any, Dict, List, NoReturn, Type, TypeVar

ChainMap: Type[typing.ChainMap]
SASresults: Type[saspy.sasresults.SASresults]
logging: module
pd: Any
sp: Any

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_TGrouping = TypeVar('_TGrouping', bound=Grouping)
_TTabulationItem = TypeVar('_TTabulationItem', bound=TabulationItem)

class Class(TabulationItem):
    _args: list
    _kwargs: List[str]
    all: Any
    child: None
    key: Any
    label: Any
    def __str__(self) -> Any: ...

class Grouping:
    child: Any
    items: Any
    def __init__(self, items, **kwargs) -> None: ...
    def __mul__(self: _TGrouping, other) -> _TGrouping: ...
    def __or__(self, other) -> Any: ...
    def __str__(self) -> str: ...
    def _gather(self, collected) -> None: ...
    def add(self: _TGrouping, other, prepend = ...) -> _TGrouping: ...
    def add_all(self: _TGrouping, others, prepend = ...) -> _TGrouping: ...

class Statistic(TabulationItem):
    _args: list
    _kwargs: List[str]
    child: None
    format: Any
    key: Any
    label: Any
    def __mul__(self, other) -> NoReturn: ...
    def __str__(self) -> Any: ...

class Tabulate:
    __doc__: str
    data: Any
    logger: logging.Logger
    sas: Any
    sasproduct: str
    def __init__(self, session, data) -> None: ...
    @staticmethod
    def as_class(*args, **kwargs) -> Class: ...
    @staticmethod
    def as_var(*args, **kwargs) -> Var: ...
    @staticmethod
    def classes(*args, labels: list = ...) -> List[Class]: ...
    def execute_table(self, _output_type, **kwargs: dict) -> saspy.sasresults.SASresults: ...
    @staticmethod
    def stat(*args, **kwargs) -> Statistic: ...
    @staticmethod
    def stats(*args, labels: list = ..., formats: list = ...) -> List[Statistic]: ...
    def table(self, **kwargs: dict) -> saspy.sasresults.SASresults: ...
    def text_table(self, **kwargs: dict) -> saspy.sasresults.SASresults: ...
    def to_dataframe(self, **kwargs: dict) -> saspy.sasresults.SASresults: ...
    def to_nested_dataframe(self, code) -> Any: ...
    @staticmethod
    def vars(*args, labels: list = ...) -> List[Var]: ...

class TabulationItem:
    _args: list
    _kwargs: List[str]
    child: Any
    key: Any
    label: Any
    def __init__(self, key, **kwargs) -> None: ...
    def __mul__(self: _TTabulationItem, other) -> _TTabulationItem: ...
    def __or__(self, other) -> Any: ...
    def _gather(self, collected) -> None: ...
    def with_(self: _TTabulationItem, **kwargs) -> _TTabulationItem: ...

class Var(TabulationItem):
    _args: list
    _kwargs: List[str]
    child: Any
    key: Any
    label: Any
    def __mul__(self, other) -> Any: ...
    def __str__(self) -> Any: ...

def build_kwargs(key: _T0, value: _T1, n) -> List[Dict[_T0, Any]]: ...
