# (generated with --quick)

from typing import Any, Tuple, TypeVar

ebisu: Any
model: Tuple[float, float, float]
np: module
optimize: Any
plt: Any
special: Any

_T2 = TypeVar('_T2')

def betaMoments(a, b, num = ...) -> list: ...
def estimate_half_life(model, quantile = ...) -> Any: ...
def failureMoments(model: Tuple[float, float, float], result: bool, tnow: float, num: int = ..., returnLog: bool = ...) -> list: ...
def gb1Moments(a: float, b: float, p: float, q: float, num: int = ..., returnLog: bool = ...) -> list: ...
def gb1ToBeta(gb1: Tuple[float, float, float, float, float]) -> Tuple[float, float, float]: ...
def meanVarToGB1(mu, var) -> Tuple[Any, int, Any, Any, Any]: ...
def moveBeta(model: Tuple[float, float, float]) -> Tuple[Any, Any, Any]: ...
def moveBeta2(model: Tuple[float, float, float]) -> Tuple[Any, Any, Any]: ...
def moveGb1(gb1: Tuple[float, float, float, float, float], priorT) -> list: ...
def posteriorMomToBeta(mom, approxModel, tnow) -> list: ...
def predictAnalysis() -> None: ...
def simulation(model, result, tnow) -> None: ...
def updateGb1(prior: Tuple[float, float, float], result: bool, tnow: float) -> Tuple[float, float, float]: ...
def updateRecallMonteCarlo(prior, result, tnow: _T2, N = ...) -> Tuple[Any, Any, _T2]: ...
def updateTest(prior: Tuple[float, float, float], result: bool, tnow: float) -> dict: ...
