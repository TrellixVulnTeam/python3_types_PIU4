# (generated with --quick)

from typing import Any, Dict, NoReturn, Set, TypeVar

Image: Any
cached_property: Any
colors: Any
fab: Any
fabricio: Any
frozendict: Any
itertools: module
multiprocessing: module
six: module
sys: module
utils: Any

_TBaseService = TypeVar('_TBaseService', bound=BaseService)

class Attribute(Any): ...

class BaseService(object):
    _attributes: Any
    _options: Any
    _options_custom_names: Any
    _other_options: Any
    _other_safe_options: Any
    _safe_options: Any
    image: Any
    name: Attribute
    options: Any
    overridden_attributes: set
    overridden_options: set
    safe_options: Any
    def __copy__(self: _TBaseService) -> _TBaseService: ...
    def __init__(self, image = ..., options = ..., safe_options = ..., **attrs) -> None: ...
    def __setattr__(self, attr, value) -> None: ...
    @classmethod
    def _get_available_options(cls, safe = ...) -> Dict[str, Any]: ...
    def _get_option_attribute(self, option_name) -> Any: ...
    def _get_options(self, safe = ...) -> Any: ...
    def backup(self) -> None: ...
    def destroy(self) -> NoReturn: ...
    def fork(self: _TBaseService, image = ..., options = ..., **attrs) -> _TBaseService: ...
    def get_backup_version(self) -> NoReturn: ...
    def migrate(self, tag = ..., registry = ..., account = ...) -> None: ...
    def migrate_back(self) -> None: ...
    def pull_image(self, tag = ..., registry = ..., account = ...) -> Any: ...
    def restore(self, backup_name = ...) -> None: ...
    def revert(self) -> NoReturn: ...
    def update(self, tag = ..., registry = ..., account = ..., force = ...) -> NoReturn: ...

class ManagedService(BaseService):
    _other_options: Dict[nothing, nothing]
    _other_safe_options: Dict[nothing, nothing]
    managers: dict
    overridden_attributes: Set[nothing]
    overridden_options: Set[nothing]
    def __init__(self, *args, **kwargs) -> None: ...
    def _is_manager(self) -> Any: ...
    def is_manager(self, raise_manager_error = ...) -> Any: ...
    def migrate(self, *args, **kwargs) -> None: ...
    def pull_image(self, *args, **kwargs) -> Any: ...

class ManagerNotFoundError(ServiceError): ...

class Option(Any):
    name: Any
    safe: Any
    safe_name: Any
    def __init__(self, func = ..., default = ..., name = ..., safe = ..., safe_name = ...) -> None: ...

class ServiceError(Any): ...
