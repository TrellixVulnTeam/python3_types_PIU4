# (generated with --quick)

import __future__
import hashlib
from typing import Any, Dict, List, Optional, Type, Union
import unittest.case

Connection: Any
Exchange: Any
Queue: Any
SkipTest: Type[unittest.case.SkipTest]
absolute_import: __future__._Feature
buffer: Type[memoryview]
print_function: __future__._Feature
random: module
range: Any
socket: module
string: module
time: module
unicode_literals: __future__._Feature
unittest: Any
warnings: module
weakref: module

class TransportCase(Any):
    connected: bool
    connection: Any
    connection_options: Dict[nothing, nothing]
    event_loop_max: int
    exchange: Any
    message_size_limit: None
    password: None
    prefix: None
    queue: Any
    reliable_purge: bool
    sep: str
    skip_test_reason: Optional[str]
    suppress_disorder_warning: bool
    transport: None
    userid: None
    def P(self, rest) -> str: ...
    def _digest(self, data) -> str: ...
    def after_connect(self, connection) -> None: ...
    def before_connect(self) -> None: ...
    def do_connect(self) -> None: ...
    def get_connection(self, **options) -> Any: ...
    def purge(self, names) -> Any: ...
    def purge_consumer(self, consumer) -> Any: ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_basic_get(self) -> None: ...
    def test_cyclic_reference_channel(self) -> None: ...
    def test_cyclic_reference_connection(self) -> None: ...
    def test_cyclic_reference_transport(self) -> None: ...
    def test_produce__consume(self) -> None: ...
    def test_produce__consume_large_messages(self, bytes = ..., n = ..., charset = ...) -> None: ...
    def test_produce__consume_multiple(self) -> None: ...
    def test_purge(self) -> None: ...
    def test_timeout(self) -> None: ...
    def verify_alive(self) -> Optional[bool]: ...

def _digest(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
def _nobuf(x) -> list: ...
def consumeN(conn, consumer, n = ..., timeout = ...) -> List[nothing]: ...
