# (generated with --quick)

import numpy
import queue
from typing import Any, Dict, List, Optional, Tuple, Type

ArrowUtil: Any
DataHandler: Any
DialogManager: Any
Queue: Type[queue.Queue]
Skill: Any
arrow: module
json: module
np: module
os: module
re: module
tz: module

class FeedData(object):
    _FeedData__Singleton: type
    instance: Any
    def __getattr__(self, name) -> Any: ...
    def reset(self) -> None: ...

class FeedDataLoader:
    FALSE_LABEL: int
    TRUE_LABEL: int
    data_handler: Any
    def __init__(self) -> None: ...
    def load_data(self, fname) -> Any: ...
    def make_train_set(self, feed, pocket) -> Tuple[Any, List[int], Dict[nothing, int]]: ...
    def map_category2id(self, feed) -> Tuple[list, Dict[Any, int]]: ...
    def map_str_to_dict(self, data) -> list: ...

class RemoveOldDataQueue(queue.Queue):
    def put_nowait(self, *args, **kwargs) -> None: ...

class SkillData(object):
    _SkillData__Singleton: type
    instance: Any
    def __getattr__(self, name) -> Any: ...
    def reset(self) -> None: ...

class SkillDataLoader(object):
    max_qsize: Any
    def _SkillDataLoader__read_file_then_convert(self) -> RemoveOldDataQueue: ...
    def convert_data(self, line, prev_func) -> Optional[numpy.ndarray]: ...
    def load_skill_queue(self, max_qsize = ...) -> RemoveOldDataQueue: ...
    def make_X(self) -> numpy.ndarray: ...
    def make_data_set(self, q) -> Tuple[numpy.ndarray, numpy.ndarray]: ...
    def make_y(self, text) -> Optional[int]: ...
