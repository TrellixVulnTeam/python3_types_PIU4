# (generated with --quick)

import concurrent.futures.thread
import io
import threading
from typing import Any, Dict, Generator, List, Optional, Tuple, Type, TypeVar
import zipfile

BytesIO: Type[io.BytesIO]
Lock: Type[threading.Lock]
ThreadPoolExecutor: Type[concurrent.futures.thread.ThreadPoolExecutor]
ZipFile: Type[zipfile.ZipFile]
imageio: Any
it: module
np: module
os: module
requests: module
snappy: Any

_T0 = TypeVar('_T0')

class DatasetInfo(object):
    bounds: Any
    cube_edge: int
    exp_name: Any
    mag_scales: Any
    def __init__(self, exp_name, bounds, mag_scales) -> None: ...

def _cube_bound_space(lo, hi, cube_edge) -> List[Tuple[int, int]]: ...
def _get_cube(src, cube, exp_name, mag_scale, channel, cube_edge, **kw) -> Any: ...
def _get_extension(channel: _T0) -> _T0: ...
def _get_http_cube(src, pth, **kw) -> Optional[bytes]: ...
def _get_kzip_cube(src, pth, **kw) -> Any: ...
def _get_pth_to_cube(src, cube, exp_name, mag_scale, channel) -> str: ...
def _get_raw_filesystem_cube(src, pth, **kw) -> Optional[bytes]: ...
def _iter_cubes(size_px, offset_px, cube_edge) -> Generator[Tuple[Tuple[int, int, int], Tuple[Any, Any, Any], Tuple[Any, Any, Any]], Any, None]: ...
def _maybe_decompress_cube_data(data_str, channel) -> Any: ...
def main() -> None: ...
def np_matrix_from_knossos(pth, ds_info, size, offset, channel = ..., mag_scale = ..., to_dtype = ..., thread_count = ..., auth = ..., http_retries = ...) -> Any: ...
def oldstyle_knossos_mag_range(mag_1: Tuple[float, float, float], mag_count: int) -> Dict[int, Tuple[float, float, float]]: ...
