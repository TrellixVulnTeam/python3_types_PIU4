# (generated with --quick)

from typing import Any, Generator, List

__author__: str

class Array(Node):
    items: Any
    def __init__(self, items) -> None: ...

class Assign(Node):
    left: Any
    op: Any
    right: Any
    def __init__(self, op, left, right) -> None: ...
    def children(self) -> list: ...

class BinOp(Node):
    left: Any
    op: Any
    right: Any
    def __init__(self, op, left, right) -> None: ...
    def children(self) -> list: ...

class Block(Node):
    _children_list: Any

class Boolean(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class BracketAccessor(Node):
    expr: Any
    node: Any
    def __init__(self, node, expr) -> None: ...
    def children(self) -> list: ...

class Break(Node):
    identifier: Any
    def __init__(self, identifier = ...) -> None: ...
    def children(self) -> list: ...

class Case(Node):
    elements: Any
    expr: Any
    def __init__(self, expr, elements) -> None: ...
    def children(self) -> list: ...

class Catch(Node):
    elements: Any
    identifier: Any
    def __init__(self, identifier, elements) -> None: ...
    def children(self) -> list: ...

class Comma(Node):
    left: Any
    right: Any
    def __init__(self, left, right) -> None: ...
    def children(self) -> list: ...

class Conditional(Node):
    __doc__: str
    alternative: Any
    consequent: Any
    predicate: Any
    def __init__(self, predicate, consequent, alternative) -> None: ...
    def children(self) -> list: ...

class Continue(Node):
    identifier: Any
    def __init__(self, identifier = ...) -> None: ...
    def children(self) -> list: ...

class Debugger(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class Default(Node):
    elements: Any
    def __init__(self, elements) -> None: ...

class DoWhile(Node):
    predicate: Any
    statement: Any
    def __init__(self, predicate, statement) -> None: ...
    def children(self) -> list: ...

class DotAccessor(Node):
    identifier: Any
    node: Any
    def __init__(self, node, identifier) -> None: ...
    def children(self) -> list: ...

class Elision(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class EmptyStatement(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class ExprStatement(Node):
    expr: Any
    def __init__(self, expr) -> None: ...
    def children(self) -> list: ...

class Finally(Node):
    elements: Any
    def __init__(self, elements) -> None: ...

class For(Node):
    cond: Any
    count: Any
    init: Any
    statement: Any
    def __init__(self, init, cond, count, statement) -> None: ...
    def children(self) -> list: ...

class ForIn(Node):
    item: Any
    iterable: Any
    statement: Any
    def __init__(self, item, iterable, statement) -> None: ...
    def children(self) -> list: ...

class FuncBase(Node):
    elements: Any
    identifier: Any
    parameters: Any
    def __init__(self, identifier, parameters, elements) -> None: ...
    def _init_ids(self) -> None: ...
    def children(self) -> list: ...

class FuncDecl(FuncBase):
    elements: Any
    identifier: Any
    parameters: Any

class FuncExpr(FuncBase):
    elements: Any
    identifier: Any
    parameters: Any

class FunctionCall(Node):
    args: Any
    identifier: Any
    def __init__(self, identifier, args = ...) -> None: ...
    def children(self) -> list: ...

class GetPropAssign(Node):
    elements: Any
    prop_name: Any
    def __init__(self, prop_name, elements) -> None: ...
    def children(self) -> list: ...

class Identifier(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class If(Node):
    alternative: Any
    consequent: Any
    predicate: Any
    def __init__(self, predicate, consequent, alternative = ...) -> None: ...
    def children(self) -> list: ...

class Label(Node):
    identifier: Any
    statement: Any
    def __init__(self, identifier, statement) -> None: ...
    def children(self) -> list: ...

class NewExpr(Node):
    args: Any
    identifier: Any
    def __init__(self, identifier, args = ...) -> None: ...
    def children(self) -> list: ...

class Node(object):
    _children_list: Any
    def __init__(self, children = ...) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def children(self) -> Any: ...
    def to_ecma(self) -> Any: ...

class Null(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class Number(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class Object(Node):
    properties: Any
    def __init__(self, properties = ...) -> None: ...

class Program(Node):
    _children_list: Any

class Regex(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class Return(Node):
    expr: Any
    def __init__(self, expr = ...) -> None: ...
    def children(self) -> list: ...

class SetOfNodes(Node):
    _children_list: Any

class SetPropAssign(Node):
    elements: Any
    parameters: Any
    prop_name: Any
    def __init__(self, prop_name, parameters, elements) -> None: ...
    def children(self) -> list: ...

class String(Node):
    value: Any
    def __init__(self, value) -> None: ...
    def children(self) -> List[nothing]: ...

class Switch(Node):
    cases: Any
    default: Any
    expr: Any
    def __init__(self, expr, cases, default = ...) -> None: ...
    def children(self) -> list: ...

class This(Node):
    def __init__(self) -> None: ...
    def children(self) -> List[nothing]: ...

class Throw(Node):
    expr: Any
    def __init__(self, expr) -> None: ...
    def children(self) -> list: ...

class Try(Node):
    catch: Any
    fin: Any
    statements: Any
    def __init__(self, statements, catch = ..., fin = ...) -> None: ...
    def children(self) -> list: ...

class UnaryOp(Node):
    op: Any
    postfix: Any
    value: Any
    def __init__(self, op, value, postfix = ...) -> None: ...
    def children(self) -> list: ...

class VarDecl(Node):
    identifier: Any
    initializer: Any
    def __init__(self, identifier, initializer = ...) -> None: ...
    def children(self) -> list: ...

class VarStatement(Node):
    _children_list: Any

class While(Node):
    predicate: Any
    statement: Any
    def __init__(self, predicate, statement) -> None: ...
    def children(self) -> list: ...

class With(Node):
    expr: Any
    statement: Any
    def __init__(self, expr, statement) -> None: ...
    def children(self) -> list: ...
