# (generated with --quick)

from typing import Any, Dict, List, Optional, Tuple

ClingoLexer: Any
ClingoListener: Any
ClingoParser: Any
PossibleWorld: Any
Relation: Any
Trees: Any
isfloat: Any
np: module
pd: Any

class AntlrClingoListener(Any):
    curr_fact: Any
    curr_fact_data: Optional[list]
    curr_fact_depth: int
    curr_pw: Any
    curr_pw_id: int
    dfs: Dict[nothing, Any]
    expected_pws: int
    n_facts: int
    pws: list
    relations: list
    silent: Any
    def __init__(self) -> None: ...
    def enterClingoOutput(self, ctx) -> None: ...
    def enterFact(self, ctx) -> None: ...
    def enterFact_text(self, ctx) -> None: ...
    def enterModels(self, ctx) -> None: ...
    def enterOptimization(self, ctx) -> None: ...
    def enterOptimum(self, ctx) -> None: ...
    def enterPw(self, ctx) -> None: ...
    def exitClingoOutput(self, ctx) -> None: ...
    def exitFact(self, ctx) -> None: ...
    def exitPw(self, ctx) -> None: ...

def __getattr__(name) -> Any: ...
def __parse_clingo_output__(input_stream, silent = ..., print_parse_tree = ...) -> Tuple[Dict[nothing, nothing], List[nothing], List[nothing]]: ...
def loadIntoPandas(relations, pws, dfs) -> None: ...
def parse_clingo_output_from_file(fname, silent = ..., print_parse_tree = ...) -> Tuple[Dict[nothing, nothing], List[nothing], List[nothing]]: ...
def parse_clingo_output_from_string(clingo_output_string, silent = ..., print_parse_tree = ...) -> Tuple[Dict[nothing, nothing], List[nothing], List[nothing]]: ...
def rearrangePWSandRLS(relations, pws) -> None: ...
