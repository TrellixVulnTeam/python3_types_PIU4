# (generated with --quick)

from typing import Any, Generator, Tuple, Type

collections: module

class Enum(metaclass=EnumMeta):
    def __format__(self, format_spec) -> Any: ...
    def __hash__(self) -> Any: ...
    def __reduce_ex__(self, proto) -> Tuple[Type[Enum], Tuple[Any]]: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class EnumMeta(type):
    def __call__(cls: EnumMeta, value) -> Enum: ...
    def __getitem__(cls: EnumMeta, name: str) -> Enum: ...
    def __iter__(cls: EnumMeta) -> Generator[Any, Any, None]: ...
    def __len__(cls: EnumMeta) -> int: ...
    def __new__(metacls: Type[EnumMeta], cls, bases, classdict: collections.OrderedDict) -> Any: ...
    @classmethod
    def __prepare__(metacls, cls, bases) -> collections.OrderedDict[nothing, nothing]: ...
    def __reversed__(cls: EnumMeta) -> reversed: ...

def _is_descriptor(obj) -> bool: ...
