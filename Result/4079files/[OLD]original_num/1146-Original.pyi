# (generated with --quick)

from typing import Any, List, Optional, TypeVar, Union

LibraryError: Any
VERSION_FORMAT: str
Version: Any
get_root: Any
get_sub_element: Any
re: module
report_codes: Any
reports: Any
sanitize_id: Any
sections: Any
validate_id: Any

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')

class ElementSearcher:
    __doc__: str
    _book_errors: Optional[list]
    _context_element: Any
    _element: Any
    _element_id: Any
    _executed: bool
    _expected_types: Any
    _tag_list: Any
    def __init__(self, tags, element_id, context_element, element_type_desc = ...) -> None: ...
    def _execute(self) -> None: ...
    def _prepare_expected_types(self, element_type_desc: _T0) -> Union[List[Union[_T0, _T1]], _T0, _T1]: ...
    def element_found(self) -> bool: ...
    def get_element(self) -> Any: ...
    def get_errors(self) -> Any: ...
    def validate_book_id(self, id_provider, id_description = ...) -> bool: ...

class IdProvider:
    __doc__: str
    _booked_ids: set
    _cib: Any
    def __init__(self, cib_element) -> None: ...
    def allocate_id(self, proposed_id: _T0) -> Union[str, _T0]: ...
    def book_ids(self, *id_list) -> list: ...

def _get_cib_version(cib, attribute, regexp, none_if_missing = ...) -> Any: ...
def check_new_id_applicable(tree, description, _id) -> None: ...
def create_subelement_id(context_element, suffix, id_provider) -> Any: ...
def does_id_exist(tree, check_id) -> bool: ...
def find_element_by_tag_and_id(tag, context_element, element_id, none_if_id_unused = ..., id_types = ...) -> Any: ...
def find_unique_id(tree, check_id: _T1, reserved_ids = ...) -> Union[str, _T1]: ...
def get_acls(tree) -> Any: ...
def get_alerts(tree) -> Any: ...
def get_cib_crm_feature_set(cib, none_if_missing = ...) -> Any: ...
def get_configuration(tree) -> Any: ...
def get_constraints(tree) -> Any: ...
def get_fencing_topology(tree) -> Any: ...
def get_nodes(tree) -> Any: ...
def get_pacemaker_version_by_which_cib_was_validated(cib) -> Any: ...
def get_resources(tree) -> Any: ...
def get_status(tree) -> Any: ...
def validate_id_does_not_exist(tree, _id) -> None: ...
