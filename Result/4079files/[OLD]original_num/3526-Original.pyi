# (generated with --quick)

from typing import Any, Coroutine, Dict, Optional

Buffer: Any
Mousey: Any
discord: Any

class LogEmitter:
    __slots__ = ["channels", "mousey"]
    __doc__: str
    channels: Dict[Any, _LogChannel]
    mousey: Any
    def __init__(self, mousey) -> None: ...
    def add_channel(self, channel_id, events, *, empty = ...) -> _LogChannel: ...
    @classmethod
    def from_records(cls, records, *, mousey) -> Any: ...
    def log(self, message, event, target) -> None: ...
    def log_to(self, message, destination, target) -> None: ...
    def remove_channel(self, channel_id) -> Optional[int]: ...
    def stop(self) -> None: ...

class _LogChannel(Any):
    __slots__ = ["_buffer", "_can_emit", "_last_emit", "_task", "destination", "empty", "events", "ignored_exceptions", "page_size", "send_delay"]
    __doc__: str
    destination: Any
    empty: Any
    events: Any
    def __init__(self, destination, empty, events, *, loop = ...) -> None: ...
    def does_log(self, event) -> bool: ...
    def is_visible_to(self, target = ...) -> Any: ...
    def send(self, page) -> Coroutine[Any, Any, None]: ...
