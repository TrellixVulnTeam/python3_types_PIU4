# (generated with --quick)

from typing import Any

Experiment: Any
Host: Any
Resource: Any
Run: Any
Source: Any
SqlObserver: Any
T1: datetime.datetime
T2: datetime.datetime
datetime: module
engine: Any
hashlib: module
json: Any
os: module
pytest: Any
sample_run: Any
session: Any
sql_obs: Any
sqlalchemy: Any
tempfile: module
tmpfile: Any

def test_fs_observer_doesnt_duplicate_resources(sql_obs, sample_run, session, tmpfile) -> None: ...
def test_fs_observer_doesnt_duplicate_sources(sql_obs, sample_run, session, tmpfile) -> None: ...
def test_fs_observer_resource_event(sql_obs, sample_run, session, tmpfile) -> None: ...
def test_fs_observer_started_event_saves_source(sql_obs, sample_run, session, tmpfile) -> None: ...
def test_sql_observer_artifact_event(sql_obs, sample_run, session, tmpfile) -> None: ...
def test_sql_observer_completed_event_updates_run(sql_obs, sample_run, session) -> None: ...
def test_sql_observer_equality(sql_obs, engine, session) -> None: ...
def test_sql_observer_failed_event_updates_run(sql_obs, sample_run, session) -> None: ...
def test_sql_observer_heartbeat_event_updates_run(sql_obs, sample_run, session) -> None: ...
def test_sql_observer_interrupted_event_updates_run(sql_obs, sample_run, session) -> None: ...
def test_sql_observer_started_event_creates_run(sql_obs, sample_run, session) -> None: ...
def test_sql_observer_started_event_uses_given_id(sql_obs, sample_run, session) -> None: ...
