# (generated with --quick)

import collections
import numpy
from typing import Any, Callable, List, TextIO, Tuple, Type, TypeVar

BeautifulSoup: Any
CachedSession: Any
No: int
RedisDict: Any
T: Any
_: Any
assert_frame_equal: Any
cn: Any
crs: Any
d: Any
dailydf: Any
dat: List[Tuple[Any, Any, Any, Any]]
defaultdict: Type[collections.defaultdict]
dls: Any
dt: module
f: TextIO
hr_dat2: Any
hrdfs: Any
joblib: Any
json: module
key: str
mem: Any
ncols: Any
ns: Any
poldf: Any
poldf2: Any
pollen_data: Any
pollen_date2df: Any
pollen_url: str
r: Any
rd: Any
re: module
requests_cache: Any
ss: Any
time: module
today: str
u: str
util: module
yrmths: List[Tuple[int, int]]

_T0 = TypeVar('_T0')

def __getattr__(name) -> Any: ...
def accum(stdate = ...) -> List[Tuple[Any, Any, Any, Any]]: ...
def batch_getterer(x, *, y = ..., batch_size = ..., var = ...) -> Tuple[Callable[[Any], Any], range]: ...
def batchify(x, batch_size = ..., train_len = ...) -> Any: ...
def camel2score(s) -> Any: ...
def check_one2one(df, k1, krest) -> None: ...
def collapse_dims(t, dim_prods) -> Any: ...
def concat(dfs) -> Any: ...
def date_rng_gen(start) -> generator: ...
def ends_with(suff) -> Callable[[Any], Any]: ...
def flatten_multindex(xs) -> Any: ...
def gen_yr_rng(start, backward = ...) -> Any: ...
def mkds_url(sdate) -> str: ...
def mktime(s, hour = ...) -> int: ...
def mse(x, y) -> Any: ...
def parse_data(j: _T0) -> Tuple[Any, Any, Any, _T0]: ...
def pollen_data_(yrmths) -> Any: ...
def pollen_date2df_(yr, m) -> Any: ...
def ravel(t) -> Any: ...
def rep_with_dummies(df, cols) -> Any: ...
def rep_with_dummies_(df, col) -> Any: ...
def repackage_hidden(h) -> Any: ...
def sync_rdd(ss, rd, stdate = ...) -> int: ...
def test_batchify() -> None: ...
def test_collapse_dims_() -> None: ...
def test_date_rng_gen() -> None: ...
def test_to_sub_seqs() -> None: ...
def to_sub_seqs(x, seq_len = ..., warn = ...) -> numpy.ndarray: ...
