# (generated with --quick)

import collections
from typing import Any, Callable, Generator, Iterable, List, Sequence, Sized, Tuple, Type, TypeVar

inspect: module

_TIssueDescription = TypeVar('_TIssueDescription', bound=IssueDescription)

class DetailedTypeError(TypeError):
    __doc__: str
    issues: List[IssueDescription]
    def __init__(self, issues: List[IssueDescription]) -> None: ...
    def __iter__(self) -> Generator[IssueDescription, Any, None]: ...
    def __len__(self) -> int: ...

class IssueDescription(tuple):
    __slots__ = ["expected_type", "generic_message", "missing_parameter", "name", "value"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str, str]
    expected_type: Any
    generic_message: str
    missing_parameter: bool
    name: str
    value: Any
    def __getnewargs__(self) -> Tuple[str, Any, Any, bool, str]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TIssueDescription], name: str, expected_type, value, missing_parameter: bool, generic_message: str = ...) -> _TIssueDescription: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TIssueDescription], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TIssueDescription: ...
    def _replace(self: _TIssueDescription, **kwds) -> _TIssueDescription: ...

def check_args(func) -> Callable: ...
def check_type(obj, candidate_type, reltype: str = ...) -> bool: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
