# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, List, Sized, Tuple, Type, TypeVar, Union

PracticeOverview = `namedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`
StudentSkill = `namedtuple-StudentSkill-name-value`
StudentTask = `namedtuple-StudentTask-name-attempted-solved-time`

get_current_mission_phase: Any
get_level: Any
get_recommendation: Any
get_skills: Any
get_time: Any
has_attempted: Any
has_solved: Any

_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation = TypeVar('_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation', bound=`namedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`)
_Tnamedtuple-StudentSkill-name-value = TypeVar('_Tnamedtuple-StudentSkill-name-value', bound=`namedtuple-StudentSkill-name-value`)
_Tnamedtuple-StudentTask-name-attempted-solved-time = TypeVar('_Tnamedtuple-StudentTask-name-attempted-solved-time', bound=`namedtuple-StudentTask-name-attempted-solved-time`)

class `namedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`(tuple):
    __slots__ = ["credits", "level", "mission", "phase", "recommendation", "skills", "tasks"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str]
    credits: Any
    level: Any
    mission: Any
    phase: Any
    recommendation: Any
    skills: Any
    tasks: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`], level, mission, phase, credits, tasks, skills, recommendation) -> `_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`: ...
    def _replace(self: `_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`, **kwds) -> `_Tnamedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`: ...

class `namedtuple-StudentSkill-name-value`(tuple):
    __slots__ = ["name", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    name: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-StudentSkill-name-value`], name, value) -> `_Tnamedtuple-StudentSkill-name-value`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-StudentSkill-name-value`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-StudentSkill-name-value`: ...
    def _replace(self: `_Tnamedtuple-StudentSkill-name-value`, **kwds) -> `_Tnamedtuple-StudentSkill-name-value`: ...

class `namedtuple-StudentTask-name-attempted-solved-time`(tuple):
    __slots__ = ["attempted", "name", "solved", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    attempted: Any
    name: Any
    solved: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-StudentTask-name-attempted-solved-time`], name, attempted, solved, time) -> `_Tnamedtuple-StudentTask-name-attempted-solved-time`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-StudentTask-name-attempted-solved-time`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-StudentTask-name-attempted-solved-time`: ...
    def _replace(self: `_Tnamedtuple-StudentTask-name-attempted-solved-time`, **kwds) -> `_Tnamedtuple-StudentTask-name-attempted-solved-time`: ...

def get_practice_overview(domain, student) -> `namedtuple-PracticeOverview-level-mission-phase-credits-tasks-skills-recommendation`: ...
def get_skill_list(domain, student) -> List[`namedtuple-StudentSkill-name-value`]: ...
def get_tasks(domain, student) -> List[`namedtuple-StudentTask-name-attempted-solved-time`]: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
