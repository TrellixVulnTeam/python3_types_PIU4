# (generated with --quick)

from typing import Any, NoReturn, Set, Tuple, TypeVar

IncompleteExp: Any
IntersectionExp: Any
PredicateTemplate: Any
TypeTemplate: Any
UnionExp: Any
_RESERVED_NAMES: Set[str]
collections: module
is_qiime_type: Any
is_semantic_type: Any
itertools: module
types: module

_T0 = TypeVar('_T0')

class Properties(Any):
    exclude: tuple
    include: tuple
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, *include, exclude = ...) -> None: ...
    def __repr__(self) -> str: ...
    def collapse_intersection(self, other) -> Any: ...
    def get_kind(self) -> str: ...
    def get_name(self) -> Any: ...
    def get_union_membership_expr(self, self_expr) -> str: ...
    def is_element(self, expr) -> bool: ...
    def is_symbol_subtype(self, other) -> bool: ...
    def is_symbol_supertype(self, other) -> bool: ...
    def update_ast(self, ast) -> None: ...

class SemanticTemplate(Any):
    _SemanticTemplate__field: Any
    field: types.MappingProxyType[nothing, nothing]
    field_names: Any
    name: Any
    public_proxy: Tuple[str]
    variant_of: Any
    def __eq__(self, other) -> Any: ...
    def __hash__(self) -> int: ...
    def __init__(self, name, field_names, field_members, variant_of) -> None: ...
    def get_field_names(self) -> Any: ...
    def get_kind(self) -> str: ...
    def get_name(self) -> Any: ...
    def is_element(self, value) -> NoReturn: ...
    def is_element_expr(self, self_expr, value) -> Any: ...
    @classmethod
    def is_variant(cls, expr, varf) -> Any: ...
    def update_ast(self, ast) -> None: ...
    def validate_field(self, name, field) -> NoReturn: ...
    def validate_fields_expr(self, self_expr, fields_expr) -> None: ...
    def validate_predicate(self, predicate) -> None: ...

class VariantField:
    field_members: Any
    field_name: Any
    type_name: Any
    def __init__(self, type_name, field_name, field_members) -> None: ...
    def __repr__(self) -> str: ...
    def is_member(self, semantic_type) -> bool: ...

def SemanticType(name, field_names = ..., field_members = ..., variant_of = ...) -> SemanticTemplate: ...
def _munge_field_members(field_names, field_members) -> dict: ...
def _munge_field_names(field_names: _T0) -> tuple: ...
def _munge_variant_of(variant_of: _T0) -> tuple: ...
def _validate_name(name) -> None: ...
