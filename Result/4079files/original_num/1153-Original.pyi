# (generated with --quick)

import hashlib
import http.client
from typing import Any, Optional, Tuple, Type, Union

ENROLL_HOSTS: Any
HTTPConnection: Type[http.client.HTTPConnection]
PATHS: Any
decrypt: Any
encrypt: Any
hmac: module
normalize_serial: Any
restore_code_to_bytes: Any
struct: module

class HTTPError(Exception):
    response: Any
    def __init__(self, msg, response) -> None: ...

def b32encode(s: bytes) -> bytes: ...
def enroll(data: str, host: str = ..., path: str = ...) -> bytes: ...
def get_server_response(data: Optional[str], host: str, path: str) -> bytes: ...
def get_time_offset(region: str = ..., path: str = ...) -> int: ...
def initiate_paper_restore(serial: str, host: str = ..., path: str = ...) -> bytes: ...
def request_new_serial(region: str = ..., model: str = ...) -> Tuple[str, str]: ...
def restore(serial: str, restore_code: str) -> str: ...
def sha1(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
def time() -> float: ...
def token_bytes(nbytes: Optional[int] = ...) -> bytes: ...
def validate_paper_restore(data: str, host: str = ..., path: str = ...) -> bytes: ...
