# (generated with --quick)

import argparse
from typing import Any, Set, Type

AlwaysLoad: set
ArgumentParser: Type[argparse.ArgumentParser]
DirectoryWalker: Any
Namespace: Type[argparse.Namespace]
Transitive: Any
os: module
sys: module

class RF2Filter:
    _matched_concepts: Set[int]
    _opts: argparse.Namespace
    _transitive: Any
    _visited_concepts: set
    _visited_descriptions: Set[int]
    _walker: Any
    matches: Any
    def __init__(self, opts: argparse.Namespace) -> None: ...
    def _proc_concept_row(self, row: dict) -> bool: ...
    def _proc_definition_row(self, row: dict) -> bool: ...
    def _proc_description_row(self, row: dict) -> bool: ...
    def _proc_relationship_row(self, row: dict) -> bool: ...
    def _proc_transitive_row(self, row) -> bool: ...
    def _process_concepts(self) -> None: ...
    def _process_descriptions(self) -> None: ...
    def _process_languages(self) -> None: ...
    def _process_relationships(self) -> None: ...
    def _process_textdefinitions(self) -> None: ...
    def _process_transitive(self) -> None: ...

def __getattr__(name) -> Any: ...
def genargs() -> argparse.ArgumentParser: ...
def main(argv) -> None: ...
