# (generated with --quick)

from typing import Any, List, Optional, TypeVar

core: Any
subprocess: module
typing: module

_TCMake = TypeVar('_TCMake', bound=CMake)

class Argument:
    name: str
    type: Any
    value: str
    def __init__(self, name: str, value: str, type: Optional[str]) -> None: ...

class CMake:
    arguments: List[Argument]
    build_folder: str
    generator: str
    source_folder: str
    def __init__(self, build_folder: str, source_folder: str, generator: str) -> None: ...
    def add_argument(self: _TCMake, name: str, value: str) -> _TCMake: ...
    def add_argument_with_type(self: _TCMake, name: str, value: str, type: str) -> _TCMake: ...
    def build(self) -> None: ...
    def build_cmd(self, install: bool) -> None: ...
    def config(self) -> None: ...
    def install(self) -> None: ...
    def make_static_library(self: _TCMake) -> _TCMake: ...
    def set_install_folder(self: _TCMake, folder: str) -> _TCMake: ...
