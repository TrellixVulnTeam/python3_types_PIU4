# (generated with --quick)

import audio_io.audio_io
import collections
from typing import Any, Callable, Generator, Iterable, Optional, Sized, Tuple, Type, TypeVar, Union

AudioSource: Type[audio_io.audio_io.AudioSource]
AudioSourceInfo: Type[audio_io.audio_io.AudioSourceInfo]
MEASURE_SAMPLE_RATE: Any
argparse: module
compute_dr: Any
datetime: Type[datetime.datetime]
functools: module
numpy: module
os: module
read_audio_data: Any
read_audio_info: Any
sys: module
time: module

_TLogGroup = TypeVar('_TLogGroup', bound=LogGroup)

class LogGroup(tuple):
    __slots__ = ["albums", "channels", "performers", "sample_rate", "tracks_dr"]
    __dict__: collections.OrderedDict[str, Union[int, Iterable[Union[str, Tuple[int, float, float, int, str]]]]]
    _field_defaults: collections.OrderedDict[str, Union[int, Iterable[Union[str, Tuple[int, float, float, int, str]]]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str, str]
    albums: Iterable[str]
    channels: int
    performers: Iterable[str]
    sample_rate: int
    tracks_dr: Iterable[Tuple[int, float, float, int, str]]
    def __getnewargs__(self) -> Tuple[Iterable[str], Iterable[str], int, int, Iterable[Tuple[int, float, float, int, str]]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TLogGroup], performers: Iterable[str], albums: Iterable[str], channels: int, sample_rate: int, tracks_dr: Iterable[Tuple[int, float, float, int, str]]) -> _TLogGroup: ...
    def _asdict(self) -> collections.OrderedDict[str, Union[int, Iterable[Union[str, Tuple[int, float, float, int, str]]]]]: ...
    @classmethod
    def _make(cls: Type[_TLogGroup], iterable: Iterable[Union[int, Iterable[Union[str, Tuple[int, float, float, int, str]]]]], new = ..., len: Callable[[Sized], int] = ...) -> _TLogGroup: ...
    def _replace(self: _TLogGroup, **kwds: Union[int, Iterable[Union[str, Tuple[int, float, float, int, str]]]]) -> _TLogGroup: ...

def analyze_dr(in_path: str, track_cb) -> Tuple[Generator[LogGroup, Any, None], int, Any]: ...
def fix_tty() -> None: ...
def flatmap(f, items) -> Generator[nothing, Any, None]: ...
def format_time(seconds) -> str: ...
def get_group_title(group: LogGroup) -> str: ...
def get_log_path(in_path) -> str: ...
def main() -> None: ...
def make_log_groups(l: Iterable[Tuple[audio_io.audio_io.AudioSourceInfo, Iterable[Tuple[int, float, float, int, str]]]]) -> Generator[LogGroup, Any, None]: ...
def parse_args() -> Optional[argparse.Namespace]: ...
def write_log(out_path, dr_log_groups: Iterable[LogGroup], average_dr) -> None: ...
