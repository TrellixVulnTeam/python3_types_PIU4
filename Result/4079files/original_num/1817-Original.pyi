# (generated with --quick)

import concurrent.futures.process
from typing import Any, Coroutine, Type, TypeVar

LoadError: Any
LoadTestInterface: Any
ProcessPoolExecutor: Type[concurrent.futures.process.ProcessPoolExecutor]
asyncio: module
pickle: module
time: module

_T0 = TypeVar('_T0')

class LoadTestHandler(Any):
    loop: Any
    pool: concurrent.futures.process.ProcessPoolExecutor
    def __init__(self, loop = ...) -> None: ...
    def add(self, a, b) -> coroutine: ...
    def asyncNoop(self) -> Coroutine[Any, Any, None]: ...
    def badBurn(self, us) -> Coroutine[Any, Any, None]: ...
    def badSleep(self, us) -> Coroutine[Any, Any, None]: ...
    def burn(self, us) -> coroutine: ...
    def echo(self, data: _T0) -> Coroutine[Any, Any, _T0]: ...
    def iterAllFields(self, data: _T0) -> Coroutine[Any, Any, _T0]: ...
    def largeContainer(self, data) -> Coroutine[Any, Any, None]: ...
    def noop(self) -> Coroutine[Any, Any, None]: ...
    def onewayBurn(self, us) -> coroutine: ...
    def onewayNoop(self) -> Coroutine[Any, Any, None]: ...
    def onewaySend(self, data) -> Coroutine[Any, Any, None]: ...
    def onewaySleep(self, us) -> Coroutine[Any, Any, None]: ...
    def recv(self, bytes) -> Coroutine[Any, Any, str]: ...
    def send(self, data) -> Coroutine[Any, Any, None]: ...
    def sendrecv(self, data, recvBytes) -> Coroutine[Any, Any, str]: ...
    def sleep(self, us) -> Coroutine[Any, Any, None]: ...
    def throwError(self, code) -> Coroutine[Any, Any, nothing]: ...
    def throwUnexpected(self, code) -> Coroutine[Any, Any, nothing]: ...

def burn_in_executor(us) -> None: ...
def us_to_sec(microseconds) -> Any: ...
