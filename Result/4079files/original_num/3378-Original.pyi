# (generated with --quick)

import expression
import statement
from typing import Any, Dict, List, NoReturn

Exp: module
Stm: module
Tok: Any

class Break(BaseException): ...

class Environment(object):
    parent: Any
    values: dict
    def __getitem__(self, key: str) -> Any: ...
    def __init__(self, parent = ...) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def declare(self, key, value) -> None: ...
    def getAt(self, distance: int, name: str) -> Any: ...
    def setAt(self, distance: int, name: str, val) -> None: ...

class Function(object):
    body: statement.Block
    closure: Environment
    params: List[str]
    def __init__(self, params: List[str], closure: Environment, body: statement.Block) -> None: ...
    def call(self, intpr: Interpreter, args: list) -> Any: ...

class Interpreter(object):
    context: Any
    globals: Environment
    locals: Dict[Any, int]
    def contextualExecute(self, stmts: List[statement.Stm], ctx: Environment) -> None: ...
    def enterScope(self) -> None: ...
    def evaluate(self, exp: expression.Exp) -> NoReturn: ...
    def execute(self, stm: statement.Stm) -> NoReturn: ...
    def exitScope(self) -> None: ...
    def interpret(self, ast: List[statement.Stm]) -> None: ...
    def lookUpVariable(self, name: str, exp) -> Any: ...
    def resolve(self, exp, depth: int) -> None: ...
    def visitExpAssign(self, exp: expression.Assign) -> NoReturn: ...
    def visitExpBinary(self, exp: expression.Binary) -> NoReturn: ...
    def visitExpCall(self, exp: expression.Call) -> NoReturn: ...
    def visitExpIdent(self, exp: expression.Ident) -> Any: ...
    def visitExpLiteral(self, exp: expression.Literal) -> Any: ...
    def visitExpUnary(self, exp: expression.Unary) -> NoReturn: ...
    def visitStmBlock(self, stm: statement.Block) -> None: ...
    def visitStmBreak(self, stm: statement.Break) -> NoReturn: ...
    def visitStmExp(self, stm: statement.Exp) -> NoReturn: ...
    def visitStmFunDecl(self, stm: statement.FunDecl) -> None: ...
    def visitStmIf(self, stm: statement.If) -> NoReturn: ...
    def visitStmPrint(self, stm: statement.Print) -> NoReturn: ...
    def visitStmReturn(self, stm: statement.Return) -> NoReturn: ...
    def visitStmVarDecl(self, stm: statement.VarDecl) -> NoReturn: ...
    def visitStmWhile(self, stm: statement.While) -> None: ...

class Return(BaseException):
    val: Any
    def __init__(self, val) -> None: ...

class RuntimeError(BaseException):
    lineno: Any
    msg: Any
    def __init__(self, lineno, msg) -> None: ...

def are_compat(op, left, right) -> bool: ...
def is_num(val) -> bool: ...
def is_truthy(val) -> bool: ...
def stringify(val) -> str: ...
