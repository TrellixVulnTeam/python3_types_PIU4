# (generated with --quick)

import enum
from typing import Any, Dict, Optional, Type, TypeVar, Union

Enum: Type[enum.Enum]
errno: module
fcntl: module
k: str
keys: Dict[str, Any]
os: module
params: Params
pp: bytes
shutil: module
sys: module
tempfile: module
time: module

_TDBReader = TypeVar('_TDBReader', bound=DBReader)
_TDBWriter = TypeVar('_TDBWriter', bound=DBWriter)

class DBAccessor(object):
    _path: Any
    _vals: None
    def __init__(self, path) -> None: ...
    def _check_entered(self) -> None: ...
    def _data_path(self) -> str: ...
    def _get_lock(self, create) -> FileLock: ...
    def _read_values_locked(self) -> Dict[str, bytes]: ...
    def get(self, key) -> Any: ...
    def keys(self) -> Any: ...

class DBReader(DBAccessor):
    _path: Any
    _vals: Optional[Dict[Any, bytes]]
    def __enter__(self: _TDBReader) -> _TDBReader: ...
    def __exit__(self, type, value, traceback) -> None: ...

class DBWriter(DBAccessor):
    _lock: Any
    _path: Any
    _prev_umask: Optional[int]
    _vals: Any
    def __enter__(self: _TDBWriter) -> _TDBWriter: ...
    def __exit__(self, type, value, traceback) -> None: ...
    def delete(self, key) -> None: ...
    def put(self, key, value) -> None: ...

class FileLock(object):
    _create: Any
    _fd: Optional[int]
    _path: Any
    def __init__(self, path, create) -> None: ...
    def acquire(self) -> None: ...
    def release(self) -> None: ...

class Params(object):
    db: Any
    def __init__(self, db = ...) -> None: ...
    def _clear_keys_with_type(self, tx_type) -> None: ...
    def car_start(self) -> None: ...
    def delete(self, key) -> None: ...
    def get(self, key, block = ...) -> bytes: ...
    def manager_start(self) -> None: ...
    def put(self, key, dat) -> None: ...
    def transaction(self, write = ...) -> Union[DBReader, DBWriter]: ...

class TxType(enum.Enum):
    CLEAR_ON_CAR_START: int
    CLEAR_ON_MANAGER_START: int
    PERSISTENT: int

class UnknownKeyName(Exception): ...

def fsync_dir(path) -> None: ...
def mkdirs_exists_ok(path) -> None: ...
def read_db(params_path, key) -> bytes: ...
def write_db(params_path, key, value) -> None: ...
