# (generated with --quick)

import logging.handlers
import types
from typing import Any, Dict, Optional, SupportsFloat, Tuple, Type, Union

Interval: Any
RotatingFileHandler: Type[logging.handlers.RotatingFileHandler]
const: Any
logger: logging.Logger
logging: module
sys: module
time: module

class lvl0:
    def cfg_dst_not_exists_error(item: str) -> None: ...
    def cfg_no_absolute_path_error(item: str) -> None: ...
    def cfg_type_error(item: str, type_: str) -> None: ...
    def job_out_info(init_time: float, message: str = ..., completed: bool = ..., skipped: bool = ..., failed: bool = ..., unknown: bool = ...) -> str: ...
    def job_start_info(ip: str, src: str, due_snapshots: list) -> str: ...
    def skip_info(online: bool, due_jobs: list, ip: str, path: str) -> str: ...
    def ts_msg(msg: str = ...) -> str: ...

class lvl1:
    def backup_dst_invalid_error(backup_dst: str) -> None: ...
    def backup_src_not_exist_error(backup_src: str) -> None: ...
    def ts_msg(msg: str = ...) -> str: ...

def _backup_dst_invalid_error(backup_dst: str) -> None: ...
def _backup_src_not_exist_error(backup_src: str) -> None: ...
def _cfg_dst_not_exists_error(item: str) -> None: ...
def _cfg_no_absolute_path_error(item: str) -> None: ...
def _cfg_type_error(item: str, type_: str) -> None: ...
def _fix_len(string: str, limit: int, filler: str = ..., rpl: str = ...) -> str: ...
def _job_out_info(init_time: float, message: str = ..., completed: bool = ..., skipped: bool = ..., failed: bool = ..., unknown: bool = ...) -> str: ...
def _job_start_info(ip: str, src: str, due_snapshots: list) -> str: ...
def _skip_info(online: bool, due_jobs: list, ip: str, path: str) -> str: ...
def _ts_msg_lvl0(msg: str = ...) -> str: ...
def _ts_msg_lvl1(msg: str = ...) -> str: ...
def ceil(__x: SupportsFloat) -> int: ...
def critical(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def debug(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def error(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def info(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def init(log_output_dir: str) -> None: ...
def warning(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
