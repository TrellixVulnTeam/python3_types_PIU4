# (generated with --quick)

from typing import Any, Coroutine, Optional

StorageDriver: Any
aiofiles: Any
async_generator: Any
asyncio_extras: Any
os: module
shutil: module

class LocalDriver(Any):
    __doc__: str
    open: Any
    override_base_path: Any
    def __init__(self, instance, config: Optional[dict] = ...) -> None: ...
    def absolute(self, path) -> Any: ...
    def chmod(self, path: str, mode: int, **kwargs) -> Coroutine[Any, Any, None]: ...
    def chown(self, path: str, uid: int, gid: int, **kwargs) -> Coroutine[Any, Any, None]: ...
    def close(self, **kwargs) -> Coroutine[Any, Any, None]: ...
    def exists(self, path: str, **kwargs) -> Coroutine[Any, Any, bool]: ...
    def get(self, remotepath: str, localpath: str, **kwargs) -> coroutine: ...
    def is_dir(self, path: str, **kwargs) -> Coroutine[Any, Any, bool]: ...
    def is_file(self, path: str, **kwargs) -> Coroutine[Any, Any, bool]: ...
    def is_link(self, path: str, **kwargs) -> Coroutine[Any, Any, bool]: ...
    def listdir(self, path = ..., **kwargs) -> Coroutine[Any, Any, list]: ...
    def mkdir(self, path, mode = ..., **kwargs) -> Coroutine[Any, Any, None]: ...
    def openable(self) -> bool: ...
    def put(self, localpath: str, remotepath: str, **kwargs) -> coroutine: ...
    def remove(self, path: str, **kwargs) -> Coroutine[Any, Any, None]: ...
    def rename(self, oldpath: str, newpath: str, **kwargs) -> Coroutine[Any, Any, None]: ...
    def rmdir(self, path: str, **kwargs) -> Coroutine[Any, Any, None]: ...
    def stat(self, path: str, **kwargs) -> Coroutine[Any, Any, os.stat_result]: ...
    def symlink(self, source: str, dest: str, **kwargs) -> Coroutine[Any, Any, None]: ...
    def touch(self, path: str, **kwargs) -> Coroutine[Any, Any, None]: ...
