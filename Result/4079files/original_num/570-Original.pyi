# (generated with --quick)

import typing
from typing import Any, Dict, Iterable, List, Optional, Type, TypeVar
import xml.etree.ElementTree

Circle: Any
Element: Any
ElementTree: module
Elements: Any
HALF_PI: Any
Line: Any
Path: Any
Point: Any
Polygon: Any
Polyline: Any
Rect: Any
Sequence: Type[typing.Sequence]
__all__: List[str]
elements: Any

_TSVG = TypeVar('_TSVG', bound=SVG)

class SVG:
    __doc__: str
    _height: Any
    _invert_y: Any
    _offset: Any
    _root: Any
    def __init__(self, width: Optional[int] = ..., height: Optional[int] = ..., background: Optional[str] = ..., attributes: Optional[Dict[str, Any]] = ..., root: Optional[xml.etree.ElementTree.Element] = ..., offset = ..., invert_y: bool = ...) -> None: ...
    def add(self, element) -> None: ...
    def add_raw(self, tag: str, attributes: Dict[str, Any], text: Optional[str] = ...) -> None: ...
    def circle(self, center, radius: float, **attributes: Dict[str, Any]) -> None: ...
    def export(self) -> bytes: ...
    @classmethod
    def format(cls, value) -> str: ...
    @classmethod
    def format_attributes(cls, attributes: Dict[str, Any]) -> Dict[str, str]: ...
    def line(self, start, end, **attributes: Dict[str, Any]) -> None: ...
    def offset(self: _TSVG, point) -> _TSVG: ...
    def path(self, *descriptions, **attributes: Dict[str, Any]) -> None: ...
    def polygon(self, points: Iterable, **attributes: Dict[str, Any]) -> None: ...
    def polyline(self, points: Iterable, **attributes: Dict[str, Any]) -> None: ...
    def rect(self, top_left, width: float, height = ..., **attributes: Dict[str, Any]) -> None: ...
    def rectangle(self, top_left, bottom_right, **attributes: Dict[str, Any]) -> None: ...
    def star(self, center, length: int, num_points: int, rotation: float = ..., ngram: bool = ..., inner_length: Optional[int] = ..., **attributes: Dict[str, Any]) -> None: ...
