# (generated with --quick)

import _importlib_modulespec
import contextlib
import doctest
import textwrap
from typing import Any, Callable, Dict, Iterable, Iterator, List, NoReturn, Optional, Type, TypeVar

ELLIPSIS: int
TextWrapper: Type[textwrap.TextWrapper]
VERSION: str
_COLUMNS: int
_DEBUG_PREFIX: str
_ERROR_PREFIX: str
_WARNING_PREFIX: str
__all__: List[str]
_debug: bool
_debug_wrapper: EnhancedTextWrapper
_error_wrapper: EnhancedTextWrapper
_no_prefix_wrapper: EnhancedTextWrapper
_verbose: bool
_verbose_prefix: str
_verbose_wrapper: Optional[EnhancedTextWrapper]
_warning_wrapper: EnhancedTextWrapper
itertools: module
os: module
sys: module
working_directory: Callable[..., contextlib._GeneratorContextManager[None]]

_T = TypeVar('_T')

class EnhancedTextWrapper(textwrap.TextWrapper):
    __doc__: str
    def __init__(self, width: Optional[int] = ..., subsequent_indent: str = ...) -> None: ...
    def fill(self, msg) -> str: ...

def all_pred(func: Callable[[Any], bool], iterable: Iterable) -> bool: ...
def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
def debug(msg: str) -> NoReturn: ...
def debug_is_enabled() -> bool: ...
def die(msg: str) -> NoReturn: ...
def dropwhile(predicate: Callable[[_T], object], iterable: Iterable[_T]) -> Iterator[_T]: ...
def error(msg: str) -> NoReturn: ...
def info(msg: str) -> NoReturn: ...
def set_debug(debug: bool) -> NoReturn: ...
def set_verbosity(verbose: bool, verbose_prefix: Optional[str] = ...) -> NoReturn: ...
def squeeze_blank_lines(s: str) -> str: ...
def strip_margin(s: str, margin_char: str = ...) -> str: ...
def testmod(m: Optional[_importlib_modulespec.ModuleType] = ..., name: Optional[str] = ..., globs: Dict[str, Any] = ..., verbose: bool = ..., report: bool = ..., optionflags: int = ..., extraglobs: Dict[str, Any] = ..., raise_on_error: bool = ..., exclude_empty: bool = ...) -> doctest.TestResults: ...
def verbose(msg: str) -> NoReturn: ...
def verbosity_is_enabled() -> bool: ...
def warn(msg: str) -> NoReturn: ...
def wrap2stdout(msg: str) -> NoReturn: ...
