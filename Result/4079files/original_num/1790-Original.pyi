# (generated with --quick)

import collections
from typing import Any, Callable, Dict, Iterable, List, Optional, Sized, Tuple, Type, TypeVar, Union

Token: Any
a: A
asdf: Any
some_dict: Dict[A, int]
sys: Any

_TBlockNode = TypeVar('_TBlockNode', bound=BlockNode)
_TBlockStateNode = TypeVar('_TBlockStateNode', bound=BlockStateNode)
_TDataMergeNode = TypeVar('_TDataMergeNode', bound=DataMergeNode)
_TEffectClearNode = TypeVar('_TEffectClearNode', bound=EffectClearNode)
_TEffectGiveNode = TypeVar('_TEffectGiveNode', bound=EffectGiveNode)
_TExecuteCmdNode = TypeVar('_TExecuteCmdNode', bound=ExecuteCmdNode)
_TExecuteSubIfBlockArg = TypeVar('_TExecuteSubIfBlockArg', bound=ExecuteSubIfBlockArg)
_TExecuteSubLegacyArg = TypeVar('_TExecuteSubLegacyArg', bound=ExecuteSubLegacyArg)
_TFenaCmdNode = TypeVar('_TFenaCmdNode', bound=FenaCmdNode)
_TFolderNode = TypeVar('_TFolderNode', bound=FolderNode)
_TFunctionCmdNode = TypeVar('_TFunctionCmdNode', bound=FunctionCmdNode)
_TIntRangeNode = TypeVar('_TIntRangeNode', bound=IntRangeNode)
_TItemClearNode = TypeVar('_TItemClearNode', bound=ItemClearNode)
_TItemGiveNode = TypeVar('_TItemGiveNode', bound=ItemGiveNode)
_TItemNode = TypeVar('_TItemNode', bound=ItemNode)
_TItemReplaceBlockNode = TypeVar('_TItemReplaceBlockNode', bound=ItemReplaceBlockNode)
_TItemReplaceEntityNode = TypeVar('_TItemReplaceEntityNode', bound=ItemReplaceEntityNode)
_TJsonArrayNode = TypeVar('_TJsonArrayNode', bound=JsonArrayNode)
_TJsonMapNode = TypeVar('_TJsonMapNode', bound=JsonMapNode)
_TJsonObjectNode = TypeVar('_TJsonObjectNode', bound=JsonObjectNode)
_TMcFunctionNode = TypeVar('_TMcFunctionNode', bound=McFunctionNode)
_TNamespaceIdNode = TypeVar('_TNamespaceIdNode', bound=NamespaceIdNode)
_TNbtArrayNode = TypeVar('_TNbtArrayNode', bound=NbtArrayNode)
_TNbtFloatNode = TypeVar('_TNbtFloatNode', bound=NbtFloatNode)
_TNbtIntegerNode = TypeVar('_TNbtIntegerNode', bound=NbtIntegerNode)
_TNbtMapNode = TypeVar('_TNbtMapNode', bound=NbtMapNode)
_TNbtObjectNode = TypeVar('_TNbtObjectNode', bound=NbtObjectNode)
_TNumberRangeNode = TypeVar('_TNumberRangeNode', bound=NumberRangeNode)
_TObjectiveAddNode = TypeVar('_TObjectiveAddNode', bound=ObjectiveAddNode)
_TObjectiveRemoveNode = TypeVar('_TObjectiveRemoveNode', bound=ObjectiveRemoveNode)
_TObjectiveSetdisplayNode = TypeVar('_TObjectiveSetdisplayNode', bound=ObjectiveSetdisplayNode)
_TProgramNode = TypeVar('_TProgramNode', bound=ProgramNode)
_TScoreboardCmdMathNode = TypeVar('_TScoreboardCmdMathNode', bound=ScoreboardCmdMathNode)
_TScoreboardCmdMathValueNode = TypeVar('_TScoreboardCmdMathValueNode', bound=ScoreboardCmdMathValueNode)
_TScoreboardCmdSpecialNode = TypeVar('_TScoreboardCmdSpecialNode', bound=ScoreboardCmdSpecialNode)
_TSelectorArgsNode = TypeVar('_TSelectorArgsNode', bound=SelectorArgsNode)
_TSelectorDefaultArgNode = TypeVar('_TSelectorDefaultArgNode', bound=SelectorDefaultArgNode)
_TSelectorDefaultArgValueNode = TypeVar('_TSelectorDefaultArgValueNode', bound=SelectorDefaultArgValueNode)
_TSelectorNode = TypeVar('_TSelectorNode', bound=SelectorNode)
_TSelectorScoreArgNode = TypeVar('_TSelectorScoreArgNode', bound=SelectorScoreArgNode)
_TSelectorScoreArgsNode = TypeVar('_TSelectorScoreArgsNode', bound=SelectorScoreArgsNode)
_TSelectorTagArgNode = TypeVar('_TSelectorTagArgNode', bound=SelectorTagArgNode)
_TSelectorVarNode = TypeVar('_TSelectorVarNode', bound=SelectorVarNode)
_TSimpleCmdNode = TypeVar('_TSimpleCmdNode', bound=SimpleCmdNode)
_TTagAddNode = TypeVar('_TTagAddNode', bound=TagAddNode)
_TTagRemoveNode = TypeVar('_TTagRemoveNode', bound=TagRemoveNode)
_TTeamAddNode = TypeVar('_TTeamAddNode', bound=TeamAddNode)
_TTeamEmptyNode = TypeVar('_TTeamEmptyNode', bound=TeamEmptyNode)
_TTeamJoinNode = TypeVar('_TTeamJoinNode', bound=TeamJoinNode)
_TTeamLeaveNode = TypeVar('_TTeamLeaveNode', bound=TeamLeaveNode)
_TTeamOptionNode = TypeVar('_TTeamOptionNode', bound=TeamOptionNode)
_TTeamRemoveNode = TypeVar('_TTeamRemoveNode', bound=TeamRemoveNode)
_TVarSetNode = TypeVar('_TVarSetNode', bound=VarSetNode)
_TVec2Node = TypeVar('_TVec2Node', bound=Vec2Node)
_TVec3Node = TypeVar('_TVec3Node', bound=Vec3Node)
_TXpMathNode = TypeVar('_TXpMathNode', bound=XpMathNode)

class A:
    x: Any
    y: Any
    def __init__(self, x, y) -> None: ...

class BlockNode(tuple):
    __slots__ = ["block", "nbt", "states"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    block: Any
    nbt: Optional[NbtObjectNode]
    states: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Optional[NbtObjectNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TBlockNode], block, states = ..., nbt: Optional[NbtObjectNode] = ...) -> _TBlockNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TBlockNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TBlockNode: ...
    def _replace(self: _TBlockNode, **kwds) -> _TBlockNode: ...

class BlockStateNode(tuple):
    __slots__ = ["arg", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    arg: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TBlockStateNode], arg, value) -> _TBlockStateNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TBlockStateNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TBlockStateNode: ...
    def _replace(self: _TBlockStateNode, **kwds) -> _TBlockStateNode: ...

class CmdNode(Node):
    __doc__: str

class DataCmdNode(MainCmdNode): ...

class DataMergeNode(tuple):
    __slots__ = ["entity_vec3", "nbt"]
    __dict__: collections.OrderedDict[str, Union[NbtObjectNode, SelectorNode, Vec3Node]]
    _field_defaults: collections.OrderedDict[str, Union[NbtObjectNode, SelectorNode, Vec3Node]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    entity_vec3: Union[SelectorNode, Vec3Node]
    nbt: NbtObjectNode
    def __getnewargs__(self) -> Tuple[Union[SelectorNode, Vec3Node], NbtObjectNode]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TDataMergeNode], entity_vec3: Union[SelectorNode, Vec3Node], nbt: NbtObjectNode) -> _TDataMergeNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Union[NbtObjectNode, SelectorNode, Vec3Node]]: ...
    @classmethod
    def _make(cls: Type[_TDataMergeNode], iterable: Iterable[Union[NbtObjectNode, SelectorNode, Vec3Node]], new = ..., len: Callable[[Sized], int] = ...) -> _TDataMergeNode: ...
    def _replace(self: _TDataMergeNode, **kwds: Union[NbtObjectNode, SelectorNode, Vec3Node]) -> _TDataMergeNode: ...

class EffectClearNode(tuple):
    __slots__ = ["effect_id", "selector"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    effect_id: Any
    selector: SelectorNode
    def __getnewargs__(self) -> Tuple[SelectorNode, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TEffectClearNode], selector: SelectorNode, effect_id = ...) -> _TEffectClearNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TEffectClearNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TEffectClearNode: ...
    def _replace(self: _TEffectClearNode, **kwds) -> _TEffectClearNode: ...

class EffectCmdNode(MainCmdNode): ...

class EffectGiveNode(tuple):
    __slots__ = ["duration", "effect_id", "hide_particles", "level", "selector"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str, str]
    duration: Any
    effect_id: Any
    hide_particles: bool
    level: Any
    selector: SelectorNode
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, Any, Any, bool]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TEffectGiveNode], selector: SelectorNode, effect_id, duration = ..., level = ..., hide_particles: bool = ...) -> _TEffectGiveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TEffectGiveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TEffectGiveNode: ...
    def _replace(self: _TEffectGiveNode, **kwds) -> _TEffectGiveNode: ...

class ExecuteCmdNode(tuple):
    __slots__ = ["sub_cmd_nodes"]
    __dict__: collections.OrderedDict[str, List[ExecuteSubLegacyArg]]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, List[ExecuteSubLegacyArg]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    sub_cmd_nodes: List[ExecuteSubLegacyArg]
    def __getnewargs__(self) -> Tuple[List[ExecuteSubLegacyArg]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TExecuteCmdNode], sub_cmd_nodes: List[ExecuteSubLegacyArg]) -> _TExecuteCmdNode: ...
    def _asdict(self) -> collections.OrderedDict[str, List[ExecuteSubLegacyArg]]: ...
    @classmethod
    def _make(cls: Type[_TExecuteCmdNode], iterable: Iterable[List[ExecuteSubLegacyArg]], new = ..., len: Callable[[Sized], int] = ...) -> _TExecuteCmdNode: ...
    def _replace(self: _TExecuteCmdNode, **kwds: List[ExecuteSubLegacyArg]) -> _TExecuteCmdNode: ...

class ExecuteSubIfBlockArg(tuple):
    __slots__ = ["block", "coords"]
    __dict__: collections.OrderedDict[str, Optional[Union[BlockNode, Vec3Node]]]
    _field_defaults: collections.OrderedDict[str, Optional[Union[BlockNode, Vec3Node]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    block: BlockNode
    coords: Optional[Vec3Node]
    def __getnewargs__(self) -> Tuple[BlockNode, Optional[Vec3Node]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TExecuteSubIfBlockArg], block: BlockNode, coords: Optional[Vec3Node] = ...) -> _TExecuteSubIfBlockArg: ...
    def _asdict(self) -> collections.OrderedDict[str, Optional[Union[BlockNode, Vec3Node]]]: ...
    @classmethod
    def _make(cls: Type[_TExecuteSubIfBlockArg], iterable: Iterable[Optional[Union[BlockNode, Vec3Node]]], new = ..., len: Callable[[Sized], int] = ...) -> _TExecuteSubIfBlockArg: ...
    def _replace(self: _TExecuteSubIfBlockArg, **kwds: Optional[Union[BlockNode, Vec3Node]]) -> _TExecuteSubIfBlockArg: ...

class ExecuteSubLegacyArg(tuple):
    __slots__ = ["coords", "selector", "sub_if"]
    __dict__: collections.OrderedDict[str, Optional[Union[SelectorNode, Vec3Node, List[ExecuteSubIfBlockArg]]]]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Optional[Union[SelectorNode, Vec3Node, List[ExecuteSubIfBlockArg]]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    coords: Optional[Vec3Node]
    selector: SelectorNode
    sub_if: List[ExecuteSubIfBlockArg]
    def __getnewargs__(self) -> Tuple[SelectorNode, Optional[Vec3Node], List[ExecuteSubIfBlockArg]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TExecuteSubLegacyArg], selector: SelectorNode, coords: Optional[Vec3Node], sub_if: List[ExecuteSubIfBlockArg]) -> _TExecuteSubLegacyArg: ...
    def _asdict(self) -> collections.OrderedDict[str, Optional[Union[SelectorNode, Vec3Node, List[ExecuteSubIfBlockArg]]]]: ...
    @classmethod
    def _make(cls: Type[_TExecuteSubLegacyArg], iterable: Iterable[Optional[Union[SelectorNode, Vec3Node, List[ExecuteSubIfBlockArg]]]], new = ..., len: Callable[[Sized], int] = ...) -> _TExecuteSubLegacyArg: ...
    def _replace(self: _TExecuteSubLegacyArg, **kwds: Optional[Union[SelectorNode, Vec3Node, List[ExecuteSubIfBlockArg]]]) -> _TExecuteSubLegacyArg: ...

class FenaCmdNode(tuple):
    __slots__ = ["cmd_segment_nodes"]
    __dict__: collections.OrderedDict[str, List[MainCmdNode]]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, List[MainCmdNode]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    cmd_segment_nodes: List[MainCmdNode]
    def __getnewargs__(self) -> Tuple[List[MainCmdNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TFenaCmdNode], cmd_segment_nodes: List[MainCmdNode]) -> _TFenaCmdNode: ...
    def _asdict(self) -> collections.OrderedDict[str, List[MainCmdNode]]: ...
    @classmethod
    def _make(cls: Type[_TFenaCmdNode], iterable: Iterable[List[MainCmdNode]], new = ..., len: Callable[[Sized], int] = ...) -> _TFenaCmdNode: ...
    def _replace(self: _TFenaCmdNode, **kwds: List[MainCmdNode]) -> _TFenaCmdNode: ...

class FolderNode(tuple):
    __slots__ = ["folder", "statement_nodes"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    folder: Any
    statement_nodes: List[StmtNode]
    def __getnewargs__(self) -> Tuple[Any, List[StmtNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TFolderNode], folder, statement_nodes: List[StmtNode]) -> _TFolderNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TFolderNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TFolderNode: ...
    def _replace(self: _TFolderNode, **kwds) -> _TFolderNode: ...

class FunctionCmdNode(tuple):
    __slots__ = ["function_id", "selector", "sub_arg"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    function_id: NamespaceIdNode
    selector: Optional[SelectorNode]
    sub_arg: Any
    def __getnewargs__(self) -> Tuple[NamespaceIdNode, Any, Optional[SelectorNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TFunctionCmdNode], function_id: NamespaceIdNode, sub_arg = ..., selector: Optional[SelectorNode] = ...) -> _TFunctionCmdNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TFunctionCmdNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TFunctionCmdNode: ...
    def _replace(self: _TFunctionCmdNode, **kwds) -> _TFunctionCmdNode: ...

class IntRangeNode(tuple):
    __slots__ = ["args", "max_int", "min_int"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    args: Tuple[str, ...]
    max_int: Any
    min_int: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Tuple[str, ...]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TIntRangeNode], min_int, max_int, args: Tuple[str, ...]) -> _TIntRangeNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TIntRangeNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TIntRangeNode: ...
    def _replace(self: _TIntRangeNode, **kwds) -> _TIntRangeNode: ...

class ItemClearNode(tuple):
    __slots__ = ["count", "item", "selector"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    count: Any
    item: Any
    selector: SelectorNode
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TItemClearNode], selector: SelectorNode, item, count = ...) -> _TItemClearNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TItemClearNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TItemClearNode: ...
    def _replace(self: _TItemClearNode, **kwds) -> _TItemClearNode: ...

class ItemCmdNode(MainCmdNode): ...

class ItemGiveNode(tuple):
    __slots__ = ["count", "item", "selector"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    count: Any
    item: ItemNode
    selector: SelectorNode
    def __getnewargs__(self) -> Tuple[SelectorNode, ItemNode, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TItemGiveNode], selector: SelectorNode, item: ItemNode, count = ...) -> _TItemGiveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TItemGiveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TItemGiveNode: ...
    def _replace(self: _TItemGiveNode, **kwds) -> _TItemGiveNode: ...

class ItemNode(tuple):
    __slots__ = ["damage", "item_id", "nbt"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    damage: Any
    item_id: Any
    nbt: Optional[NbtObjectNode]
    def __getnewargs__(self) -> Tuple[Any, Any, Optional[NbtObjectNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TItemNode], item_id, damage = ..., nbt: Optional[NbtObjectNode] = ...) -> _TItemNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TItemNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TItemNode: ...
    def _replace(self: _TItemNode, **kwds) -> _TItemNode: ...

class ItemReplaceBlockNode(tuple):
    __slots__ = ["count", "item", "slot", "vec3"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str]
    count: Any
    item: ItemNode
    slot: Any
    vec3: Vec3Node
    def __getnewargs__(self) -> Tuple[Vec3Node, Any, ItemNode, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TItemReplaceBlockNode], vec3: Vec3Node, slot, item: ItemNode, count = ...) -> _TItemReplaceBlockNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TItemReplaceBlockNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TItemReplaceBlockNode: ...
    def _replace(self: _TItemReplaceBlockNode, **kwds) -> _TItemReplaceBlockNode: ...

class ItemReplaceEntityNode(tuple):
    __slots__ = ["count", "item", "selector", "slot"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str]
    count: Any
    item: ItemNode
    selector: SelectorNode
    slot: Any
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, ItemNode, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TItemReplaceEntityNode], selector: SelectorNode, slot, item: ItemNode, count = ...) -> _TItemReplaceEntityNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TItemReplaceEntityNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TItemReplaceEntityNode: ...
    def _replace(self: _TItemReplaceEntityNode, **kwds) -> _TItemReplaceEntityNode: ...

class JsonArrayNode(tuple):
    __slots__ = ["values"]
    __dict__: collections.OrderedDict[str, list]
    _field_defaults: collections.OrderedDict[str, list]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    values: list
    def __getnewargs__(self) -> Tuple[list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TJsonArrayNode], values: list) -> _TJsonArrayNode: ...
    def _asdict(self) -> collections.OrderedDict[str, list]: ...
    @classmethod
    def _make(cls: Type[_TJsonArrayNode], iterable: Iterable[list], new = ..., len: Callable[[Sized], int] = ...) -> _TJsonArrayNode: ...
    def _replace(self: _TJsonArrayNode, **kwds: list) -> _TJsonArrayNode: ...

class JsonMapNode(tuple):
    __slots__ = ["arg", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    arg: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TJsonMapNode], arg, value) -> _TJsonMapNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TJsonMapNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TJsonMapNode: ...
    def _replace(self: _TJsonMapNode, **kwds) -> _TJsonMapNode: ...

class JsonNode(CmdNode): ...

class JsonObjectNode(tuple):
    __slots__ = ["mappings"]
    __dict__: collections.OrderedDict[str, list]
    _field_defaults: collections.OrderedDict[str, list]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    mappings: list
    def __getnewargs__(self) -> Tuple[list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TJsonObjectNode], mappings: list) -> _TJsonObjectNode: ...
    def _asdict(self) -> collections.OrderedDict[str, list]: ...
    @classmethod
    def _make(cls: Type[_TJsonObjectNode], iterable: Iterable[list], new = ..., len: Callable[[Sized], int] = ...) -> _TJsonObjectNode: ...
    def _replace(self: _TJsonObjectNode, **kwds: list) -> _TJsonObjectNode: ...

class MainCmdNode(CmdNode):
    __doc__: str

class McFunctionNode(tuple):
    __slots__ = ["command_nodes", "debug", "name"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    command_nodes: List[FenaCmdNode]
    debug: bool
    name: Any
    def __getnewargs__(self) -> Tuple[Any, List[FenaCmdNode], bool]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TMcFunctionNode], name, command_nodes: List[FenaCmdNode], debug: bool) -> _TMcFunctionNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TMcFunctionNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TMcFunctionNode: ...
    def _replace(self: _TMcFunctionNode, **kwds) -> _TMcFunctionNode: ...

class NamespaceIdNode(tuple):
    __slots__ = ["id_value", "namespace"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    id_value: Any
    namespace: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNamespaceIdNode], id_value, namespace = ...) -> _TNamespaceIdNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNamespaceIdNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNamespaceIdNode: ...
    def _replace(self: _TNamespaceIdNode, **kwds) -> _TNamespaceIdNode: ...

class NbtArrayNode(tuple):
    __slots__ = ["type_specifier", "values"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    type_specifier: Any
    values: list
    def __getnewargs__(self) -> Tuple[list, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNbtArrayNode], values: list, type_specifier = ...) -> _TNbtArrayNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNbtArrayNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNbtArrayNode: ...
    def _replace(self: _TNbtArrayNode, **kwds) -> _TNbtArrayNode: ...

class NbtFloatNode(tuple):
    __slots__ = ["float_type", "float_value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    float_type: Any
    float_value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNbtFloatNode], float_value, float_type = ...) -> _TNbtFloatNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNbtFloatNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNbtFloatNode: ...
    def _replace(self: _TNbtFloatNode, **kwds) -> _TNbtFloatNode: ...

class NbtIntegerNode(tuple):
    __slots__ = ["int_type", "int_value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    int_type: Any
    int_value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNbtIntegerNode], int_value, int_type = ...) -> _TNbtIntegerNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNbtIntegerNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNbtIntegerNode: ...
    def _replace(self: _TNbtIntegerNode, **kwds) -> _TNbtIntegerNode: ...

class NbtMapNode(tuple):
    __slots__ = ["arg", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    arg: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNbtMapNode], arg, value) -> _TNbtMapNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNbtMapNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNbtMapNode: ...
    def _replace(self: _TNbtMapNode, **kwds) -> _TNbtMapNode: ...

class NbtNode(CmdNode): ...

class NbtObjectNode(tuple):
    __slots__ = ["mappings"]
    __dict__: collections.OrderedDict[str, list]
    _field_defaults: collections.OrderedDict[str, list]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    mappings: list
    def __getnewargs__(self) -> Tuple[list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNbtObjectNode], mappings: list) -> _TNbtObjectNode: ...
    def _asdict(self) -> collections.OrderedDict[str, list]: ...
    @classmethod
    def _make(cls: Type[_TNbtObjectNode], iterable: Iterable[list], new = ..., len: Callable[[Sized], int] = ...) -> _TNbtObjectNode: ...
    def _replace(self: _TNbtObjectNode, **kwds: list) -> _TNbtObjectNode: ...

class Node:
    __doc__: str

class NumberRangeNode(tuple):
    __slots__ = ["max_int", "min_int"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    max_int: Any
    min_int: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TNumberRangeNode], min_int, max_int) -> _TNumberRangeNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TNumberRangeNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TNumberRangeNode: ...
    def _replace(self: _TNumberRangeNode, **kwds) -> _TNumberRangeNode: ...

class ObjectiveAddNode(tuple):
    __slots__ = ["criteria", "display_name", "objective"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    criteria: Any
    display_name: list
    objective: Any
    def __getnewargs__(self) -> Tuple[Any, Any, list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TObjectiveAddNode], objective, criteria, display_name: list) -> _TObjectiveAddNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TObjectiveAddNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TObjectiveAddNode: ...
    def _replace(self: _TObjectiveAddNode, **kwds) -> _TObjectiveAddNode: ...

class ObjectiveCmdNode(MainCmdNode): ...

class ObjectiveRemoveNode(tuple):
    __slots__ = ["objective"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    objective: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TObjectiveRemoveNode], objective) -> _TObjectiveRemoveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TObjectiveRemoveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TObjectiveRemoveNode: ...
    def _replace(self: _TObjectiveRemoveNode, **kwds) -> _TObjectiveRemoveNode: ...

class ObjectiveSetdisplayNode(tuple):
    __slots__ = ["objective", "slot"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    objective: Any
    slot: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TObjectiveSetdisplayNode], slot, objective = ...) -> _TObjectiveSetdisplayNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TObjectiveSetdisplayNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TObjectiveSetdisplayNode: ...
    def _replace(self: _TObjectiveSetdisplayNode, **kwds) -> _TObjectiveSetdisplayNode: ...

class ProgramNode(tuple):
    __slots__ = ["statement_nodes"]
    __dict__: collections.OrderedDict[str, List[StmtNode]]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, List[StmtNode]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    statement_nodes: List[StmtNode]
    def __getnewargs__(self) -> Tuple[List[StmtNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TProgramNode], statement_nodes: List[StmtNode]) -> _TProgramNode: ...
    def _asdict(self) -> collections.OrderedDict[str, List[StmtNode]]: ...
    @classmethod
    def _make(cls: Type[_TProgramNode], iterable: Iterable[List[StmtNode]], new = ..., len: Callable[[Sized], int] = ...) -> _TProgramNode: ...
    def _replace(self: _TProgramNode, **kwds: List[StmtNode]) -> _TProgramNode: ...

class ScoreboardCmdMathNode(tuple):
    __slots__ = ["objective", "objective_get", "operator", "target", "target_get"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str, str]
    objective: Any
    objective_get: Any
    operator: Any
    target: Any
    target_get: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TScoreboardCmdMathNode], target, objective, operator, target_get, objective_get = ...) -> _TScoreboardCmdMathNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TScoreboardCmdMathNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TScoreboardCmdMathNode: ...
    def _replace(self: _TScoreboardCmdMathNode, **kwds) -> _TScoreboardCmdMathNode: ...

class ScoreboardCmdMathValueNode(tuple):
    __slots__ = ["nbt", "objective", "operator", "target", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str, str]
    nbt: Optional[NbtObjectNode]
    objective: Any
    operator: Any
    target: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Optional[NbtObjectNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TScoreboardCmdMathValueNode], target, objective, operator, value, nbt: Optional[NbtObjectNode] = ...) -> _TScoreboardCmdMathValueNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TScoreboardCmdMathValueNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TScoreboardCmdMathValueNode: ...
    def _replace(self: _TScoreboardCmdMathValueNode, **kwds) -> _TScoreboardCmdMathValueNode: ...

class ScoreboardCmdSpecialNode(tuple):
    __slots__ = ["objective", "sub_cmd", "target"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    objective: Any
    sub_cmd: Any
    target: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TScoreboardCmdSpecialNode], target, sub_cmd, objective) -> _TScoreboardCmdSpecialNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TScoreboardCmdSpecialNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TScoreboardCmdSpecialNode: ...
    def _replace(self: _TScoreboardCmdSpecialNode, **kwds) -> _TScoreboardCmdSpecialNode: ...

class SelectorArgsNode(tuple):
    __slots__ = ["default_args", "score_args", "tag_arg"]
    __dict__: collections.OrderedDict[str, Optional[Union[SelectorScoreArgsNode, SelectorTagArgNode, List[SelectorDefaultArgNode]]]]
    _field_defaults: collections.OrderedDict[str, Optional[Union[SelectorScoreArgsNode, SelectorTagArgNode, List[SelectorDefaultArgNode]]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    default_args: List[SelectorDefaultArgNode]
    score_args: SelectorScoreArgsNode
    tag_arg: Optional[SelectorTagArgNode]
    def __getnewargs__(self) -> Tuple[List[SelectorDefaultArgNode], SelectorScoreArgsNode, Optional[SelectorTagArgNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorArgsNode], default_args: List[SelectorDefaultArgNode], score_args: SelectorScoreArgsNode, tag_arg: Optional[SelectorTagArgNode]) -> _TSelectorArgsNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Optional[Union[SelectorScoreArgsNode, SelectorTagArgNode, List[SelectorDefaultArgNode]]]]: ...
    @classmethod
    def _make(cls: Type[_TSelectorArgsNode], iterable: Iterable[Optional[Union[SelectorScoreArgsNode, SelectorTagArgNode, List[SelectorDefaultArgNode]]]], new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorArgsNode: ...
    def _replace(self: _TSelectorArgsNode, **kwds: Optional[Union[SelectorScoreArgsNode, SelectorTagArgNode, List[SelectorDefaultArgNode]]]) -> _TSelectorArgsNode: ...

class SelectorDefaultArgNode(tuple):
    __slots__ = ["arg", "arg_value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    arg: Any
    arg_value: SelectorDefaultArgValueNode
    def __getnewargs__(self) -> Tuple[Any, SelectorDefaultArgValueNode]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorDefaultArgNode], arg, arg_value: SelectorDefaultArgValueNode) -> _TSelectorDefaultArgNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TSelectorDefaultArgNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorDefaultArgNode: ...
    def _replace(self: _TSelectorDefaultArgNode, **kwds) -> _TSelectorDefaultArgNode: ...

class SelectorDefaultArgValueNode(tuple):
    __slots__ = ["arg_value", "negated"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    arg_value: Any
    negated: bool
    def __getnewargs__(self) -> Tuple[Any, bool]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorDefaultArgValueNode], arg_value, negated: bool = ...) -> _TSelectorDefaultArgValueNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TSelectorDefaultArgValueNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorDefaultArgValueNode: ...
    def _replace(self: _TSelectorDefaultArgValueNode, **kwds) -> _TSelectorDefaultArgValueNode: ...

class SelectorNode(tuple):
    __slots__ = ["selector_args", "selector_var"]
    __dict__: collections.OrderedDict[str, Optional[Union[SelectorArgsNode, SelectorVarNode]]]
    _field_defaults: collections.OrderedDict[str, Optional[Union[SelectorArgsNode, SelectorVarNode]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    selector_args: Optional[SelectorArgsNode]
    selector_var: SelectorVarNode
    def __getnewargs__(self) -> Tuple[SelectorVarNode, Optional[SelectorArgsNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorNode], selector_var: SelectorVarNode, selector_args: Optional[SelectorArgsNode] = ...) -> _TSelectorNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Optional[Union[SelectorArgsNode, SelectorVarNode]]]: ...
    @classmethod
    def _make(cls: Type[_TSelectorNode], iterable: Iterable[Optional[Union[SelectorArgsNode, SelectorVarNode]]], new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorNode: ...
    def _replace(self: _TSelectorNode, **kwds: Optional[Union[SelectorArgsNode, SelectorVarNode]]) -> _TSelectorNode: ...

class SelectorScoreArgNode(tuple):
    __slots__ = ["objective", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    objective: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorScoreArgNode], objective, value) -> _TSelectorScoreArgNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TSelectorScoreArgNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorScoreArgNode: ...
    def _replace(self: _TSelectorScoreArgNode, **kwds) -> _TSelectorScoreArgNode: ...

class SelectorScoreArgsNode(tuple):
    __slots__ = ["score_args"]
    __dict__: collections.OrderedDict[str, List[SelectorScoreArgNode]]
    _field_defaults: collections.OrderedDict[str, List[SelectorScoreArgNode]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    score_args: List[SelectorScoreArgNode]
    def __getnewargs__(self) -> Tuple[List[SelectorScoreArgNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorScoreArgsNode], score_args: List[SelectorScoreArgNode]) -> _TSelectorScoreArgsNode: ...
    def _asdict(self) -> collections.OrderedDict[str, List[SelectorScoreArgNode]]: ...
    @classmethod
    def _make(cls: Type[_TSelectorScoreArgsNode], iterable: Iterable[List[SelectorScoreArgNode]], new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorScoreArgsNode: ...
    def _replace(self: _TSelectorScoreArgsNode, **kwds: List[SelectorScoreArgNode]) -> _TSelectorScoreArgsNode: ...

class SelectorTagArgNode(tuple):
    __slots__ = ["negated", "tag"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    negated: bool
    tag: Any
    def __getnewargs__(self) -> Tuple[Any, bool]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorTagArgNode], tag, negated: bool = ...) -> _TSelectorTagArgNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TSelectorTagArgNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorTagArgNode: ...
    def _replace(self: _TSelectorTagArgNode, **kwds) -> _TSelectorTagArgNode: ...

class SelectorVarNode(tuple):
    __slots__ = ["selector_var_specifier"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    selector_var_specifier: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSelectorVarNode], selector_var_specifier) -> _TSelectorVarNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TSelectorVarNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TSelectorVarNode: ...
    def _replace(self: _TSelectorVarNode, **kwds) -> _TSelectorVarNode: ...

class SimpleCmdNode(tuple):
    __slots__ = ["tokens"]
    __dict__: collections.OrderedDict[str, list]
    _field_defaults: collections.OrderedDict[str, list]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    tokens: list
    def __getnewargs__(self) -> Tuple[list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TSimpleCmdNode], tokens: list) -> _TSimpleCmdNode: ...
    def _asdict(self) -> collections.OrderedDict[str, list]: ...
    @classmethod
    def _make(cls: Type[_TSimpleCmdNode], iterable: Iterable[list], new = ..., len: Callable[[Sized], int] = ...) -> _TSimpleCmdNode: ...
    def _replace(self: _TSimpleCmdNode, **kwds: list) -> _TSimpleCmdNode: ...

class StmtNode(Node):
    __doc__: str

class TagAddNode(tuple):
    __slots__ = ["nbt", "selector", "tag"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    nbt: Optional[NbtObjectNode]
    selector: SelectorNode
    tag: Any
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, Optional[NbtObjectNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTagAddNode], selector: SelectorNode, tag, nbt: Optional[NbtObjectNode] = ...) -> _TTagAddNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTagAddNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTagAddNode: ...
    def _replace(self: _TTagAddNode, **kwds) -> _TTagAddNode: ...

class TagCmdNode(MainCmdNode): ...

class TagRemoveNode(tuple):
    __slots__ = ["nbt", "selector", "tag"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    nbt: Optional[NbtObjectNode]
    selector: SelectorNode
    tag: Any
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, Optional[NbtObjectNode]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTagRemoveNode], selector: SelectorNode, tag, nbt: Optional[NbtObjectNode] = ...) -> _TTagRemoveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTagRemoveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTagRemoveNode: ...
    def _replace(self: _TTagRemoveNode, **kwds) -> _TTagRemoveNode: ...

class TeamAddNode(tuple):
    __slots__ = ["display_name", "team_name"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    display_name: list
    team_name: Any
    def __getnewargs__(self) -> Tuple[Any, list]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamAddNode], team_name, display_name: list) -> _TTeamAddNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamAddNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamAddNode: ...
    def _replace(self: _TTeamAddNode, **kwds) -> _TTeamAddNode: ...

class TeamCmdNode(MainCmdNode): ...

class TeamEmptyNode(tuple):
    __slots__ = ["team_name"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    team_name: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamEmptyNode], team_name) -> _TTeamEmptyNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamEmptyNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamEmptyNode: ...
    def _replace(self: _TTeamEmptyNode, **kwds) -> _TTeamEmptyNode: ...

class TeamJoinNode(tuple):
    __slots__ = ["target", "team_name"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    target: Any
    team_name: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamJoinNode], team_name, target) -> _TTeamJoinNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamJoinNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamJoinNode: ...
    def _replace(self: _TTeamJoinNode, **kwds) -> _TTeamJoinNode: ...

class TeamLeaveNode(tuple):
    __slots__ = ["target"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    target: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamLeaveNode], target) -> _TTeamLeaveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamLeaveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamLeaveNode: ...
    def _replace(self: _TTeamLeaveNode, **kwds) -> _TTeamLeaveNode: ...

class TeamOptionNode(tuple):
    __slots__ = ["option", "team_name", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    option: Any
    team_name: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamOptionNode], team_name, option, value) -> _TTeamOptionNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamOptionNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamOptionNode: ...
    def _replace(self: _TTeamOptionNode, **kwds) -> _TTeamOptionNode: ...

class TeamRemoveNode(tuple):
    __slots__ = ["team_name"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str]
    team_name: Any
    def __getnewargs__(self) -> Tuple[Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TTeamRemoveNode], team_name) -> _TTeamRemoveNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TTeamRemoveNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TTeamRemoveNode: ...
    def _replace(self: _TTeamRemoveNode, **kwds) -> _TTeamRemoveNode: ...

class VarSetNode(tuple):
    __slots__ = ["value", "variable"]
    __dict__: collections.OrderedDict[str, Any]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    value: Any
    variable: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TVarSetNode], variable, value) -> _TVarSetNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TVarSetNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TVarSetNode: ...
    def _replace(self: _TVarSetNode, **kwds) -> _TVarSetNode: ...

class Vec2Node(tuple):
    __slots__ = ["coord1", "coord2"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    coord1: Any
    coord2: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TVec2Node], coord1, coord2) -> _TVec2Node: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TVec2Node], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TVec2Node: ...
    def _replace(self: _TVec2Node, **kwds) -> _TVec2Node: ...

class Vec3Node(tuple):
    __slots__ = ["coord1", "coord2", "coord3"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    coord1: Any
    coord2: Any
    coord3: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TVec3Node], coord1, coord2, coord3) -> _TVec3Node: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TVec3Node], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TVec3Node: ...
    def _replace(self: _TVec3Node, **kwds) -> _TVec3Node: ...

class XpCmdNode(MainCmdNode): ...

class XpMathNode(tuple):
    __slots__ = ["operator", "selector", "sub_cmd", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _field_defaults: collections.OrderedDict[str, Any]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str, str]
    operator: Any
    selector: SelectorNode
    sub_cmd: Any
    value: Any
    def __getnewargs__(self) -> Tuple[SelectorNode, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TXpMathNode], selector: SelectorNode, operator, value, sub_cmd = ...) -> _TXpMathNode: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_TXpMathNode], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _TXpMathNode: ...
    def _replace(self: _TXpMathNode, **kwds) -> _TXpMathNode: ...
