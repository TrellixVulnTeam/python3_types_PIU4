# (generated with --quick)

import numpy
from typing import Any, Dict, Optional, Tuple, TypeVar

__author__: str
cross_validation: Any
ensemble: Any
np: module
pd: Any
stats: Any

_T0 = TypeVar('_T0')
_TConstantModel = TypeVar('_TConstantModel', bound=ConstantModel)
_TKMeansSplitter = TypeVar('_TKMeansSplitter', bound=KMeansSplitter)
_TStacker = TypeVar('_TStacker', bound=Stacker)
_TVoter = TypeVar('_TVoter', bound=Voter)
_TWorkflow = TypeVar('_TWorkflow', bound=Workflow)

class Aggregator:
    def aggregate(self, x, y) -> None: ...

class Booster(Any):
    current_sub_dag: int
    sub_dags: Any
    def __init__(self, sub_dags = ...) -> None: ...
    def _make_estimator(self, append = ..., random_state = ...) -> Workflow: ...

class ConstantModel:
    cls: Any
    def __init__(self, cls) -> None: ...
    def fit(self: _TConstantModel, x, y) -> _TConstantModel: ...
    def predict(self, x) -> Any: ...

class KMeansSplitter:
    kmeans: Any
    sorted_outputs: Optional[list]
    weight_idx: list
    def __init__(self, k) -> None: ...
    def fit(self: _TKMeansSplitter, x, y, sample_weight = ...) -> _TKMeansSplitter: ...
    def transform(self, x) -> list: ...

class Stacker(Aggregator):
    initial_dag: Any
    sub_dags: Any
    train: Any
    def __init__(self, sub_dags = ..., initial_dag = ...) -> None: ...
    def aggregate(self, X, y) -> Tuple[Any, Any]: ...
    def fit(self: _TStacker, X, y, sample_weight = ...) -> _TStacker: ...

class Voter(Aggregator):
    def aggregate(self, x, y) -> Tuple[Any, Any]: ...
    def fit(self: _TVoter, x, y) -> _TVoter: ...
    def union_aggregate(self, x, y) -> Tuple[Any, Any]: ...

class Workflow:
    classes_: Any
    dag: Any
    models: Any
    sample_weight: Any
    def __init__(self, dag = ...) -> None: ...
    def fit(self: _TWorkflow, X, y, sample_weight = ...) -> _TWorkflow: ...
    def get_params(self, deep = ...) -> Dict[str, Any]: ...
    def predict(self, X) -> numpy.ndarray: ...
    def set_params(self, **params) -> None: ...
    def transform(self, X) -> Any: ...

def is_predictor(cls) -> Any: ...
def is_transformer(cls) -> Any: ...
def make_predictor(cls: _T0) -> _T0: ...
def make_transformer(cls: _T0) -> _T0: ...
