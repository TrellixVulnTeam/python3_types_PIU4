# (generated with --quick)

import collections
from typing import Any, Callable, Dict, Iterable, List, Sized, Tuple, Type, TypeVar, Union

ArgSpec = `namedtuple-ArgSpec-argname-typespec`
ClassSpec = `namedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`
MethodSpec = `namedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`
TypeSpec = `namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`

DATA_PATH: str
OBJCTYPE2SPEC: Dict[Any, `namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`]
PYTYPE2SPEC: Dict[Any, `namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`]
TYPE_SPECS: List[`namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`]
nspoint: Any
nsrect: Any
nssize: Any
op: module
os: module
pyref: Any
shutil: module

_Tnamedtuple-ArgSpec-argname-typespec = TypeVar('_Tnamedtuple-ArgSpec-argname-typespec', bound=`namedtuple-ArgSpec-argname-typespec`)
_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols = TypeVar('_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols', bound=`namedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`)
_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited = TypeVar('_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited', bound=`namedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`)
_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code = TypeVar('_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code', bound=`namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`)

class `namedtuple-ArgSpec-argname-typespec`(tuple):
    __slots__ = ["argname", "typespec"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    argname: Any
    typespec: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ArgSpec-argname-typespec`], argname, typespec) -> `_Tnamedtuple-ArgSpec-argname-typespec`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ArgSpec-argname-typespec`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ArgSpec-argname-typespec`: ...
    def _replace(self: `_Tnamedtuple-ArgSpec-argname-typespec`, **kwds) -> `_Tnamedtuple-ArgSpec-argname-typespec`: ...

class `namedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`(tuple):
    __slots__ = ["clsname", "follow_protocols", "is_protocol", "methodspecs", "superclass"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    clsname: Any
    follow_protocols: Any
    is_protocol: Any
    methodspecs: Any
    superclass: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`], clsname, superclass, methodspecs, is_protocol, follow_protocols) -> `_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`: ...
    def _replace(self: `_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`, **kwds) -> `_Tnamedtuple-ClassSpec-clsname-superclass-methodspecs-is_protocol-follow_protocols`: ...

class `namedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`(tuple):
    __slots__ = ["argspecs", "is_inherited", "objcname", "pyname", "returntype"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    argspecs: Any
    is_inherited: Any
    objcname: Any
    pyname: Any
    returntype: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`], pyname, objcname, argspecs, returntype, is_inherited) -> `_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`: ...
    def _replace(self: `_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`, **kwds) -> `_Tnamedtuple-MethodSpec-pyname-objcname-argspecs-returntype-is_inherited`: ...

class `namedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`(tuple):
    __slots__ = ["o2p_code", "objctype", "p2o_code", "pytype"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    o2p_code: Any
    objctype: Any
    p2o_code: Any
    pytype: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`], pytype, objctype, o2p_code, p2o_code) -> `_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`: ...
    def _replace(self: `_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`, **kwds) -> `_Tnamedtuple-TypeSpec-pytype-objctype-o2p_code-p2o_code`: ...

def copy_objp_unit(destfolder) -> None: ...
def get_objc_signature(methodspec) -> str: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def tmpl_replace(tmpl, **replacments) -> Any: ...
