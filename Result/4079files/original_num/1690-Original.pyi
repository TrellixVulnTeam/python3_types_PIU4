# (generated with --quick)

from typing import Any, Optional, Sequence, Tuple, TypeVar, Union
import urllib.parse

HttpMethod: Any
RestClientBase: Any
Session: Any
SessionAttachContext: Any
SessionInformation: Any
SessionLocation: Any
SessionStatus: Any
typing: module

AnyStr = TypeVar('AnyStr', str, bytes)

class NixsterClient(Any):
    class_id: str
    def execute(self, environment_id: str, container_id: str, command: str) -> str: ...
    def generate_attach_context(self, environment_id: str, container_id: str) -> Any: ...
    def generate_location(self, session, authorization_extra_parameters: Optional[dict] = ...) -> Any: ...
    def get_session_info(self, session) -> Any: ...
    def start_container(self, environment_id: str, session_parameters: Optional[dict] = ..., command: Optional[str] = ...) -> str: ...
    def start_session(self, environ: str, session_parameters: dict) -> Any: ...
    def stop_container(self, environment_id: str, container_id: str) -> None: ...

@overload
def quote(string: bytes, safe: Union[bytes, str] = ...) -> str: ...
@overload
def quote(string: str, safe: Union[bytes, str] = ..., encoding: str = ..., errors: str = ...) -> str: ...
def safe_int(v) -> Optional[int]: ...
@overload
def urlparse(url: str, scheme: Optional[str] = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResult: ...
@overload
def urlparse(url: Optional[bytes], scheme: Optional[bytes] = ..., allow_fragments: bool = ...) -> urllib.parse.ParseResultBytes: ...
def urlunparse(components: Union[Sequence[Optional[AnyStr]], Tuple[Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr], Optional[AnyStr]]]) -> AnyStr: ...
