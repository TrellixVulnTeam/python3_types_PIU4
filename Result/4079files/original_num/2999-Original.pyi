# (generated with --quick)

import decimal
from typing import Any, Dict, List, Tuple, Type

Adapter: Any
Decimal: Type[decimal.Decimal]
RebootMixin: Any
libcloud: Any
os: module
parse: module

class Gce(Any, Any):
    __doc__: str
    _disk_cost_per_gb: Dict[str, decimal.Decimal]
    _image_family: str
    _plans: List[Tuple[str, str]]
    _sizes: Dict[str, list]
    auth_credential_fields: List[List[str]]
    auth_instructions: str
    generic_credentials: Dict[str, str]
    id: str
    name: str
    server_external_iface: None
    server_internal_iface: str
    server_nick_name: str
    server_ssh_key_method: str
    server_ssh_user: str
    def __init__(self, **kwargs) -> None: ...
    def _find_server(self, driver, id) -> Any: ...
    def _find_usable_servers(self, driver) -> List[nothing]: ...
    def _get_cpu(self, location, plan, size) -> Any: ...
    def _get_create_args(self, data) -> Dict[str, Any]: ...
    def _get_disk(self, location, plan, size) -> int: ...
    def _get_hourly_price(self, location, plan, size) -> Any: ...
    def _get_location_id(self, location) -> Any: ...
    def _get_network(self, driver) -> Any: ...
    def _get_node_id(self, node) -> Any: ...
    def _get_plans(self, location) -> List[Tuple[str, str]]: ...
    def _get_request_credentials(self, headers) -> Dict[str, Any]: ...
    def _get_size_id(self, location, plan, size) -> Any: ...
    def _get_sizes(self, location, plan) -> list: ...
    def _get_user_driver(self, **auth_credentials) -> Any: ...
    def get_default_plan(self) -> str: ...
    def get_default_region(self) -> str: ...
    def get_default_size(self) -> str: ...
