# (generated with --quick)

import __future__
from typing import Any, List, NoReturn, Set, Tuple, TypeVar, Union

BAT_TEMPLATE: str
CODE_DIRECTORY: str
DATA_DIRECTORY: str
DOCS_DIRECTORY: str
PYTEST_FLAGS: List[str]
TESTS_DIRECTORY: str
TestCommand: Any
colorama: Any
find_packages: Any
imp: module
install_scripts: Any
log: module
metadata: module
os: module
print_function: __future__._Feature
python_version_specific_requires: List[str]
setup: Any
setup_dict: dict
subprocess: module
sys: module

AnyStr = TypeVar('AnyStr', str, bytes)

class TestAllCommand(Any):
    test_args: List[nothing]
    test_suite: bool
    def finalize_options(self) -> None: ...
    def run_tests(self) -> NoReturn: ...

class my_install_scripts(Any):
    def run(self) -> None: ...

def _lint() -> int: ...
def _test() -> Any: ...
def _test_all() -> Any: ...
def check_output(cmd_args, *args, **kwargs) -> bytes: ...
def get_git_project_files() -> List[bytes]: ...
def get_project_files() -> List[Union[bytes, str]]: ...
def git_ls_files(*cmd_args) -> Set[bytes]: ...
def is_git_project() -> bool: ...
def main() -> None: ...
@overload
def pjoin(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def pjoin(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def print_failure_message(message) -> None: ...
def print_success_message(message) -> None: ...
def psplit(path: Union[_PathLike[AnyStr], AnyStr]) -> Tuple[AnyStr, AnyStr]: ...
def read(filename) -> str: ...
def splitext(path: Union[_PathLike[AnyStr], AnyStr]) -> Tuple[AnyStr, AnyStr]: ...
