# (generated with --quick)

from typing import Any, Dict

Tok: Any
keywords: Dict[str, Any]

class Lexer:
    buffer: Any
    colno: int
    index: int
    lineno: int
    start: int
    def __init__(self) -> None: ...
    def char_matches(self, char: str) -> bool: ...
    def char_next(self) -> str: ...
    def feed(self, buf) -> None: ...
    def get_tok(self) -> Token: ...
    def identifier(self) -> Token: ...
    def is_at_end(self) -> bool: ...
    def lookahead(self) -> str: ...
    def number(self) -> Token: ...
    def skip_line(self) -> None: ...
    def skip_space(self) -> None: ...
    def string(self) -> Token: ...
    def tok(self, kind) -> Token: ...

class LexerError(Exception):
    lineno: Any
    msg: Any
    def __init__(self, msg, lineno) -> None: ...

class Token:
    colno: Any
    kind: Any
    length: Any
    lexeme: Any
    lineno: Any
    def __init__(self, lexeme, kind, length, lineno, colno) -> None: ...
    def __repr__(self, bare = ...) -> Any: ...

def is_alpha(char: str) -> bool: ...
def is_alpha_num(char: str) -> bool: ...
def is_numeric(char: str) -> bool: ...
