# (generated with --quick)

import enum
import hashlib
import http.server
from typing import Any, Iterable, Optional, Tuple, Type, Union

BaseHTTPRequestHandler: Type[http.server.BaseHTTPRequestHandler]
Enum: Type[enum.Enum]
GUID: str
struct: module

class Frame:
    CloseCode: type
    Opcode: type
    final: bool
    masked: bool
    opcode: Any
    payload: Any
    rsv1: Any
    rsv2: Any
    rsv3: Any
    def __bytes__(self) -> bytes: ...
    def __init__(self, final: bool, opcode, masked: bool, payload = ..., **kwargs) -> None: ...
    @classmethod
    def from_bytes(cls, b) -> Frame: ...
    @classmethod
    def from_header_bytes(cls, b) -> Frame: ...

class HTTPRequestHandler(http.server.BaseHTTPRequestHandler):
    BadRequest: type
    protocol_version: str
    websocket: WebSocket
    def do_GET(self) -> None: ...
    def listen(self) -> None: ...
    def onclose(self) -> None: ...
    def onmessage(self, data) -> None: ...
    def onopen(self) -> None: ...
    def opening_handshake(self) -> None: ...
    def send(self, data) -> None: ...

class WebSocket:
    is_closing: bool
    is_server: Any
    message_buffer: Any
    message_opcode: Any
    rfile: Any
    wfile: Any
    def __init__(self, rfile, wfile, is_server = ...) -> None: ...
    def close(self, code = ...) -> None: ...
    def detach(self) -> None: ...
    def fileno(self) -> Any: ...
    def ping(self) -> None: ...
    def pong(self) -> None: ...
    def recv(self) -> Any: ...
    def recv_frame(self) -> Frame: ...
    def send(self, data) -> None: ...
    def send_frame(self, frame: Frame) -> None: ...

def b64encode(s: bytes, altchars: bytes = ...) -> bytes: ...
def randrange(start: int, stop: Optional[int] = ..., step: int = ...) -> int: ...
def select(rlist: Iterable, wlist: Iterable, xlist: Iterable, timeout: Optional[float] = ...) -> Tuple[list, list, list]: ...
def sha1(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
