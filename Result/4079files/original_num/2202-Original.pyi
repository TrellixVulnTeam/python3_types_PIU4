# (generated with --quick)

from typing import Any, NoReturn, Optional, Tuple, TypeVar

SocketType = socket

AF_INET: Any
AF_UNIX: Any
CONNECT_ERR: Any
CONNECT_SUCCESS: Any
EBADF: int
EWOULDBLOCK: int
IOClosed: Any
O_NONBLOCK: Any
READ: Any
SOCKET_BLOCKING: Any
SOCKET_CLOSED: Any
SOCK_STREAM: Any
SOL_SOCKET: Any
SO_ERROR: Any
SocketIO: Any
WRITE: Any
_socket: Any
cancel_wait_ex: Any
errno: module
io: module
os: module
patcher: Any
s_dup: Any
s_error: Any
s_getaddrinfo: Any
s_getdefaulttimeout: Any
s_timeout: Any
socket_orig: Any
time: module
trampoline: Any

_Tsocket = TypeVar('_Tsocket', bound=socket)

class socket(Any):
    __slots__ = ["__weakref__", "_closed", "_io_refs", "timeout"]
    _closed: bool
    _io_refs: int
    closed: Any
    timeout: Any
    type: Any
    def __enter__(self: _Tsocket) -> _Tsocket: ...
    def __exit__(self, *args) -> None: ...
    def __getstate__(self) -> NoReturn: ...
    def __init__(self, family = ..., type = ..., proto = ..., fileno = ...) -> None: ...
    def __repr__(self) -> Any: ...
    def _decref_socketios(self) -> None: ...
    def _real_close(self, _ss = ...) -> None: ...
    def _socket_accept(self) -> Tuple[Any, Any]: ...
    def _socket_checkerr(self) -> None: ...
    def _socket_connect(self, address) -> Optional[bool]: ...
    def _trampoline(self, fd, evtype, timeout = ..., timeout_exc = ...) -> Any: ...
    def accept(self) -> Tuple[socket, Any]: ...
    def close(self) -> None: ...
    def connect(self, address) -> Any: ...
    def connect_ex(self, address) -> Any: ...
    def detach(self) -> Any: ...
    def dup(self: _Tsocket) -> _Tsocket: ...
    def gettimeout(self) -> Any: ...
    def makefile(self, mode = ..., buffering = ..., *, encoding = ..., errors = ..., newline = ...) -> Any: ...
    def recv(self, *args) -> Any: ...
    def recv_into(self, *args) -> Any: ...
    def recvfrom(self, *args) -> Any: ...
    def recvfrom_into(self, *args) -> Any: ...
    def send(self, data, flags = ...) -> Any: ...
    def sendall(self, data, flags = ...) -> None: ...
    def sendto(self, *args) -> Any: ...
    def setblocking(self, flag) -> None: ...
    def settimeout(self, t) -> None: ...

def fromfd(fd, family, type, proto = ...) -> socket: ...
def fromshare(info) -> socket: ...
def socketpair(family = ..., type = ..., proto = ...) -> Tuple[socket, socket]: ...
