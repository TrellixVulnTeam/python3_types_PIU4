# (generated with --quick)

from typing import Any, Dict, Tuple, Type, TypeVar, Union
import werkzeug.contrib.cache

MemcachedCache: Type[werkzeug.contrib.cache.MemcachedCache]
cache: CacheWrapper
configuration: Any
json: module
logger: Any
now: Any

_T0 = TypeVar('_T0')
_TCacheDict = TypeVar('_TCacheDict', bound=CacheDict)

class CacheDict(dict):
    __dict__: CacheDict
    __doc__: str
    def __init__(self, *args, **kwargs) -> None: ...
    def convert(self: _TCacheDict) -> _TCacheDict: ...

class CacheWrapper(werkzeug.contrib.cache.MemcachedCache):
    client: Any
    max_length: Any
    def __init__(self, server, max_item_size) -> None: ...
    def _normalize_timeout(self, timeout) -> Any: ...
    def delete(self, key) -> None: ...
    def get(self, key, convert = ...) -> Any: ...
    def set(self, key, value, **kwargs) -> bool: ...

class LocalCache:
    __doc__: str
    items: Dict[Any, Tuple[Any, Any]]
    def __init__(self) -> None: ...
    def get(self, key) -> None: ...
    def set(self, key, value, timeout = ...) -> None: ...

def cache_key(*args) -> str: ...
def make_attr_dict(value: _T0) -> Union[CacheDict, list, _T0]: ...
def time() -> float: ...
