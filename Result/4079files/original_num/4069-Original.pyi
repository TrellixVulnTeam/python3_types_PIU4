# (generated with --quick)

import io
from typing import Any, Optional, Type, TypeVar

Recognizer: Any
RuleContext: Any
StringIO: Type[io.StringIO]

_TSemanticContext = TypeVar('_TSemanticContext', bound=SemanticContext)

class AND(SemanticContext):
    opnds: list
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None: ...
    def eval(self, parser, outerContext) -> bool: ...
    def evalPrecedence(self, parser, outerContext) -> Any: ...

class OR(SemanticContext):
    opnds: list
    def __init__(self, a: SemanticContext, b: SemanticContext) -> None: ...
    def eval(self, parser, outerContext) -> bool: ...
    def evalPrecedence(self, parser, outerContext) -> Any: ...

class PrecedencePredicate(SemanticContext):
    precedence: int
    def __init__(self, precedence: int = ...) -> None: ...
    def eval(self, parser, outerContext) -> Any: ...
    def evalPrecedence(self, parser, outerContext) -> Optional[Predicate]: ...

class Predicate(SemanticContext):
    isCtxDependent: bool
    predIndex: int
    ruleIndex: int
    def __init__(self, ruleIndex: int = ..., predIndex: int = ..., isCtxDependent: bool = ...) -> None: ...
    def eval(self, parser, outerContext) -> Any: ...

class SemanticContext(object):
    NONE: Predicate
    def eval(self, parser, outerContext) -> None: ...
    def evalPrecedence(self: _TSemanticContext, parser, outerContext) -> _TSemanticContext: ...

def andContext(a: SemanticContext, b: SemanticContext) -> Any: ...
def filterPrecedencePredicates(collection: set) -> list: ...
def orContext(a: SemanticContext, b: SemanticContext) -> Any: ...
