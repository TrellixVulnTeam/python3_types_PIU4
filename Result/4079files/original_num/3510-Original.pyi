# (generated with --quick)

import collections
from typing import Any, Callable, Dict, Iterable, Sized, Tuple, Type, TypeVar, Union
import unittest.case

DATA: Dict[str, bytes]
GuardianASTServer: Any
conpot: Any
conpot_core: Any
gevent: Any
monkey: Any
os: module
re: module
socket: Any
unittest: module

_Tnamedtuple-FakeArgs- = TypeVar('_Tnamedtuple-FakeArgs-', bound=`namedtuple-FakeArgs-`)

class TestGuardianAST(unittest.case.TestCase):
    dir_name: Any
    guardian_ast_server: Any
    server_greenlet: Any
    def test_I20100(self) -> None: ...
    def test_I20200(self) -> None: ...
    def test_I20300(self) -> None: ...
    def test_I20400(self) -> None: ...
    def test_I20500(self) -> None: ...
    def test_S60200(self) -> None: ...
    def test_S60201(self) -> None: ...
    def test_S60202(self) -> None: ...
    def test_S60203(self) -> None: ...
    def test_S60204(self) -> None: ...
    def test_ast_error(self) -> None: ...

class `namedtuple-FakeArgs-`(tuple):
    __slots__ = []
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[nothing, ...]
    def __getnewargs__(self) -> Tuple[nothing, ...]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-FakeArgs-`]) -> `_Tnamedtuple-FakeArgs-`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-FakeArgs-`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-FakeArgs-`: ...
    def _replace(self: `_Tnamedtuple-FakeArgs-`, **kwds) -> `_Tnamedtuple-FakeArgs-`: ...

def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
