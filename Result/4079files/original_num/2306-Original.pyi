# (generated with --quick)

from typing import Any, Dict, Tuple, TypeVar

Logger: Any
Matrix: Any
MeshData: Any
Ray: Any
SceneNode: Any
Signal: Any
Vector: Any
enum: module
numpy: module

_TCamera = TypeVar('_TCamera', bound=Camera)

class Camera(Any):
    PerspectiveMode: type
    _auto_adjust_view_port_size: bool
    _cached_view_projection_matrix: Any
    _name: str
    _perspective: bool
    _projection_matrix: Any
    _viewport_height: int
    _viewport_width: int
    _window_height: int
    _window_width: int
    _zoom_factor: Any
    perspectiveChanged: Any
    def __deepcopy__(self: _TCamera, memo: Dict[int, object]) -> _TCamera: ...
    def __init__(self, name: str = ..., parent = ...) -> None: ...
    def _preferencesChanged(self, key) -> None: ...
    def _updatePerspectiveMatrix(self) -> None: ...
    def _updateWorldTransformation(self) -> None: ...
    def getAutoAdjustViewPort(self) -> bool: ...
    @staticmethod
    def getDefaultZoomFactor() -> float: ...
    def getProjectionMatrix(self) -> Any: ...
    def getRay(self, x: float, y: float) -> Any: ...
    def getViewProjectionMatrix(self) -> Any: ...
    def getViewportHeight(self) -> int: ...
    def getViewportWidth(self) -> int: ...
    def getWindowSize(self) -> Tuple[int, int]: ...
    def getZoomFactor(self) -> float: ...
    def isPerspective(self) -> bool: ...
    def project(self, position) -> Tuple[float, float]: ...
    def render(self, renderer) -> bool: ...
    def setAutoAdjustViewPort(self, auto_adjust: bool) -> None: ...
    def setMeshData(self, mesh_data) -> None: ...
    def setPerspective(self, perspective: bool) -> None: ...
    def setProjectionMatrix(self, matrix) -> None: ...
    def setViewportHeight(self, height: int) -> None: ...
    def setViewportSize(self, width: int, height: int) -> None: ...
    def setViewportWidth(self, width: int) -> None: ...
    def setWindowSize(self, width: int, height: int) -> None: ...
    def setZoomFactor(self, zoom_factor: float) -> None: ...
