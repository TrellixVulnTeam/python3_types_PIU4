# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, Sized, Tuple, Type, TypeVar, Union

StrongBlock = `namedtuple-StrongBlock-color-owner`

BlockAction: Any
DIRT_COLOR: Tuple[int, int, int]
SetColor: Any
make_color: Any
rgb_distance: Any

_Tnamedtuple-StrongBlock-color-owner = TypeVar('_Tnamedtuple-StrongBlock-color-owner', bound=`namedtuple-StrongBlock-color-owner`)

class `namedtuple-StrongBlock-color-owner`(tuple):
    __slots__ = ["color", "owner"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    color: Any
    owner: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-StrongBlock-color-owner`], color, owner) -> `_Tnamedtuple-StrongBlock-color-owner`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-StrongBlock-color-owner`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-StrongBlock-color-owner`: ...
    def _replace(self: `_Tnamedtuple-StrongBlock-color-owner`, **kwds) -> `_Tnamedtuple-StrongBlock-color-owner`: ...

def __getattr__(name) -> Any: ...
def apply_script(protocol, connection, config) -> Tuple[type, type]: ...
def bury_adjacent(protocol, x, y, z) -> None: ...
def check_if_buried(protocol, x, y, z) -> None: ...
def is_color_dirt(color) -> Any: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def rebuild_block(player, x, y, z, color) -> None: ...
