# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, Type, TypeVar

SumTimes: Any
defaultdict: Type[collections.defaultdict]
itertools: module
logging: module

_S = TypeVar('_S')
_T = TypeVar('_T')

class LazyEdgeValues(object):
    __doc__: str
    _compute: Callable[[Any], Any]
    _edge_values: collections.defaultdict
    _node_values: Any
    _semiring: Any
    def __getitem__(self, edge) -> Any: ...
    def __init__(self, semiring, node_values, edge_values = ..., omega = ..., normalise = ...) -> None: ...
    def _normalised(self, edge) -> Any: ...
    def _omega(self, _1) -> Any: ...
    def _unnormalised(self, edge) -> Any: ...

def _robust_value_recursion(forest, tsort, semiring, omega = ..., infinity = ...) -> collections.defaultdict: ...
def acyclic_value_recursion(forest, topsorted, semiring, omega = ..., infinity = ...) -> collections.defaultdict: ...
def approximate_supremum(forest, omega, I, bucket, semiring, infinity = ...) -> collections.defaultdict: ...
def compute_edge_values(forest, semiring, node_values, omega = ..., normalise = ...) -> collections.defaultdict: ...
def derivation_weight(derivation, semiring = ..., Z = ..., omega = ...) -> Any: ...
@overload
def reduce(function: Callable[[_T, _S], _T], sequence: Iterable[_S], initial: _T) -> _T: ...
@overload
def reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T: ...
def robust_value_recursion(forest, tsort, semiring, omega = ..., infinity = ...) -> collections.defaultdict: ...
