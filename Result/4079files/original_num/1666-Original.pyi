# (generated with --quick)

import requests.exceptions
import requests.models
import requests.structures
from typing import Any, Dict, List, Optional, Type, TypeVar
import unittest.case
import urllib.parse

ConnectionError: Type[requests.exceptions.ConnectionError]
HTTMock: Any
PreparedRequest: Type[requests.models.PreparedRequest]
SplitResult: Type[urllib.parse.SplitResult]
error_message: str
expected_response: List[Dict[str, str]]
gc: Any
httmock: Any
json: module
keyspace: str
mock_uri: str
query: str
unittest: module
urlmatch: Any

AnyStr = TypeVar('AnyStr', str, bytes)
_TMockEngine = TypeVar('_TMockEngine', bound=MockEngine)

class MockEngine:
    _httmock: Any
    body: Any
    headers: Optional[requests.structures.CaseInsensitiveDict[str]]
    params: Optional[Dict[str, List[str]]]
    def __enter__(self: _TMockEngine) -> _TMockEngine: ...
    def __exit__(self, *args, **kwargs) -> None: ...
    def __init__(self, status_code: int, response) -> None: ...

class TestExecute(unittest.case.TestCase):
    graph: Any
    def test_executing_a_query_sends_expected_accept_header(self) -> None: ...
    def test_executing_a_query_sends_infer_false_in_params(self) -> None: ...
    def test_executing_a_query_sends_keyspace_in_params(self) -> None: ...
    def test_executing_a_query_sends_materialise_in_params(self) -> None: ...
    def test_executing_a_query_sends_query_in_body(self) -> None: ...
    def test_executing_a_query_with_inference_sends_infer_true_in_params(self) -> None: ...
    def test_executing_a_query_without_a_server_throws_grakn_exception(self) -> None: ...
    def test_executing_a_valid_query_returns_expected_response(self) -> None: ...
    def test_executing_an_insert_query_returns_expected_response(self) -> None: ...
    def test_executing_an_invalid_query_throws_grakn_exception(self) -> None: ...

class TestGraphConstructor(unittest.case.TestCase):
    def test_open_accepts_keyword_arguments(self) -> None: ...
    def test_open_accepts_no_arguments(self) -> None: ...
    def test_open_accepts_two_arguments(self) -> None: ...

def engine_responding_bad_request() -> MockEngine: ...
def engine_responding_ok() -> MockEngine: ...
def parse_qs(qs: Optional[AnyStr], keep_blank_values: bool = ..., strict_parsing: bool = ..., encoding: str = ..., errors: str = ...) -> Dict[AnyStr, List[AnyStr]]: ...
