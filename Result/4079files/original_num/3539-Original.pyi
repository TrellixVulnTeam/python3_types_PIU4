# (generated with --quick)

from typing import Any, Callable, Coroutine, Mapping, Sequence, Tuple, TypeVar, Union
import uuid

re: module

AnyStr = TypeVar('AnyStr', str, bytes)

def test_exceed_cost_limit(cli, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_failed_render(cli, tmpdir, db_conn, worker) -> Coroutine[Any, Any, None]: ...
def test_invalid_number(cli, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_link_shortening(cli, tmpdir, db_conn, worker) -> Coroutine[Any, Any, None]: ...
def test_messagebird_no_hlr(cli, tmpdir, dummy_server, worker) -> Coroutine[Any, Any, None]: ...
def test_messagebird_no_network(cli, tmpdir, dummy_server, worker) -> Coroutine[Any, Any, None]: ...
def test_messagebird_webhook(cli, db_conn, dummy_server, worker) -> Coroutine[Any, Any, None]: ...
def test_repeat_uuid(cli, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_send_message(cli, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_send_message_usa(cli, settings, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_send_messagebird(cli, tmpdir, dummy_server, worker) -> Coroutine[Any, Any, None]: ...
def test_send_multi_part(cli, tmpdir, worker) -> Coroutine[Any, Any, None]: ...
def test_send_too_long(cli, tmpdir) -> Coroutine[Any, Any, None]: ...
def test_validate_number(cli, tmpdir) -> Coroutine[Any, Any, None]: ...
def urlencode(query: Union[Mapping, Sequence[Tuple[Any, Any]]], doseq: bool = ..., safe: AnyStr = ..., encoding: str = ..., errors: str = ..., quote_via: Callable[[str, AnyStr, str, str], str] = ...) -> str: ...
def uuid4() -> uuid.UUID: ...
