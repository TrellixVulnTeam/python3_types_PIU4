# (generated with --quick)

import collections
from typing import Any, Dict, List, Tuple, Type

ddict: Type[collections.defaultdict]
operator: module
sys: module

class TopicModelFastMerge(object):
    __doc__: str
    _num_topics: int
    _word_topic_file: Any
    def __init__(self, model_dir, conf_file) -> None: ...
    def config_parser(self, config) -> Dict[str, str]: ...
    def conv_topic_word(self) -> Tuple[list, List[int]]: ...
    def disjoint_set(self, overlap_pair) -> List[set]: ...
    def reduce_topic(self, topk, Jac_thresh, hashbits, output_file) -> None: ...
    def select_topk(self, topic_word, topic_sum, topk) -> list: ...
    def string_hash(self, word_str, hashbits) -> Any: ...
    def topic_cluster(self, tpc_simhash, hashbits) -> List[set]: ...
    def topic_simhash(self, topic_word, topic_sum, hashbits) -> collections.defaultdict[Any, int]: ...
    def word_id_hash(self, hashbits) -> collections.defaultdict[str, Any]: ...
