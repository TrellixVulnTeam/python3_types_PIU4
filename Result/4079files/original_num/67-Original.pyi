# (generated with --quick)

from typing import Any, Callable, Generator, IO, List, Mapping, Optional, Sequence, Tuple, TypeVar, Union

platform: str
re: module

AnyStr = TypeVar('AnyStr', str, bytes)

@overload
def NamedTemporaryFile(mode, buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO[str]: ...
@overload
def NamedTemporaryFile(mode = ..., buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO[bytes]: ...
@overload
def NamedTemporaryFile(mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO: ...
def basename(path: Union[_PathLike[AnyStr], AnyStr]) -> AnyStr: ...
def call(args: Union[bytes, str, Sequence[Union[_PathLike, bytes, str]]], bufsize: int = ..., executable: Union[_PathLike, bytes, str] = ..., stdin: Optional[Union[int, IO]] = ..., stdout: Optional[Union[int, IO]] = ..., stderr: Optional[Union[int, IO]] = ..., preexec_fn: Callable[[], Any] = ..., close_fds: bool = ..., shell: bool = ..., cwd: Optional[Union[_PathLike, bytes, str]] = ..., env: Optional[Mapping[Union[bytes, str], Union[bytes, str]]] = ..., universal_newlines: bool = ..., startupinfo = ..., creationflags: int = ..., restore_signals: bool = ..., start_new_session: bool = ..., pass_fds = ..., timeout: Optional[float] = ...) -> int: ...
def gen_image(dependencies, image) -> bool: ...
def glob(pathname: AnyStr, *, recursive: bool = ...) -> List[AnyStr]: ...
def isdir(path: Union[_PathLike, bytes, str]) -> bool: ...
def iter_dependencies(job_files, keep = ...) -> Generator[Tuple[Any, str], Any, None]: ...
@overload
def join(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def join(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def main(argv = ...) -> None: ...
def show_image(path) -> bool: ...
