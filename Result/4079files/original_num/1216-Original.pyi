# (generated with --quick)

import contextlib
import pathlib
import sqlite3.dbapi2
from typing import Any, Callable, Iterable, Iterator, MutableMapping, NoReturn, Optional, Type, TypeVar, Union

Lexeme: Any
Path: Type[pathlib.Path]
SCHEMA: str
SourceVector: Any
get_vectors_path: Any
os: module
query_table: Callable[..., contextlib._GeneratorContextManager]
sqlite3: module

_T = TypeVar('_T')

class Vectors(MutableMapping[str, Any]):
    __doc__: str
    conn: Any
    def __delitem__(self) -> NoReturn: ...
    def __getitem__(self, filehash: str) -> Any: ...
    def __init__(self, conn: Optional[sqlite3.dbapi2.Connection] = ...) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, filehash: str, vector) -> None: ...
    def _instantiate_schema(self) -> None: ...
    def _mmap(self) -> None: ...
    def disconnect(self) -> None: ...
    @classmethod
    def from_filename(cls, path: Union[_PathLike, str]) -> Vectors: ...
    def length_of_vectors(self, hashes: Iterable[str]) -> int: ...

def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
def determine_from_language() -> sqlite3.dbapi2.Connection: ...
