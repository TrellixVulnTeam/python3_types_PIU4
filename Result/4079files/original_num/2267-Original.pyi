# (generated with --quick)

from typing import Any, Dict, List, Optional, Tuple, TypeVar

Environment: Any
Expression: Any
GlobalState: Any
JumpType: Any
Node: Any
SymExecWrapper: Any
copy: module
helper: Any
log: logging.Logger
logging: module

_TTaintRecord = TypeVar('_TTaintRecord', bound=TaintRecord)

class TaintRecord:
    __doc__: str
    memory: Any
    stack: Any
    states: list
    storage: Any
    def __init__(self) -> None: ...
    def add_state(self, state) -> None: ...
    def clone(self: _TTaintRecord) -> _TTaintRecord: ...
    def memory_tainted(self, index: int) -> bool: ...
    def stack_tainted(self, index: int) -> Optional[bool]: ...
    def storage_tainted(self, index: int) -> bool: ...

class TaintResult:
    __doc__: str
    records: List[TaintRecord]
    def __init__(self) -> None: ...
    def _try_get_record(self, state) -> Optional[TaintRecord]: ...
    def add_records(self, records: List[TaintRecord]) -> None: ...
    def check(self, state, stack_index: int) -> Optional[bool]: ...

class TaintRunner:
    __doc__: str
    stack_taint_table: Dict[str, Tuple[int, int]]
    @staticmethod
    def children(node, statespace, environment, transaction_stack_length: int) -> list: ...
    @staticmethod
    def execute(statespace, node, state, initial_stack = ...) -> TaintResult: ...
    @staticmethod
    def execute_node(node, last_record: TaintRecord, state_index = ...) -> List[TaintRecord]: ...
    @staticmethod
    def execute_state(record: TaintRecord, state) -> TaintRecord: ...
    @staticmethod
    def mutate_call(record: TaintRecord, op: str) -> None: ...
    @staticmethod
    def mutate_dup(op: str, record: TaintRecord) -> None: ...
    @staticmethod
    def mutate_log(record: TaintRecord, op: str) -> None: ...
    @staticmethod
    def mutate_mload(record: TaintRecord, op0) -> None: ...
    @staticmethod
    def mutate_mstore(record: TaintRecord, op0) -> None: ...
    @staticmethod
    def mutate_push(op: str, record: TaintRecord) -> None: ...
    @staticmethod
    def mutate_sload(record: TaintRecord, op0) -> None: ...
    @staticmethod
    def mutate_sstore(record: TaintRecord, op0) -> None: ...
    @staticmethod
    def mutate_stack(record: TaintRecord, mutator: Tuple[int, int]) -> None: ...
    @staticmethod
    def mutate_swap(op: str, record: TaintRecord) -> None: ...
