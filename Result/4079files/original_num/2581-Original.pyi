# (generated with --quick)

from typing import Any, TypeVar

ITransform: Any
itertools: module
np: module
positive: Log1pe
settings: Any
tf: Any
vec_to_tri: Any

_T0 = TypeVar('_T0')

class Chain(Transform):
    __doc__: str
    t1: Any
    t2: Any
    def __init__(self, t1, t2) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class DiagMatrix(Transform):
    __doc__: str
    dim: Any
    def __init__(self, dim = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Exp(Transform):
    __doc__: str
    _lower: Any
    def __init__(self, lower = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Identity(Transform):
    __doc__: str
    def __str__(self) -> str: ...
    def backward(self, y: _T0) -> _T0: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x: _T0) -> _T0: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Log1pe(Transform):
    __doc__: str
    _lower: Any
    def __init__(self, lower = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Logistic(Transform):
    __doc__: str
    a: float
    b: float
    def __init__(self, a = ..., b = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class LowerTriangular(Transform):
    N: Any
    __doc__: str
    num_matrices: Any
    squeeze: Any
    def __init__(self, N, num_matrices = ..., squeeze = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Rescale(Transform):
    __doc__: str
    factor: float
    def __init__(self, factor = ...) -> None: ...
    def __str__(self) -> str: ...
    def backward(self, y) -> Any: ...
    def backward_tensor(self, y) -> Any: ...
    def forward(self, x) -> Any: ...
    def forward_tensor(self, x) -> Any: ...
    def log_jacobian_tensor(self, x) -> Any: ...

class Transform(Any):
    def __call__(self, other_transform) -> Chain: ...

def positiveRescale(scale) -> Chain: ...
