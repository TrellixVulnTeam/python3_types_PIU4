# (generated with --quick)

import avwx.structs
from typing import Any, Dict, Type

CLOUD_TRANSLATIONS: Any
Cloud: Type[avwx.structs.Cloud]
ICING_CONDITIONS: Any
MetarData: Type[avwx.structs.MetarData]
MetarTrans: Type[avwx.structs.MetarTrans]
Number: Type[avwx.structs.Number]
ReportData: Type[avwx.structs.ReportData]
TURBULANCE_CONDITIONS: Any
TafData: Type[avwx.structs.TafData]
TafLineTrans: Type[avwx.structs.TafLineTrans]
TafTrans: Type[avwx.structs.TafTrans]
Units: Type[avwx.structs.Units]
VIS_REPR: Dict[str, str]
WIND_DIR_REPR: Dict[str, str]
WX_TRANSLATIONS: Any
core: Any
remarks: module

def altimeter(alt: avwx.structs.Number, unit: str = ...) -> str: ...
def clouds(clds, unit: str = ...) -> str: ...
def get_cardinal_direction(direction: int) -> str: ...
def metar(wxdata: avwx.structs.MetarData, units: avwx.structs.Units) -> avwx.structs.MetarTrans: ...
def min_max_temp(temp: str, unit: str = ...) -> str: ...
def other_list(wxcodes) -> str: ...
def shared(wxdata: avwx.structs.ReportData, units: avwx.structs.Units) -> Dict[str, str]: ...
def taf(wxdata: avwx.structs.TafData, units: avwx.structs.Units) -> avwx.structs.TafTrans: ...
def temperature(temp: avwx.structs.Number, unit: str = ...) -> str: ...
def turb_ice(turbice, unit: str = ...) -> str: ...
def visibility(vis: avwx.structs.Number, unit: str = ...) -> str: ...
def wind(direction: avwx.structs.Number, speed: avwx.structs.Number, gust: avwx.structs.Number, vardir = ..., unit: str = ..., cardinals: bool = ..., spoken: bool = ...) -> str: ...
def wind_shear(shear: str, unit_alt: str = ..., unit_wind: str = ..., spoken: bool = ...) -> str: ...
def wxcode(code: str) -> str: ...
