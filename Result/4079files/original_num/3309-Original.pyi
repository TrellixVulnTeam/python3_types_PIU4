# (generated with --quick)

from typing import Any, Callable, Coroutine, TypeVar

ExponentialBackoff: Any
MAX_ASYNCIO_SECONDS: int
aiohttp: Any
asyncio: module
discord: Any
inspect: module
log: logging.Logger
logging: module
websockets: Any

_T0 = TypeVar('_T0')
_TLoop = TypeVar('_TLoop', bound=Loop)

class Loop:
    __doc__: str
    _after_loop: Any
    _before_loop: Any
    _current_loop: int
    _has_failed: bool
    _injected: Any
    _is_being_cancelled: bool
    _sleep: Any
    _stop_next_iteration: bool
    _task: Any
    _valid_exception: tuple
    coro: Any
    count: Any
    current_loop: Any
    hours: Any
    loop: Any
    minutes: Any
    reconnect: Any
    seconds: Any
    def __get__(self: _TLoop, obj, objtype) -> _TLoop: ...
    def __init__(self, coro, seconds, hours, minutes, count, reconnect, loop) -> None: ...
    def _call_loop_function(self, name) -> Coroutine[Any, Any, None]: ...
    def _can_be_cancelled(self) -> Any: ...
    def _loop(self, *args, **kwargs) -> Coroutine[Any, Any, None]: ...
    def add_exception_type(self, exc) -> None: ...
    def after_loop(self, coro: _T0) -> _T0: ...
    def before_loop(self, coro: _T0) -> _T0: ...
    def cancel(self) -> None: ...
    def change_interval(self, *, seconds = ..., minutes = ..., hours = ...) -> None: ...
    def clear_exception_types(self) -> None: ...
    def failed(self) -> bool: ...
    def get_task(self) -> Any: ...
    def is_being_cancelled(self) -> bool: ...
    def remove_exception_type(self, exc) -> bool: ...
    def restart(self, *args, **kwargs) -> None: ...
    def start(self, *args, **kwargs) -> Any: ...
    def stop(self) -> None: ...

def loop(*, seconds = ..., minutes = ..., hours = ..., count = ..., reconnect = ..., loop = ...) -> Callable[[Any], Any]: ...
