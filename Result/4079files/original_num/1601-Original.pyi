# (generated with --quick)

from typing import Any, Callable, Type, TypeVar
import unittest.case

END_TAG_PATTERN: Any
START_TAG_FINDITER: Any
TAG_FULLMATCH: Any
Tag: Any
TestCase: Type[unittest.case.TestCase]
parse: Any
regex_compile: Any

_FT = TypeVar('_FT', bound=Callable)

class TagTest(unittest.case.TestCase):
    __doc__: str
    def test_attr_deletion(self) -> None: ...
    def test_attrs(self) -> None: ...
    def test_content_cannot_contain_another_start(self) -> None: ...
    def test_contents(self) -> None: ...
    def test_contents_contains_tl(self) -> None: ...
    def test_end_tag_patterns(self) -> None: ...
    def test_get_attr_value(self) -> None: ...
    def test_has_attr(self) -> None: ...
    def test_name(self) -> None: ...
    def test_parsed_content_offset(self) -> None: ...
    def test_parsed_contents(self) -> None: ...
    def test_set_attr_value(self) -> None: ...
    def test_start_tag_patterns(self) -> None: ...

def expectedFailure(func: _FT) -> _FT: ...
def start_tag_finder(string) -> Any: ...
