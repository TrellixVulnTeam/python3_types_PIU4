# (generated with --quick)

from typing import Any, Callable, Dict, Generator, Iterator, List, Tuple, TypeVar

ASSERTIONS: Dict[str, Any]
ESCAPED_CHARS: Dict[str, Any]
LOOKAHEAD_ASSERTIONS: Dict[str, Any]
SHORTHANDS: Dict[str, Any]
SUB_PARSERS: Dict[Any, Callable[..., Iterator]]
SYMBOLS: dict
Symbols: Any
__all__: List[str]
nodes: Any

_T1 = TypeVar('_T1')

def _peek(iterator, eof: _T1 = ...) -> Generator[Tuple[Any, Any], Any, Any]: ...
def fill_groups(expression: list) -> Tuple[int, dict]: ...
def greediness(expression: Iterator) -> Iterator: ...
def join_atoms(expression: Iterator) -> Iterator: ...
def parse(expression: str) -> Iterator: ...
def parse_group_tag(expression: Iterator[Tuple[str, str]], *, next_char: str, **kwargs) -> Iterator: ...
def parse_repetition_range(expression: Iterator[Tuple[str, str]], **kwargs) -> Iterator: ...
def parse_set(expression: Iterator[Tuple[str, str]], **kwargs) -> Iterator: ...
