# (generated with --quick)

from typing import Any, Dict, List, Optional, Set

create_uid: Any
get_binary_from_file: Any
get_sha256: Any
get_value_of_first_key: Any
logging: module
make_bytes: Any
make_unicode_string: Any
os: module

class FileObject:
    __doc__: str
    analysis_tags: Dict[nothing, nothing]
    binary: Any
    comments: List[nothing]
    depth: int
    file_name: Any
    file_path: Any
    files_included: set
    list_of_all_included_files: None
    parent_firmware_uids: Set[nothing]
    parents: List[nothing]
    processed_analysis: Dict[nothing, nothing]
    root_uid: Any
    scheduled_analysis: Any
    sha256: Any
    size: Optional[int]
    temporary_data: Dict[nothing, nothing]
    uid: Any
    virtual_file_path: Dict[Any, List[str]]
    def __init__(self, binary = ..., file_name = ..., file_path = ..., scheduled_analysis = ...) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def add_included_file(self, file_object) -> None: ...
    def add_virtual_file_path_if_none_exists(self, parent_pathes, parent_uid) -> None: ...
    def create_from_file(self, file_path) -> None: ...
    @staticmethod
    def get_base_of_virtual_path(virtual_path) -> str: ...
    def get_hid(self, root_uid = ...) -> Any: ...
    def get_included_files_uids(self) -> set: ...
    @staticmethod
    def get_root_of_virtual_path(virtual_path) -> Any: ...
    def get_root_uid(self) -> Any: ...
    @staticmethod
    def get_top_of_virtual_path(virtual_path) -> Any: ...
    def get_uid(self) -> Any: ...
    def get_virtual_file_paths(self) -> Dict[Any, List[str]]: ...
    def get_virtual_paths_for_one_uid(self, root_uid = ...) -> Any: ...
    def overwrite_uid(self, new_uid) -> None: ...
    def set_binary(self, binary) -> None: ...
    def set_file_path(self, file_path) -> None: ...
    def set_name(self, name) -> None: ...
