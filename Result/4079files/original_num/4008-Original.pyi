# (generated with --quick)

import numpy
from typing import Any, Container, Dict, Optional, Tuple, TypeVar, Union

BinningBase: Any
Histogram1D: Any
h1: Any
np: module
sys: module

_THistogramCollection = TypeVar('_THistogramCollection', bound=HistogramCollection)

class HistogramCollection(Container):
    __doc__: str
    _binning: Any
    axis_name: Optional[str]
    axis_names: Tuple[str]
    binning: Any
    bins: numpy.ndarray
    histograms: list
    name: Any
    ndim: int
    plot: Any
    title: Any
    def __contains__(self, item) -> bool: ...
    def __getitem__(self, item) -> Any: ...
    def __init__(self, *histograms, binning = ..., title: Optional[str] = ..., name: Optional[str] = ...) -> None: ...
    def __iter__(self) -> listiterator: ...
    def __len__(self) -> int: ...
    def add(self, histogram) -> None: ...
    def copy(self: _THistogramCollection) -> _THistogramCollection: ...
    def create(self, name: str, values, *, weights = ..., dropna: bool = ..., **kwargs) -> Any: ...
    @classmethod
    def from_dict(cls, a_dict: dict) -> HistogramCollection: ...
    @classmethod
    def multi_h1(cls, a_dict: Dict[str, Any], bins = ..., **kwargs) -> HistogramCollection: ...
    def normalize_bins(self: _THistogramCollection, inplace: bool = ...) -> _THistogramCollection: ...
    def sum(self) -> Any: ...
    def to_dict(self) -> Dict[str, Union[list, str]]: ...
    def to_json(self, path: Optional[str] = ..., **kwargs) -> str: ...
