# (generated with --quick)

from typing import Any, Dict, List, Mapping, Optional, Set, Tuple

argparse: module
collections: module
datetime: module
exifread: Any
hash_cache: HashCache
hashlib: module
logger: logging.Logger
logging: module
os: module
queue: module
re: module
shutil: module
sys: module
threading: module
time: module
watchdog: Any

class BadExifTimestampError(Exception): ...

class EventHandler(Any):
    shared_queue: queue.Queue
    target_folder: str
    def __init__(self, shared_queue: queue.Queue, target_folder: str) -> None: ...
    def on_created(self, event) -> None: ...
    def on_modified(self, event) -> None: ...
    def on_moved(self, event) -> None: ...

class HashCache:
    __doc__: str
    hashes: Mapping[str, Tuple[Set[str], Dict[str, str]]]
    def __init__(self) -> None: ...
    def _add_file(self, path: str) -> None: ...
    @staticmethod
    def _files_in_folder(folder_path: str) -> List[str]: ...
    @staticmethod
    def _hash(path: str) -> str: ...
    @staticmethod
    def _target_folder(path: str) -> str: ...
    def has_file(self, target_folder: str, path: str) -> bool: ...

class MissingExifTimestampError(Exception): ...

class MoveFileThread(threading.Thread):
    dest_folder: str
    is_running: bool
    shared_queue: queue.Queue
    def __init__(self, shared_queue: queue.Queue, dest_folder: str) -> None: ...
    def stop(self) -> None: ...

def basename_from_datetime(dt: datetime.datetime) -> str: ...
def creation_date(path: str) -> datetime.datetime: ...
def dest_path(root_folder: str, path: str) -> str: ...
def exif_creation_date(path: str) -> Optional[datetime.datetime]: ...
def exif_creation_timestamp(path: str) -> str: ...
def exif_timestamp_to_datetime(ts: str) -> datetime.datetime: ...
def file_creation_date(path: str) -> datetime.datetime: ...
def filename_from_datetime(dt: datetime.datetime, path: str) -> str: ...
def folder_from_datetime(dt: datetime.datetime) -> str: ...
def is_valid_filename(path: str) -> bool: ...
def main(argv: List[str]) -> int: ...
def move_file(root_folder: str, path: str) -> None: ...
def parse_args(argv: List[str]) -> argparse.Namespace: ...
def path_from_datetime(root_folder: str, dt: datetime.datetime, path: str) -> str: ...
def resolve_duplicate(path: str) -> str: ...
def run(src_folder: str, dest_folder: str) -> Any: ...
