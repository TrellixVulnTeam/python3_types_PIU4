# (generated with --quick)

import abc
from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Type, TypeVar

ABCMeta: Type[abc.ABCMeta]
COMPONENT_REGISTRY: Dict[int, Component]
JSON: Any
LightQueue: Any
SEPARATOR: str
SerializationError: Any
date: Type[datetime.date]
datetime: Type[datetime.datetime]
emit: Any
eventlet: Any
flask: module
json: module
msgpack: Any
string: module
time: Type[datetime.time]

_FuncT = TypeVar('_FuncT', bound=Callable)

class Component(metaclass=_Maker):
    _ATTRS: Any
    _COMPONENT: Any
    _NEXT_UUID: int
    _PACKAGE: Any
    _TEMPLATE: Any
    __doc__: str
    _comp: None
    _instantiate: Any
    _tag: str
    _tagbase: str
    _uuid: int
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self) -> None: ...
    @staticmethod
    def _insert(wrap: str, tag: Optional[str]) -> str: ...
    @classmethod
    def _next_uuid(cls) -> int: ...

class Event:
    __doc__: str
    _key: Tuple[str, int, Optional[str]]
    getter: Optional[str]
    name: str
    signal: str
    uuid: int
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __init__(self, name: str, uuid: int, getter: Optional[str] = ...) -> None: ...
    def __repr__(self) -> str: ...

class FormatDict(dict):
    __doc__: str
    def __missing__(self, key: str) -> str: ...

class _Maker(abc.ABCMeta):
    def __new__(cls, name, bases, namespace) -> Any: ...

def abstractmethod(callable: _FuncT) -> _FuncT: ...
def encoders(obj) -> Any: ...
def is_command(attribute: str) -> bool: ...
def is_event(attribute: str) -> bool: ...
def is_getter(attribute: str) -> bool: ...
def jdumps(data) -> str: ...
def jsbool(x: bool) -> str: ...
def jsnull(x) -> Any: ...
def json_conversion(obj) -> Any: ...
def make_command(command: Callable) -> Callable: ...
def make_event(event: Callable) -> Callable: ...
def make_getter(getter: Callable) -> Callable: ...
def pack(x) -> bytes: ...
def unpack(x: bytes) -> Any: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
