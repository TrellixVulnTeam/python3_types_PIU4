# (generated with --quick)

import hashlib
from typing import Any, Optional, TypeVar, Union
import urllib.parse

UA: str
cache_dir: str
difflib: module
json: module
os: module
re: module
subprocess: module
sys: module

_T0 = TypeVar('_T0')

def compare_bodies(body1, body2, url1, url2) -> None: ...
def compare_unprocessed_bodies(up_body1, up_body2, url1, url2) -> None: ...
def get_body(url) -> bytes: ...
def get_cache_filename(url) -> str: ...
def kill_path(path, body) -> Any: ...
def lower_escapes(url: _T0) -> Union[bytes, _T0]: ...
def main() -> None: ...
def md5(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
def md5_url(url) -> str: ...
def process_body(body, url) -> bytes: ...
@overload
def quote(string: bytes, safe: Union[bytes, str] = ...) -> str: ...
@overload
def quote(string: str, safe: Union[bytes, str] = ..., encoding: str = ..., errors: str = ...) -> str: ...
@overload
def quote_plus(string: bytes, safe: Union[bytes, str] = ...) -> str: ...
@overload
def quote_plus(string: str, safe: Union[bytes, str] = ..., encoding: str = ..., errors: str = ...) -> str: ...
def unquote(string: str, encoding: str = ..., errors: str = ...) -> str: ...
@overload
def urlsplit(url: str, scheme: Optional[str] = ..., allow_fragments: bool = ...) -> urllib.parse.SplitResult: ...
@overload
def urlsplit(url: Optional[bytes], scheme: Optional[bytes] = ..., allow_fragments: bool = ...) -> urllib.parse.SplitResultBytes: ...
