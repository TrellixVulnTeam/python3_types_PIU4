# (generated with --quick)

import collections
from typing import Any, Dict, Iterator, List, Optional, Tuple, Type, TypeVar

curses: module
defaultdict: Type[collections.defaultdict]
itertools: module
random: module
sys: module
time: module

_T = TypeVar('_T')

class Tetris(Any):
    COLS: int
    ROWS: int
    board: Any
    col: int
    current: Any
    drop: Any
    move_down: Any
    move_left: Any
    move_right: Any
    rotate_left: Any
    rotate_right: Any
    row: int
    tetrominoes: Dict[str, Tetromino]
    tick: Any
    def __init__(self) -> None: ...
    def all_final_positions(self) -> Dict[str, Any]: ...
    def check_collision(self, dr = ..., dc = ...) -> None: ...
    def clear_full_rows(self) -> None: ...
    def clear_row(self, row) -> None: ...
    def copy(self) -> Any: ...
    def copy_current_to_board(self) -> None: ...
    def down(self) -> None: ...
    def final_positions(self) -> List[Tuple[Any, int]]: ...
    def generate_new_tetromino(self) -> None: ...
    def idx(self) -> Iterator[Tuple[int, int]]: ...
    def is_collision(self, dr = ..., dc = ...) -> bool: ...
    def is_row_full(self, row) -> bool: ...
    def print(self) -> None: ...
    def subidx(self) -> Iterator[Tuple[int, int]]: ...
    def transform(self, t) -> None: ...

class Tetromino(Any):
    data: Any
    def __init__(self, name, data) -> None: ...

def __getattr__(name) -> Any: ...
def curses_tetris(scr) -> None: ...
def deepcopy(x: _T, memo: Optional[Dict[int, _T]] = ..., _nil = ...) -> _T: ...
