# (generated with --quick)

import abc
from typing import Any, Callable, Type, TypeVar

ABC: Type[abc.ABC]

_FuncT = TypeVar('_FuncT', bound=Callable)
_TAbsData = TypeVar('_TAbsData', bound=AbsData)

class AbsData(abc.ABC):
    data: NotImplementedType
    driver: None
    dtypes: Any
    groups: Any
    shape: Any
    def __enter__(self: _TAbsData) -> _TAbsData: ...
    def __exit__(self, exc_type, value, traceback) -> None: ...
    @abstractmethod
    def __getitem__(self, key) -> Any: ...
    @abstractmethod
    def __iter__(self) -> Any: ...
    @abstractmethod
    def __next__(self) -> Any: ...
    @abstractmethod
    def batchs_writer(self, data) -> Any: ...
    @abstractmethod
    def close(self) -> Any: ...
    @abstractmethod
    def destroy(self) -> Any: ...
    @abstractmethod
    def open(self) -> Any: ...
    @abstractmethod
    def to_ndarray(self) -> Any: ...
    @abstractmethod
    def url(self) -> Any: ...

def abstractmethod(callable: _FuncT) -> _FuncT: ...
