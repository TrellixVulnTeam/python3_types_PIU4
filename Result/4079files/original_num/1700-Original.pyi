# (generated with --quick)

import collections
from typing import Any, Dict, Iterator, List, Optional, Type

OrderedDict: Type[collections.OrderedDict]
csv: module
json: module
ndarray: Type[numpy.ndarray]
numpy: module
os: module
re: module
time: module
tqdm: Any

def apply_list_replace(input_str: str, replacements: Dict[str, str]) -> str: ...
def count_line(encoding, path) -> int: ...
def get_file_iterator(path: str, *args, **kwargs) -> Iterator[str]: ...
def get_replacement_dict(path: Optional[str], no_replace: bool) -> Dict[str, str]: ...
def load_dictionary(path: str, encoding) -> Dict[str, numpy.ndarray]: ...
def process_file(path_to_file: str, path_to_dict: str, path_output_file: str, separator: str, file_encoding: str, dict_encoding: str, no_replace: bool, path_to_cleaning: Optional[str]) -> None: ...
def split_sequence(sequence: str, separator: str, *args, **kwargs) -> List[str]: ...
def transcode_str_line(sequence: str, separator: str, transcode_dict: Dict[str, numpy.ndarray], replacements: Dict[str, str]) -> numpy.ndarray: ...
def transcode_token(token: str, transcode_dict: Dict[str, numpy.ndarray]) -> numpy.ndarray: ...
