# (generated with --quick)

from typing import Any, Dict, List, Optional, Tuple, Union

ca_path: Any
os: module
pem: Any
print_error: Any
re: module
requests: module
socket: module
ssl: module
sys: module
threading: module
time: module
traceback: module
util: Any
x509: Any

class Interface(Any):
    __doc__: str
    closed_remotely: bool
    debug: bool
    host: Any
    last_ping: Union[float, int]
    last_request: float
    pipe: Any
    request_time: float
    server: Any
    socket: Any
    unanswered_requests: Dict[Any, tuple]
    unsent_requests: List[tuple]
    def __init__(self, server, socket) -> None: ...
    def close(self) -> None: ...
    def diagnostic_name(self) -> Any: ...
    def fileno(self) -> Any: ...
    def get_responses(self) -> List[Tuple[None, Any]]: ...
    def has_timed_out(self) -> bool: ...
    def num_requests(self) -> int: ...
    def ping_required(self) -> bool: ...
    def queue_request(self, *args) -> None: ...
    def send_requests(self) -> bool: ...

class TcpConnection(threading.Thread, Any):
    config_path: Any
    daemon: bool
    host: str
    port: int
    protocol: Any
    queue: Any
    server: Any
    use_ssl: Any
    def __init__(self, server, queue, config_path) -> None: ...
    def check_host_name(self, peercert, name) -> Any: ...
    def diagnostic_name(self) -> str: ...
    def get_simple_socket(self) -> Optional[socket.socket]: ...
    def get_socket(self) -> Optional[socket.socket]: ...
    @staticmethod
    def get_ssl_context(cert_reqs, ca_certs) -> ssl.SSLContext: ...

def Connection(server, queue, config_path) -> TcpConnection: ...
def _match_hostname(name, val) -> Any: ...
def check_cert(host, cert) -> None: ...
def test_certificates() -> None: ...
