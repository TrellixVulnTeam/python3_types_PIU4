import collections.abc
import enum
from .client import Client
from .multilingual import MultilingualText
from typing import Any, Iterator, Mapping, Sequence, Tuple, Union

EntityId: Any

class multilingual_attribute:
    attribute: Any = ...
    def __init__(self, attribute: str) -> None: ...
    def __get__(self, obj: Entity, cls: Any=...) -> Union[MultilingualText, type]: ...

class EntityType(enum.Enum):
    item: str = ...
    property: str = ...

class Entity(collections.abc.Mapping, collections.abc.Hashable):
    label: Any = ...
    description: Any = ...
    id: Any = ...
    client: Any = ...
    data: Any = ...
    def __init__(self, id: EntityId, client: Client) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Entity]: ...
    def __getitem__(self, key: Entity) -> object: ...
    def getlist(self, key: Entity) -> Sequence[object]: ...
    def iterlists(self) -> Iterator[Tuple[Entity, Sequence[object]]]: ...
    def lists(self) -> Sequence[Tuple[Entity, Sequence[object]]]: ...
    def iterlistvalues(self) -> Iterator[Sequence[object]]: ...
    def listvalues(self) -> Sequence[Sequence[object]]: ...
    @property
    def type(self) -> EntityType: ...
    @property
    def attributes(self) -> Mapping[str, object]: ...
    def load(self) -> None: ...
    def __repr__(self) -> str: ...
