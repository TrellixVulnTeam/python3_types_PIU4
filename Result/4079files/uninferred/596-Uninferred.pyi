import numpy
from catsim.simulation import Estimator
from typing import Any

class HillClimbingEstimator(Estimator):
    def __str__(self): ...
    _precision: Any = ...
    _verbose: Any = ...
    _evaluations: int = ...
    _calls: int = ...
    _dodd: Any = ...
    def __init__(self, precision: int=..., dodd: bool=..., verbose: bool=...) -> None: ...
    @property
    def calls(self) -> float: ...
    @property
    def evaluations(self) -> float: ...
    @property
    def avg_evaluations(self) -> float: ...
    @property
    def dodd(self) -> bool: ...
    def estimate(self, index: int=..., items: numpy.ndarray=..., administered_items: list=..., response_vector: list=..., est_theta: float=..., **kwargs: Any) -> float: ...
    def _getout(self, theta: float) -> float: ...

class DifferentialEvolutionEstimator(Estimator):
    def __str__(self): ...
    _lower_bound: Any = ...
    _upper_bound: Any = ...
    _evaluations: int = ...
    _calls: int = ...
    def __init__(self, bounds: tuple) -> None: ...
    @property
    def calls(self): ...
    @property
    def evaluations(self): ...
    @property
    def avg_evaluations(self): ...
    def estimate(self, index: int=..., items: numpy.ndarray=..., administered_items: list=..., response_vector: list=..., **kwargs: Any) -> float: ...
