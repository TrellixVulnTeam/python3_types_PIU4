from collections import namedtuple
from grice.complex_filter import ComplexFilter as ComplexFilter
from sqlalchemy import Column, Table as Table
from sqlalchemy.sql import Select as Select
from sqlalchemy.sql.expression import BinaryExpression
from sqlalchemy.sql.functions import Function
from typing import Any, Union

log: Any
DEFAULT_PAGE: int
DEFAULT_PER_PAGE: int
SORT_DIRECTIONS: Any
SUPPORTED_FUNCS: Any

ColumnSort = namedtuple('ColumnSort', ['table_name', 'column_name', 'direction'])

ColumnPair = namedtuple('ColumnPair', ['from_column', 'to_column'])

TableJoin = namedtuple('TableJoin', ['table_name', 'column_pairs', 'outer_join'])

QueryArguments = namedtuple('QueryArguments', ['column_names', 'page', 'per_page', 'filters', 'sorts', 'join', 'group_by', 'format_as_list'])

def init_database(db_config: Any): ...
def computed_column_to_dict(column: Union[Function, BinaryExpression]) -> Any: ...
def _column_to_dict(column: Column) -> Any: ...
def column_to_dict(column: Any): ...
def table_to_dict(table: Table) -> Any: ...
def names_to_columns(column_names: Any, table: Table, join_table: Table) -> Any: ...
def apply_column_filters(query: Any, table: Table, join_table: Table, filters: ComplexFilter) -> Any: ...
def apply_column_sorts(query: Any, table: Table, join_table: Table, sorts: dict) -> Any: ...
def apply_group_by(query: Any, table: Table, join_table: Table, group_by: list) -> Any: ...
def apply_join(query: Select, table: Table, join_table: Table, join: TableJoin) -> Any: ...

class DBService:
    meta: Any = ...
    db: Any = ...
    def __init__(self, db_config: Any) -> None: ...
    inspector: Any = ...
    def _reflect_database(self) -> None: ...
    def get_tables(self): ...
    def get_table(self, table_name: Any): ...
    def query_table(self, table_name: str, quargs: QueryArguments) -> Any: ...
