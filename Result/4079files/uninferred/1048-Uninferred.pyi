from typing import Any

xfail_if_no_window_functions: Any

class Avg:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...

class AvgPython:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...

class WinAvg:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...
    def value(self): ...
    def inverse(self, value: Any) -> None: ...

class WinAvgPython:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...
    def value(self): ...
    def inverse(self, value: Any) -> None: ...

class AvgWithNulls:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...

def con(): ...
def test_aggregate(con: Any) -> None: ...
def test_aggregate_with_empty(con: Any) -> None: ...
def test_aggregate_window_numba(con: Any, func: Any) -> None: ...
def large_con() -> None: ...
def run_agg_group_by_numba(con: Any): ...
def run_agg_group_by_builtin(con: Any): ...
def run_agg_group_by_python(con: Any): ...
def test_aggregate_group_by_bench_numba(large_con: Any, benchmark: Any) -> None: ...
def test_aggregate_group_by_bench_builtin(large_con: Any, benchmark: Any) -> None: ...
def test_aggregate_group_by_bench_python(large_con: Any, benchmark: Any) -> None: ...
def run_agg_numba(con: Any): ...
def run_agg_builtin(con: Any): ...
def run_agg_python(con: Any): ...
def test_aggregate_bench_numba(large_con: Any, benchmark: Any) -> None: ...
def test_aggregate_bench_builtin(large_con: Any, benchmark: Any) -> None: ...
def test_aggregate_bench_python(large_con: Any, benchmark: Any) -> None: ...
def run_agg_partition_by_numba(con: Any): ...
def run_agg_partition_by_builtin(con: Any): ...
def run_agg_partition_by_python(con: Any): ...
def test_window_bench_numba(large_con: Any, benchmark: Any) -> None: ...
def test_window_bench_builtin(large_con: Any, benchmark: Any) -> None: ...
def test_window_bench_python(large_con: Any, benchmark: Any) -> None: ...

class Var:
    mean: float = ...
    sum_of_squares_of_differences: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...

class Cov:
    mean1: float = ...
    mean2: float = ...
    mean12: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, x: Any, y: Any) -> None: ...
    def finalize(self): ...

class Sum:
    total: float = ...
    count: int = ...
    def __init__(self) -> None: ...
    def step(self, value: Any) -> None: ...
    def finalize(self): ...
