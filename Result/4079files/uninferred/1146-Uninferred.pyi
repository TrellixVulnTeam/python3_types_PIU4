from typing import Any, Optional

VERSION_FORMAT: str

class IdProvider:
    _cib: Any = ...
    _booked_ids: Any = ...
    def __init__(self, cib_element: Any) -> None: ...
    def allocate_id(self, proposed_id: Any): ...
    def book_ids(self, *id_list: Any): ...

class ElementSearcher:
    _executed: bool = ...
    _element: Any = ...
    _element_id: Any = ...
    _context_element: Any = ...
    _tag_list: Any = ...
    _expected_types: Any = ...
    _book_errors: Any = ...
    def __init__(self, tags: Any, element_id: Any, context_element: Any, element_type_desc: Optional[Any] = ...) -> None: ...
    def _prepare_expected_types(self, element_type_desc: Any): ...
    def element_found(self): ...
    def get_element(self): ...
    def validate_book_id(self, id_provider: Any, id_description: str = ...): ...
    def get_errors(self): ...
    def _execute(self) -> None: ...

def does_id_exist(tree: Any, check_id: Any): ...
def validate_id_does_not_exist(tree: Any, _id: Any) -> None: ...
def find_unique_id(tree: Any, check_id: Any, reserved_ids: Optional[Any] = ...): ...
def find_element_by_tag_and_id(tag: Any, context_element: Any, element_id: Any, none_if_id_unused: bool = ..., id_types: Optional[Any] = ...): ...
def create_subelement_id(context_element: Any, suffix: Any, id_provider: Any): ...
def check_new_id_applicable(tree: Any, description: Any, _id: Any) -> None: ...
def get_configuration(tree: Any): ...
def get_acls(tree: Any): ...
def get_alerts(tree: Any): ...
def get_constraints(tree: Any): ...
def get_fencing_topology(tree: Any): ...
def get_nodes(tree: Any): ...
def get_resources(tree: Any): ...
def get_status(tree: Any): ...
def _get_cib_version(cib: Any, attribute: Any, regexp: Any, none_if_missing: bool = ...): ...
def get_pacemaker_version_by_which_cib_was_validated(cib: Any): ...
def get_cib_crm_feature_set(cib: Any, none_if_missing: bool = ...): ...
