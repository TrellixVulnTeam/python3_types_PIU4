import typing
from discord.ext.commands import Context as Context
from typing import Any, Optional

class Paginator:
    pages: Any = ...
    predicate: Any = ...
    timeout: Any = ...
    target: Any = ...
    delete_msg: Any = ...
    delete_msg_timeout: Any = ...
    _stopped: Any = ...
    _embed: Any = ...
    _message: Any = ...
    _client: Any = ...
    footer: str = ...
    navigation: Any = ...
    _page: Any = ...
    def __init__(self, ctx: Context, pages: typing.Iterable, *, timeout: Any=..., delete_message: Any=..., predicate: Any=..., delete_message_on_timeout: Any=...): ...
    async def begin(self) -> None: ...
    async def stop(self, *, delete: Optional[Any] = ...) -> None: ...
    async def _clear_reactions(self) -> None: ...
    async def format_page(self) -> None: ...
    async def first_page(self) -> None: ...
    async def next_page(self) -> None: ...
    async def previous_page(self) -> None: ...
    async def last_page(self) -> None: ...

class ListPaginator(Paginator):
    def __init__(self, ctx: Any, _list: list, per_page: Any=..., **kwargs: Any) -> None: ...
