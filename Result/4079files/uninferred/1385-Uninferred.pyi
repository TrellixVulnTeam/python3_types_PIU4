import numpy as np
from enum import Enum
from numbers import Number
from typing import Any, Iterable, Iterator, List, NamedTuple, Sequence

ex_ffprobe: str
ex_ffmpeg: str
known_audio_extensions: Any

class FileKind(Enum):
    CUE: Any = ...
    FOLDER: Any = ...
    AUDIO: Any = ...

class CueCmd(Enum):
    PERFORMER: Any = ...
    TITLE: Any = ...
    FILE: Any = ...
    TRACK: Any = ...
    INDEX: Any = ...
    EOF: Any = ...

def get_file_kind(in_path: str) -> FileKind: ...

class TrackInfo(NamedTuple):
    global_index: int
    name: str
    offset_samples: int

class AudioFileParams(NamedTuple):
    channel_count: int
    sample_rate: int
    title: str
    artist: str
    album: str

class AudioSourceInfo(NamedTuple):
    path: str
    name: str
    performers: Sequence[str]
    album: str
    channel_count: int
    sample_rate: int
    tracks: List[TrackInfo]

class AudioSource(NamedTuple):
    source_info: AudioSourceInfo
    samples_per_block: int
    blocks_generator: Iterator[Iterator[np.ndarray]]

_whitespace_pattern: Any

def _unquote(s: str) -> Any: ...
def parse_cd_time(offset: str) -> Number: ...
def _parse_cue_cmd(line: str) -> Any: ...
def parse_cue(in_path: Any) -> None: ...
def _translate_from_cue(directory_path: Any, cue_items: Any) -> Iterable[AudioSourceInfo]: ...
def _audio_source_from_file(in_path: Any, track_index: Any=...) -> AudioSourceInfo: ...
def _audio_sources_from_folder(in_path: Any) -> Iterable[AudioSourceInfo]: ...
def read_audio_info(in_path: str) -> Iterable[AudioSourceInfo]: ...
def _get_audio_properties(in_path: Any) -> AudioFileParams: ...
def read_audio_data(what: AudioSourceInfo, samples_per_block: int) -> AudioSource: ...
def _test_ffmpeg() -> None: ...
def _parse_audio_params(s: Any) -> AudioFileParams: ...
def _get_params(in_path: Any) -> AudioFileParams: ...
def _read_audio_blocks(in_path: Any, channel_count: Any, samples_per_block: Any, tracks: List[TrackInfo]) -> Iterator[Iterator[np.ndarray]]: ...
