from app import UpdaterEvents
from kivy.app import App
from kivy.uix.label import Label as Label
from kivy.uix.popup import Popup as Popup
from kivy.uix.widget import Widget
from typing import Any
from updater import FlashState

def kivy_event_thread_dispatch(proxy: Any, target: Any, name: Any, f: Any): ...
def post_to_event_thread(target: Any): ...
def large(s: Any): ...

class ConnectedDevice(Widget):
    text: Any = ...
    go: Any = ...
    bar: Any = ...
    upgrade_available: Any = ...
    go_text: Any = ...
    device_opacity: Any = ...
    update_version: Any = ...
    device_version: Any = ...
    electron_upgrade_popup: Any = ...
    existing_version: Any = ...
    update_state: Any = ...
    device: Any = ...
    progress: Any = ...
    in_progress: Any = ...
    making_progress: Any = ...
    button_state_details: Any = ...
    controller: Any = ...
    def __init__(self, **kwargs: Any): ...
    def on_update_state(self, instance: Any, value: Any) -> None: ...
    def on_device(self, instance: Any, value: Any) -> None: ...
    def on_progress(self, instance: Any, value: Any) -> None: ...
    def inactivity(self, dt: Any) -> None: ...
    def device_changed(self) -> None: ...
    def firmware_version(self): ...
    def on_update_version(self, instance: Any, value: Any) -> None: ...
    def update_button(self) -> None: ...
    def start(self) -> None: ...
    def _can_upgrade(self, device: Any, device_version: Any): ...
    def show_upgrade_electron_help(self) -> None: ...

class FlashView(UpdaterEvents):
    root: Any = ...
    def __init__(self, root: ConnectedDevice) -> None: ...
    def updater_state_changed(self, state: FlashState) -> Any: ...
    def connected_device_changed(self, device: Any) -> None: ...
    def device_version(self, version: Any) -> None: ...
    def error(self, error: Any) -> None: ...
    def progress(self, min: Any, max: Any, current: Any) -> None: ...

class Gui(App):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    title: str = ...
    icon: str = ...
    thread: Any = ...
    def build(self): ...
    def on_pause(self): ...

def setup_working_dir() -> None: ...
