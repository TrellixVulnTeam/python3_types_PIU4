from .abc import Functor, Monad
from typing import Any, Callable

class Observable(Monad, Functor):
    _get_value: Any = ...
    def __init__(self, subscribe: Callable[[Callable], Any]): ...
    @classmethod
    def unit(cls: Any, x: Any) -> Observable: ...
    just: Any = ...
    def map(self, mapper: Callable[[Any], Any]) -> Observable: ...
    def bind(self, fn: Callable[[Any], Observable]) -> Observable: ...
    flat_map: Any = ...
    def filter(self, predicate: Any) -> Observable: ...
    @staticmethod
    def call_cc(fn: Callable) -> Observable: ...
    def subscribe(self, on_next: Any) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
