import pika
from typing import Any, Callable, Tuple, Union

class VirtualHost:
    secure: Any = ...
    host: Any = ...
    name: Any = ...
    port: Any = ...
    username: Any = ...
    password: Any = ...
    def __init__(self, url: str=..., host: str=..., name: str=..., port: int=..., username: str=..., password: str=..., secure: bool=...) -> None: ...
    def __str__(self) -> str: ...
    @property
    def blocking_connection(self) -> pika.BlockingConnection: ...

class BaseMessageSerializer:
    content_type: str = ...
    type_header: Any = ...
    message_type: Any = ...
    task_get_attempts: int = ...
    @classmethod
    def get_task(cls: Any, properties: pika.BasicProperties, body: bytes) -> Callable: ...
    message: Any = ...
    def __init__(self, message: Message) -> None: ...
    def publish_kwargs(self) -> dict: ...
    def body(self) -> str: ...
    def properties(self) -> dict: ...
    def publish(self, connection: pika.BlockingConnection, channel: pika.channel.Channel) -> None: ...
    @classmethod
    def serialize_arguments(cls: Any, body: str) -> Tuple[tuple, dict]: ...

class DefaultMessageSerializer(BaseMessageSerializer):
    type_header: str = ...
    message_type: str = ...

class Message:
    uuid: Any = ...
    virtual_host: Any = ...
    exchange: Any = ...
    queue: Any = ...
    routing_key: Any = ...
    priority: Any = ...
    task: Any = ...
    task_args: Any = ...
    task_kwargs: Any = ...
    formatter: Any = ...
    def __init__(self, task: str, virtual_host: VirtualHost=..., queue: str=..., routing_key: str=..., exchange: str=..., priority: int=..., task_args: tuple=..., task_kwargs: Union[str, dict]=...) -> None: ...
    @property
    def connection_channel(self) -> Tuple[pika.BlockingConnection, pika.channel.Channel]: ...
    def publish(self, pika_log_level: int=...) -> Any: ...
