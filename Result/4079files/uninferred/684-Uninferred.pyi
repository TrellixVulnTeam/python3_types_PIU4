import typing as T
from typing import Any

class HandlerNotFound(Exception):
    event: Any = ...
    handler: Any = ...
    def __init__(self, event: str, handler: T.Callable) -> None: ...
    def __str__(self) -> str: ...

class EventNotFound(Exception):
    event: Any = ...
    def __init__(self, event: str) -> None: ...
    def __str__(self) -> str: ...

class Observable:
    _events: Any = ...
    def __init__(self) -> None: ...
    def get_all_handlers(self) -> T.Dict[str, T.List[T.Callable]]: ...
    def get_handlers(self, event: str) -> T.List[T.Callable]: ...
    def is_registered(self, event: str, handler: T.Callable) -> bool: ...
    def on(self, event: str, *handlers: T.Callable) -> T.Callable: ...
    def off(self, event: str=..., *handlers: T.Callable) -> None: ...
    def once(self, event: str, *handlers: T.Callable) -> T.Callable: ...
    def trigger(self, event: str, *args: T.Any, **kw: T.Any) -> bool: ...
