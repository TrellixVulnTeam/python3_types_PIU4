import mitmproxy.options
from mitmproxy import addonmanager
from typing import Any, Optional

class TestAddons(addonmanager.AddonManager):
    def __init__(self, master: Any) -> None: ...
    def trigger(self, event: Any, *args: Any, **kwargs: Any) -> None: ...

class RecordingMaster(mitmproxy.master.Master):
    addons: Any = ...
    logs: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def dump_log(self, outf: Any = ...) -> None: ...
    def has_log(self, txt: Any, level: Optional[Any] = ...): ...
    async def await_log(self, txt: Any, level: Optional[Any] = ...): ...
    def clear(self) -> None: ...

class context:
    master: Any = ...
    options: Any = ...
    def __init__(self, *addons: Any, options: Optional[Any] = ..., loadcore: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any): ...
    def cycle(self, addon: Any, f: Any) -> None: ...
    def configure(self, addon: Any, **kwargs: Any) -> None: ...
    def script(self, path: Any): ...
    def invoke(self, addon: Any, event: Any, *args: Any, **kwargs: Any): ...
    def command(self, func: Any, *args: Any): ...
