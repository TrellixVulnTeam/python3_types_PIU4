import os
from contextlib import redirect_stdout as redirect_stdout
from pathlib import Path as Path
from pprint import pprint as pprint
from typing import Any, List, Union

StrPath = Union[str, os.PathLike]

class Command:
    bin: Any = ...
    arguments: Any = ...
    def __init__(self, bin: str, *args: str, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Command: ...
    def _add_arguments(self, *args: str, **kwargs: Any) -> Command: ...
    def copy(self) -> Command: ...
    def __str__(self) -> str: ...

class Rule:
    targets: Any = ...
    sources: Any = ...
    recipe: Any = ...
    def __init__(self, targets: List[StrPath], sources: List[StrPath], recipe: List[Command]) -> None: ...
    @classmethod
    def creates(self, *items: StrPath) -> Rule: ...
    def set_recipe(self, *commands: Command) -> Rule: ...
    def depends_on(self, *sources: StrPath) -> Rule: ...
    def print(self) -> None: ...

class PhonyRule(Rule):
    def print(self) -> None: ...

class Makefile:
    rules: Any = ...
    phonies: Any = ...
    def __init__(self) -> None: ...
    def __enter__(self) -> Makefile: ...
    def __exit__(self, exc_class: Any, exc_inst: Any, tb: Any) -> None: ...
    def print(self) -> None: ...
    def rule(self, *targets: Any) -> Rule: ...
    def phony_rule(self, name: Any, *sources: Any) -> PhonyRule: ...
