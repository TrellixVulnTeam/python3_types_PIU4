from typing import Any, Optional

class AppDescriptor:
    LENGTH: Any = ...
    SIGNATURE: bytes = ...
    RESERVED: Any = ...
    signature: Any = ...
    image_crc: int = ...
    image_size: int = ...
    vcs_commit: int = ...
    version_major: int = ...
    version_minor: int = ...
    reserved: Any = ...
    def __init__(self, bytes: Optional[Any] = ...) -> None: ...
    def pack(self): ...
    def unpack(self, bytes: Any) -> None: ...
    @property
    def empty(self): ...
    @property
    def valid(self): ...

class FirmwareImage:
    PADDING: int = ...
    _file: Any = ...
    _padding: Any = ...
    _contents: Any = ...
    _do_write: bool = ...
    _length: Any = ...
    _descriptor_offset: Any = ...
    _descriptor_bytes: Any = ...
    _descriptor: Any = ...
    def __init__(self, path: Any, mode: str = ...) -> None: ...
    def __enter__(self): ...
    def __getattr__(self, attr: Any): ...
    def __iter__(self) -> Any: ...
    def __exit__(self, *args: Any) -> None: ...
    def _write_descriptor_raw(self) -> None: ...
    def write_descriptor(self) -> None: ...
    @property
    def crc(self): ...
    @property
    def length(self): ...
    @property
    def app_descriptor_offset(self): ...
    @property
    def app_descriptor(self): ...
    @app_descriptor.setter
    def app_descriptor(self, value: Any) -> None: ...
