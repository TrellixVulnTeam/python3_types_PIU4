from typing import Any, Dict, Iterable, List, Tuple

kPAREN: Any
kBRACKET: Any
kMULT_SPACE: Any
kANGLE: Any
PUNCTUATION: Any
ALL_FOLDS: Any
QuestionText = str
Answer = str
TrainingData = Tuple[List[List[QuestionText]], List[Answer]]
QB_QUESTION_DB: str
log: Any

class Question:
    qnum: Any = ...
    answer: Any = ...
    category: Any = ...
    naqt: Any = ...
    protobowl: Any = ...
    tournaments: Any = ...
    page: Any = ...
    fold: Any = ...
    text: Any = ...
    _last_query: Any = ...
    def __init__(self, qnum: Any, answer: Any, category: Any, naqt: Any, protobowl: Any, tournaments: Any, page: Any, fold: Any) -> None: ...
    def __repr__(self): ...
    def normalized_answer(self): ...
    def raw_words(self) -> None: ...
    @staticmethod
    def split_and_remove_punc(text: Any) -> None: ...
    def partials(self, word_skip: int = ...) -> None: ...
    def text_lines(self) -> None: ...
    def get_text(self, sentence: Any, token: Any): ...
    def add_text(self, sent: Any, text: Any) -> None: ...
    def flatten_text(self): ...
    def to_example(self) -> Tuple[List[QuestionText], Answer]: ...

class QuestionDatabase:
    _conn: Any = ...
    def __init__(self, location: Any = ...) -> None: ...
    def query(self, command: str, arguments: Any) -> Dict[str, Question]: ...
    def all_questions(self, unfiltered: bool = ...): ...
    def answer_map(self): ...
    @staticmethod
    def normalize_answer(answer: Any): ...
    def normalized_answers(self): ...
    def questions_by_answer(self, answer: Any) -> None: ...
    def questions_with_pages(self) -> Dict[str, List[Question]]: ...
    def prune_text(self) -> None: ...
    def all_answers(self): ...

class QuizBowlDataset:
    db: Any = ...
    min_class_examples: Any = ...
    guesser_train: Any = ...
    buzzer_train: Any = ...
    training_fold: Any = ...
    def __init__(self, min_class_examples: int, *, guesser_train: Any=..., buzzer_train: Any=..., qb_question_db: str=...) -> None: ...
    def training_data(self) -> TrainingData: ...
    def questions_by_fold(self, folds: Any=...) -> Dict[str, List[Question]]: ...
    def questions_in_folds(self, folds: Iterable[str]) -> List[Question]: ...
