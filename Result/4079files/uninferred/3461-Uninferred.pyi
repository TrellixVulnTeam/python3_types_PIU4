import homeassistant.helpers.config_validation as alarm
import asyncio
import enum
from homeassistant.const import CONF_CODE as CONF_CODE, CONF_DISARM_AFTER_TRIGGER as CONF_DISARM_AFTER_TRIGGER
from homeassistant.helpers.event import async_track_point_in_time as async_track_point_in_time
from operator import attrgetter as attrgetter
from typing import Any, Optional

CONF_HEADSUP: str
CONF_IMMEDIATE: str
CONF_DELAYED: str
CONF_NOTATHOME: str
CONF_ALARM: str
CONF_WARNING: str
STATE_ALARM_WARNING: str

class Events(enum.Enum):
    ImmediateTrip: int = ...
    DelayedTrip: int = ...
    ArmHome: int = ...
    ArmAway: int = ...
    Timeout: int = ...
    Disarm: int = ...
    Trigger: int = ...

PLATFORM_SCHEMA: Any
_LOGGER: Any

@asyncio.coroutine
def async_setup_platform(hass: Any, config: Any, async_add_devices: Any, discovery_info: Optional[Any] = ...) -> None: ...

class BWAlarm(alarm.AlarmControlPanel):
    _hass: Any = ...
    _name: Any = ...
    _immediate: Any = ...
    _delayed: Any = ...
    _notathome: Any = ...
    _allinputs: Any = ...
    _allsensors: Any = ...
    _alarm: Any = ...
    _warning: Any = ...
    _pending_time: Any = ...
    _trigger_time: Any = ...
    _lasttrigger: str = ...
    _state: Any = ...
    _returnto: Any = ...
    _timeoutat: Any = ...
    def __init__(self, hass: Any, config: Any) -> None: ...
    @property
    def should_poll(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def changed_by(self) -> str: ...
    @property
    def state(self) -> str: ...
    @property
    def device_state_attributes(self): ...
    def time_change_listener(self, eventignored: Any) -> None: ...
    def state_change_listener(self, event: Any) -> None: ...
    def alarm_disarm(self, code: Optional[Any] = ...) -> None: ...
    def alarm_arm_home(self, code: Optional[Any] = ...) -> None: ...
    def alarm_arm_away(self, code: Optional[Any] = ...) -> None: ...
    def alarm_trigger(self, code: Optional[Any] = ...) -> None: ...
    def noton(self, eid: Any): ...
    immediate: Any = ...
    delayed: Any = ...
    ignored: Any = ...
    def setsignals(self, athome: Any) -> None: ...
    def clearsignals(self) -> None: ...
    def process_event(self, event: Any) -> None: ...
