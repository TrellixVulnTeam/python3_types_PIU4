from toolz.curried import compose as compose
from typing import Any, Optional

class ComposerBase:
    attrs: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DefaultComposer(ComposerBase):
    imports: Any = ...
    def item(self, item: Any): ...
    def attr(self, item: Any): ...
    def call(self, tokens: Any, *args: Any, **kwargs: Any): ...
    def composer(self, tokens: Any): ...

class ChainBase:
    def compute(self, fn: Any, *args: Any, **kwargs: Any): ...
    def __dir__(self): ...
    def _tokenize(self, composer: Any, attr: Any): ...

class Chain(ChainBase):
    _composer: Any = ...
    _dir: Any = ...
    _tokens: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def compute(self, *args: Any, **kwargs: Any) -> [Any, None]: ...
    def __getattr__(self, attr: Any): ...
    def __getitem__(self, item: Any): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def copy(self, klass: Optional[Any] = ...): ...
    @property
    def compose(self): ...
    def __dir__(self): ...

class chain(Chain):
    def __repr__(self): ...

class SugarComposer(DefaultComposer):
    multiple_dispatch: Any = ...
    def item(self, item: Any): ...
    def call(self, tokens: Any, *args: Any, **kwargs: Any): ...

class LiterateAPI(chain):
    def __init__(self, *args: Any, **kwargs: Any): ...

class _x(LiterateAPI):
    _composer: Any = ...
    def __or__(self, f: Any): ...
    def __gt__(self, f: Any) -> [compose, Any]: ...
    def compute(self, *args: Any, **kwargs: Any): ...
    def __mul__(self, f: Any): ...
    def __add__(self, f: Any): ...

class __x(_x):
    def _(self, *args: Any, **kwargs: Any) -> None: ...

class ThisComposer(DefaultComposer):
    def item(self, item: Any): ...
    def attr(self, item: Any): ...
    def call(self, tokens: Any, *args: Any, **kwargs: Any): ...

class _this(_x):
    _composer: Any = ...
    def __init__(self, arg: Optional[Any] = ...) -> None: ...
    @property
    def __dir__(self): ...
    def copy(self, klass: Any = ...): ...
    _tokens: Any = ...
    def __repr__(self): ...

class ParallelComposer(SugarComposer):
    n_jobs: Any = ...
    def __init__(self, n_jobs: int = ...) -> None: ...
    def composer(self, tokens: Any, **kwargs: Any): ...

class __p(__x):
    _composer: Any = ...
    def __init__(self, *args: Any, n_jobs: int = ..., **kwargs: Any) -> None: ...
