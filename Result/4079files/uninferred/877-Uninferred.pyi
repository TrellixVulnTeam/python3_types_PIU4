from api.errors import Error
from typing import Any, Optional

class NotAnAstError(Error):
    instance: Any = ...
    msg: Any = ...
    def __init__(self, instance: Any) -> None: ...
    def __str__(self): ...

class Tree:
    class childrenList:
        node: Any = ...
        _children: Any = ...
        def __init__(self, node: Any) -> None: ...
        def __getitem__(self, key: Any): ...
        def __setitem__(self, key: Any, value: Any) -> None: ...
        def __delitem__(self, key: Any) -> None: ...
        def append(self, value: Any) -> None: ...
        def insert(self, pos: Any, value: Any) -> None: ...
        def pop(self, pos: int = ...): ...
        def __len__(self): ...
        def __add__(self, other: Any): ...
        def __repr__(self): ...
    _children: Any = ...
    def __init__(self) -> None: ...
    @property
    def children(self): ...
    @children.setter
    def children(self, value: Any) -> None: ...
    def inorder(self, funct: Any, stopOn: Optional[Any] = ...): ...
    def preorder(self, funct: Any, stopOn: Optional[Any] = ...): ...
    def postorder(self, funct: Any, stopOn: Optional[Any] = ...): ...
    def appendChild(self, node: Any) -> None: ...
    def prependChild(self, node: Any) -> None: ...
    @classmethod
    def makenode(clss: Any, symbol: Any, *nexts: Any): ...
    def __deepcopy(self, memo: Any): ...
