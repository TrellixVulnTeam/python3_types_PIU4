from typing import Any, Optional

class FileObject:
    uid: Any = ...
    files_included: Any = ...
    list_of_all_included_files: Any = ...
    parents: Any = ...
    root_uid: Any = ...
    depth: int = ...
    processed_analysis: Any = ...
    scheduled_analysis: Any = ...
    comments: Any = ...
    parent_firmware_uids: Any = ...
    temporary_data: Any = ...
    analysis_tags: Any = ...
    binary: Any = ...
    sha256: Any = ...
    size: Any = ...
    file_name: Any = ...
    file_path: Any = ...
    virtual_file_path: Any = ...
    def __init__(self, binary: Optional[Any] = ..., file_name: Optional[Any] = ..., file_path: Optional[Any] = ..., scheduled_analysis: Optional[Any] = ...) -> None: ...
    def set_binary(self, binary: Any) -> None: ...
    def set_name(self, name: Any) -> None: ...
    def set_file_path(self, file_path: Any) -> None: ...
    def get_uid(self): ...
    def overwrite_uid(self, new_uid: Any) -> None: ...
    def get_hid(self, root_uid: Optional[Any] = ...): ...
    def get_included_files_uids(self): ...
    def create_from_file(self, file_path: Any) -> None: ...
    def add_included_file(self, file_object: Any) -> None: ...
    def add_virtual_file_path_if_none_exists(self, parent_pathes: Any, parent_uid: Any) -> None: ...
    def get_virtual_paths_for_one_uid(self, root_uid: Optional[Any] = ...): ...
    def get_virtual_file_paths(self): ...
    @staticmethod
    def get_root_of_virtual_path(virtual_path: Any): ...
    @staticmethod
    def get_base_of_virtual_path(virtual_path: Any): ...
    @staticmethod
    def get_top_of_virtual_path(virtual_path: Any): ...
    def get_root_uid(self): ...
    def __str__(self): ...
    def __repr__(self): ...
