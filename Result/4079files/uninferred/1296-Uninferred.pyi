from aiohttp import ClientSession
from typing import Any, Optional

_LOGGER: Any
API_BASE: str
LOGIN_ENDPOINT: str
DEVICE_LIST_ENDPOINT: str
DEFAULT_TIMEOUT: int
DEFAULT_REQUEST_RETRIES: int
MIN_TIME_BETWEEN_UPDATES: Any
DEFAULT_USER_AGENT: str
BRAND_MAPPINGS: Any
SUPPORTED_DEVICE_TYPE_NAMES: Any

class API:
    _brand: Any = ...
    _websession: Any = ...
    _supplied_websession: bool = ...
    _credentials: Any = ...
    _security_token: Any = ...
    _devices: Any = ...
    _last_update: Any = ...
    online: bool = ...
    _update_lock: Any = ...
    _security_token_lock: Any = ...
    def __init__(self, brand: str, websession: ClientSession=...) -> None: ...
    def _create_websession(self) -> None: ...
    async def close_websession(self) -> None: ...
    async def _request(self, method: str, endpoint: str, *, headers: dict=..., params: dict=..., data: dict=..., json: dict=..., login_request: bool=..., **kwargs: Any) -> Optional[dict]: ...
    async def _update_device_state(self) -> None: ...
    async def _get_device_states(self) -> bool: ...
    def _store_device_states(self, devices: dict) -> None: ...
    async def authenticate(self, username: str, password: str) -> None: ...
    async def _get_security_token(self) -> None: ...
    async def get_devices(self, covers_only: bool=...) -> list: ...

async def login(username: str, password: str, brand: str, websession: ClientSession=...) -> API: ...
