from rest_framework import serializers
from rest_framework_json_schema.schema import ResourceObject
from typing import Any, Dict, Iterator, List, Optional, TypeVar

class BaseModel:
    id: int
    @property
    def pk(self) -> int: ...
    def serializable_value(self, field_name: str) -> Any: ...

class Artist(BaseModel):
    id: Any = ...
    first_name: Any = ...
    last_name: Any = ...
    def __init__(self, id: int, first_name: str, last_name: str) -> None: ...
    def update(self, id: int, first_name: str, last_name: str) -> None: ...

class Album(BaseModel):
    id: Any = ...
    album_name: Any = ...
    artist: Any = ...
    def __init__(self, id: int, album_name: str, artist: Optional[Artist], tracks: Optional[List[Track]]=...) -> None: ...
    @property
    def tracks(self) -> List[Track]: ...

class Track(BaseModel):
    id: Any = ...
    track_num: Any = ...
    name: Any = ...
    album: Any = ...
    def __init__(self, id: int, track_num: int, name: str, album: Album) -> None: ...

INITIAL_ARTISTS: List[Artist]
ARTISTS: List[Artist]
INITIAL_ALBUMS: List[Album]
ALBUMS: List[Album]
INITIAL_TRACKS: List[Track]
TRACKS: List[Track]
T = TypeVar('T')

class QuerySet:
    objs: Any = ...
    def __init__(self, objs: List[T]) -> None: ...
    def __iter__(self) -> Iterator[T]: ...
    def get(self, pk: int) -> T: ...
    def add(self, obj: T) -> None: ...
    def count(self) -> int: ...
    def __getitem__(self, item: int) -> T: ...

def get_artists() -> QuerySet: ...
def get_albums() -> QuerySet: ...
def get_tracks() -> QuerySet: ...
def reset_data() -> None: ...

class ArtistObject(ResourceObject):
    type: str = ...
    attributes: Any = ...
    transformer: Any = ...

class AlbumObject(ResourceObject):
    type: str = ...
    attributes: Any = ...
    relationships: Any = ...
    transformer: Any = ...

class TrackObject(ResourceObject):
    type: str = ...
    attributes: Any = ...
    relationships: Any = ...
    transformer: Any = ...

class ArtistSerializer(serializers.Serializer):
    id: Any = ...
    first_name: Any = ...
    last_name: Any = ...
    schema: Any = ...
    def create(self, validated_data: Dict) -> Dict: ...
    def update(self, instance: Artist, validated_data: Dict) -> Artist: ...

class TrackSerializer(serializers.Serializer):
    id: Any = ...
    track_num: Any = ...
    name: Any = ...
    album: Any = ...
    schema: Any = ...

class AlbumSerializer(serializers.Serializer):
    id: Any = ...
    album_name: Any = ...
    artist: Any = ...
    tracks: Any = ...
    schema: Any = ...
    def create(self, validated_data: Dict) -> Dict: ...
