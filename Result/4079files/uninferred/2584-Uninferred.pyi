import abc
from abc import ABCMeta, abstractmethod
from typing import Any

logger: Any

class BaseUpdater(metaclass=ABCMeta):
    _useragent: Any = ...
    _externalIp: Any = ...
    @abstractmethod
    def build_payload(self) -> Any: ...
    @abstractmethod
    def parse_result(self, response: Any) -> Any: ...
    @abstractmethod
    def updater(self) -> Any: ...
    @classmethod
    def get_external_ip(self) -> None: ...

class BaseHTTPUpdater(BaseUpdater, metaclass=abc.ABCMeta):
    _api_url: Any = ...
    _query: Any = ...
    _data: Any = ...
    _headers: Any = ...
    def __int__(self, *args: Any, **kwargs: Any) -> None: ...
    @abstractmethod
    def build_payload(self) -> Any: ...
    def updater(self): ...

class Base3FactsHTTPUpdater(BaseHTTPUpdater, metaclass=abc.ABCMeta):
    _username: Any = ...
    _password: Any = ...
    _hostname: Any = ...
    def __init__(self, hostname: Any, username: Any, password: Any, *args: Any, **kwargs: Any) -> None: ...
    def build_payload(self): ...
