from .renderbuffer import Renderbuffer
from .texture import Texture
from typing import Any, Dict, Tuple, Union

class Framebuffer:
    __slots__: Any = ...
    mglo: Any = ...
    _color_attachments: Any = ...
    _depth_attachment: Any = ...
    _size: Any = ...
    _samples: Any = ...
    _glo: Any = ...
    ctx: Any = ...
    extra: Any = ...
    def __init__(self) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def viewport(self) -> Tuple[int, int, int, int]: ...
    @viewport.setter
    def viewport(self, value: Any) -> None: ...
    @property
    def color_mask(self) -> Tuple[bool, bool, bool, bool]: ...
    @color_mask.setter
    def color_mask(self, value: Any) -> None: ...
    @property
    def depth_mask(self) -> bool: ...
    @depth_mask.setter
    def depth_mask(self, value: Any) -> None: ...
    @property
    def width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def size(self) -> tuple: ...
    @property
    def samples(self) -> int: ...
    @property
    def bits(self) -> Dict[str, str]: ...
    @property
    def color_attachments(self) -> Tuple[Union[Texture, Renderbuffer], ...]: ...
    @property
    def depth_attachment(self) -> Union[Texture, Renderbuffer]: ...
    @property
    def glo(self) -> int: ...
    def clear(self, red: Any=..., green: Any=..., blue: Any=..., alpha: Any=..., depth: Any=..., *, viewport: Any=...) -> None: ...
    def use(self) -> None: ...
    def read(self, viewport: Any=..., components: Any=..., *, attachment: Any=..., alignment: Any=..., dtype: Any=...) -> bytes: ...
    def read_into(self, buffer: Any, viewport: Any=..., components: Any=..., *, attachment: Any=..., alignment: Any=..., dtype: Any=..., write_offset: Any=...) -> None: ...
    def release(self) -> None: ...
