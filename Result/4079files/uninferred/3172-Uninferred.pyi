from typing import Any, Optional

logger: Any

class TenhouLogReproducer:
    player_position: Any = ...
    round_content: Any = ...
    stop_tag: Any = ...
    decoder: Any = ...
    def __init__(self, log_url: Any, stop_tag: Optional[Any] = ...) -> None: ...
    def reproduce(self, dry_run: bool = ...) -> None: ...
    def _normalize_position(self, who: Any, from_who: Any): ...
    def _parse_url(self, log_url: Any): ...
    def _download_log_content(self, log_id: Any): ...
    def _parse_rounds(self, log_content: Any): ...
    def _is_discard(self, tag: Any): ...
    def _is_draw(self, tag: Any): ...
    def _parse_tile(self, tag: Any): ...
    def _is_init_tag(self, tag: Any): ...
    def _get_attribute_content(self, tag: Any, attribute_name: Any): ...

class SocketMock:
    log_path: Any = ...
    commands: Any = ...
    text: Any = ...
    def __init__(self, log_path: Any, log_content: str = ...) -> None: ...
    def connect(self, _: Any) -> None: ...
    def shutdown(self, _: Any) -> None: ...
    def close(self) -> None: ...
    def sendall(self, message: Any) -> None: ...
    def recv(self, _: Any): ...
    def _load_text(self): ...
    def _parse_text(self) -> None: ...

def parse_args_and_start_reproducer() -> None: ...
def main() -> None: ...
