from typing import Any, Callable, Dict, Iterable, Optional, TypeVar, Union

INPUT_TYPE_MAPPING: Any
build_key_to_id_lock: Any

class ConfigHandler:
    config_variables: Any = ...
    key_to_id: Any = ...
    def __init__(self) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def get_key_to_id(self) -> Dict[str, int]: ...
    async def async_get_key_to_id(self) -> Dict[str, int]: ...
    async def build_key_to_id(self) -> None: ...
    def exists(self, key: str) -> bool: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def collect_config_variables_from_apps(self) -> None: ...
    def update_config_variables(self, items: Iterable[ConfigVariable]) -> None: ...
    def save_default_values(self) -> bool: ...
    def increment_version(self) -> None: ...
    def cleanup_old_config_values(self) -> bool: ...
    def get_collection_string(self) -> str: ...

config: Any
T = TypeVar('T')
ChoiceType = Optional[Iterable[Dict[str, str]]]
ChoiceCallableType = Union[ChoiceType, Callable[[], ChoiceType]]
ValidatorsType = Iterable[Callable[[T], None]]
OnChangeType = Callable[[], None]
ConfigVariableDict: Any

class ConfigVariable:
    name: Any = ...
    default_value: Any = ...
    input_type: Any = ...
    label: Any = ...
    help_text: Any = ...
    choices: Any = ...
    hidden: Any = ...
    weight: Any = ...
    group: Any = ...
    subgroup: Any = ...
    validators: Any = ...
    on_change: Any = ...
    def __init__(self, name: str, default_value: T, input_type: str=..., label: str=..., help_text: str=..., choices: ChoiceCallableType=..., hidden: bool=..., weight: int=..., group: str=..., subgroup: str=..., validators: ValidatorsType=..., on_change: OnChangeType=...) -> None: ...
    @property
    def data(self) -> ConfigVariableDict: ...
    def is_hidden(self) -> bool: ...
