import typing
from .parameter import Parameter
from lmfit import Parameters
from typing import Any

class ParameterNotFoundException(Exception):
    def __init__(self, path: Any, label: Any) -> None: ...

class ParameterGroup(dict):
    _label: Any = ...
    _parameters: Any = ...
    _root: Any = ...
    def __init__(self, label: str=...) -> None: ...
    @classmethod
    def from_parameter_dict(cls: Any, parameter: Parameters) -> Any: ...
    @classmethod
    def from_dict(cls: Any, parameter: typing.Dict[str, typing.Union[typing.Dict, typing.List]], label: Any=...) -> ParameterGroup: ...
    @classmethod
    def from_list(cls: Any, parameter: typing.List[typing.Union[float, typing.List]], label: Any=...) -> ParameterGroup: ...
    @classmethod
    def known_formats(cls: Any) -> typing.Dict[str, typing.Callable]: ...
    @classmethod
    def from_file(cls: Any, filepath: str, fmt: str=...) -> Any: ...
    @classmethod
    def from_yaml_file(cls: Any, filepath: str) -> ParameterGroup: ...
    @classmethod
    def from_yaml(cls: Any, yaml_string: str) -> Any: ...
    @classmethod
    def from_csv(cls: Any, filepath: str, delimiter: str=...) -> Any: ...
    def to_csv(self, filename: str, delimiter: str=...) -> Any: ...
    def add_parameter(self, parameter: Parameter) -> Any: ...
    def add_group(self, group: ParameterGroup) -> Any: ...
    def set_root(self, root: ParameterGroup) -> Any: ...
    def get_nr_roots(self) -> int: ...
    @property
    def label(self) -> str: ...
    def groups(self) -> typing.Generator[ParameterGroup, None, None]: ...
    def has(self, label: str) -> bool: ...
    def get(self, label: str) -> Parameter: ...
    def all(self, root: str=..., seperator: str=...) -> typing.Generator[typing.Tuple[str, Parameter], None, None]: ...
    def as_parameter_dict(self) -> Parameters: ...
    def markdown(self) -> str: ...
    def __str__(self): ...
