from typing import Any, Dict, Tuple

def to_uuid(b: bytes) -> str: ...
def to_bool(b: bytes) -> bool: ...
def to_float(b: bytes) -> int: ...
def to_int32(b: bytes) -> int: ...
def to_uint64(b: bytes) -> int: ...
def to_uint32(b: bytes) -> int: ...
def to_uint16(b: bytes) -> int: ...
def to_uint8(b: bytes) -> int: ...
def to_utf8(b: bytes) -> str: ...
def identity(x: Any) -> Any: ...
def parse_format(b: bytes) -> Tuple[int, int]: ...

characteristic_ID_descriptor_UUID: str
pairing_service_UUID: str
pair_setup_characteristic_UUID: str
pair_verify_characteristic_UUID: str
pairing_features_characteristic_UUID: str

class HapParamTypes:
    Value: int = ...
    Additional_Authorization_Data: int = ...
    Origin_local_vs_remote: int = ...
    Characteristic_Type: int = ...
    Characteristic_Instance_ID: int = ...
    Service_Type: int = ...
    Service_Instance_ID: int = ...
    TTL: int = ...
    Return_Response: int = ...
    HAP_Characteristic_Properties_Descriptor: int = ...
    GATT_User_Description_Descriptor: int = ...
    GATT_Presentation_Format_Descriptor: int = ...
    GATT_Valid_Range: int = ...
    HAP_Step_Value_Descriptor: int = ...
    HAP_Service_Properties: int = ...
    HAP_Linked_Services: int = ...
    HAP_Valid_Values_Descriptor: int = ...
    HAP_Valid_Values_Range_Descriptor: int = ...
    def __call__(self, code: int) -> str: ...

HAP_param_type_code_to_name: Any
HAP_param_type_name_to_code: Any
HAP_param_code_to_converter: Dict[int, Any]
HAP_param_name_to_converter: Dict[str, Any]
format_code_to_name: Any
format_name_to_converter: Any
unit_name_to_code: Any
unit_code_to_name: Any
pairing_tlv_value_to_name: Any
pairing_tlv_name_to_format: Any
pairing_ktlv_method_value_code_to_name: Any
pairing_ktlv_error_code_to_name: Any

class PairingKTLVErrorCodes:
    kTLVError_Unknow: int = ...
    kTLVError_Authenticatio: int = ...
    kTLVError_Backof: int = ...
    kTLVError_MaxPeer: int = ...
    kTLVError_MaxTrie: int = ...
    kTLVError_Unavailabl: int = ...
    kTLVError_Bus: int = ...
    def __call__(self, code: int) -> str: ...

class PairingKTlvValues:
    kTLVType_Method: int = ...
    kTLVType_Identifier: int = ...
    kTLVType_Salt: int = ...
    kTLVType_PublicKey: int = ...
    kTLVType_Proof: int = ...
    kTLVType_EncryptedData: int = ...
    kTLVType_State: int = ...
    kTLVType_Error: int = ...
    kTLVType_RetryDelay: int = ...
    kTLVType_Certificate: int = ...
    kTLVType_Signature: int = ...
    kTLVType_Permissions: int = ...
    kTLVType_FragmentData: int = ...
    kTLVType_FragmentLast: int = ...
    kTLVType_Separator: int = ...
    def __call__(self, code: int) -> str: ...

class PairingKTLVMethodValues:
    Reserved: int = ...
    Pair_Setup: int = ...
    Pair_Verify: int = ...
    Add_Pairing: int = ...
    Remove_Pairing: int = ...
    List_Pairings: int = ...
    def __call__(self, code: int) -> str: ...

class HapBleStatusCodes:
    Success: int = ...
    Unsupported_PDU: int = ...
    Max_Procedures: int = ...
    Insufficient_Authorization: int = ...
    Invalid_Instance_ID: int = ...
    Insufficient_Authentication: int = ...
    Invalid_Request: int = ...
    def __call__(self, code: int) -> str: ...

class HapBleOpCodes:
    Characteristic_Signature_Read: int = ...
    Characteristic_Write: int = ...
    Characteristic_Read: int = ...
    Characteristic_Timed_Write: int = ...
    Characteristic_Execute_Write: int = ...
    Service_Signature_Read: int = ...
    def __call__(self, code: int) -> str: ...

op_code_to_name: Any
status_code_to_name: Any
status_code_to_message: Any
