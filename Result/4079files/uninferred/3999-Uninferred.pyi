import tensorflow as tf
from typing import Any, Callable, List, Tuple, Union

OutputProjection: Any
OutputProjectionSpec = Union[Tuple[OutputProjection, int], OutputProjection]

def _legacy_linear(output_size: int) -> Tuple[OutputProjection, int]: ...
def _legacy_relu(output_size: int) -> Tuple[OutputProjection, int]: ...
def nematus_output(output_size: int, activation_fn: Callable[[tf.Tensor], tf.Tensor]=..., dropout_keep_prob: float=...) -> Tuple[OutputProjection, int]: ...
def nonlinear_output(output_size: int, activation_fn: Callable[[tf.Tensor], tf.Tensor]=...) -> Tuple[OutputProjection, int]: ...
def maxout_output(maxout_size: int) -> Tuple[OutputProjection, int]: ...
def mlp_output(layer_sizes: List[int], activation: Callable[[tf.Tensor], tf.Tensor]=..., dropout_keep_prob: float=...) -> Tuple[OutputProjection, int]: ...
