import argparse
import enum
from typing import Any, BinaryIO

ROOT: Any
DIST_SUBDIR: str
OUTPUT_ZIP: Any
MQTT_OUTPUT_GZIP: Any
LAMBDA_NAME: str
MANAGED_POLICY_ARN: str
ROLE_NAME: str
EXCLUDE_REGEXES: Any

class Commands(enum.Enum):
    AWS_DEPLOY: str = ...
    ZIP_MQTT: str = ...
    ZIP_SKILL: str = ...

log: Any
ROLE_POLICY_DOC: Any
Arn = str

class Error(Exception): ...

def suitable(name: str) -> bool: ...
def main(args: Any = ...) -> None: ...
def aws_upload(args: argparse.Namespace, zip_data: BinaryIO) -> Any: ...
def lambda_exists(name: Any=...) -> bool: ...
def upload(zip: BinaryIO, name: Any=...) -> Any: ...
def create_lambda(role_arn: str, zip_data: BinaryIO, skill_id: str) -> Arn: ...
def create_skill_zip() -> BinaryIO: ...
def create_mqtt_gzip(f: BinaryIO, root: str=...) -> None: ...
def set_up_role() -> str: ...
