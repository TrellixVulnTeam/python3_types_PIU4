import io
from typing import Any, Dict, List, Tuple, TypeVar, Union

TypeLike = TypeVar('TypeLike')

class TypeCheckError(TypeError):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class MarshalModel:
    _attrs: Any = ...
    _attr_tree: Any = ...
    _obj: Any = ...
    _iterable: bool = ...
    _objs: Any = ...
    def __init__(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> None: ...
    @classmethod
    def _create_attr_info(cls, obj: Any): ...
    @staticmethod
    def _is_builtin(typ: Any) -> bool: ...
    @staticmethod
    def _has_public_attribute(typ: Any) -> bool: ...
    @staticmethod
    def _get_attribute_list(typ: Any) -> List[str]: ...
    @staticmethod
    def _is_generic(typ: Any) -> bool: ...
    @staticmethod
    def _is_any_option_union(typ: Any) -> bool: ...
    @classmethod
    def _get_root(cls, typ: Any): ...
    @staticmethod
    def _has_nested_type(typ: Any) -> bool: ...
    @classmethod
    def _tree_recursive(cls: Any, typ: Any) -> Union[Tuple[TypeLike, ...], Dict[str, Tuple]]: ...
    @classmethod
    def _convert_annot_type_tree(cls: Any, annots: Any) -> Dict[str, Tuple]: ...
    def _unmarshal_with_type_check(self, attr: Any, typ: Tuple[TypeLike]) -> Any: ...
    def _unmarshal(self, target: Any, target_attr_tree: Any, item: Any) -> None: ...
    _raw: Any = ...
    def load_json(self, json_in: Union[str, io.IOBase], lines: Any=..., **kwargs: Any) -> Any: ...
    def load_json_lines(self, json_in: Union[str, List[str], io.IOBase], **kwargs: Any) -> Any: ...
