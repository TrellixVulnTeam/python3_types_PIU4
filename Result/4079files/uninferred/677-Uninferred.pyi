from .HandlerFactory import *
import logging.handlers
from typing import Any

class InfoOrLessCritical(logging.Filter):
    def filter(self, record: Any): ...

def singleton(cls, *args: Any, **kw: Any): ...

class GeneralLogger:
    _loggers: Any = ...
    _log_level: Any = ...
    _main_thread_id: Any = ...
    _log_destination: Any = ...
    _log_by_thread: Any = ...
    _log_path: Any = ...
    _log_file_max_bytes: Any = ...
    _log_file_backup_count: Any = ...
    stream: Any = ...
    def __init__(self, level: Any = ..., log_by_thread: bool = ..., log_path: str = ..., max_bytes: int = ..., backup_count: int = ..., stream: Any = ...) -> None: ...
    @staticmethod
    def get_current_thread_id(): ...
    @staticmethod
    def get_current_thread_name(): ...
    def get_log_file_name(self): ...
    def get_logger(self, is_stream: bool=...) -> logging.Logger: ...
    def set_logger(self, name: Any, is_stream: bool = ...) -> None: ...
    def set_log_path(self, file_path: Any, max_bytes: int = ..., backup_count: int = ...) -> None: ...
    def set_log_level(self, new_level: Any) -> None: ...
    def set_log_by_thread_log(self, log_by_thread: Any) -> None: ...
