import flask
from flask import Config as Config, Request as Request
from injector import Binder, Injector, Module, Provider, Scope
from typing import Any, Callable, Iterable, TypeVar, Union
from werkzeug.local import LocalManager, LocalProxy

T = TypeVar('T', LocalProxy, Callable)

class CachedProviderWrapper(Provider):
    _old_provider: Any = ...
    _cache: Any = ...
    def __init__(self, old_provider: Provider) -> None: ...
    def get(self, injector: Injector) -> Any: ...

class RequestScope(Scope):
    _local_manager: LocalManager = ...
    _locals: Any = ...
    def cleanup(self) -> None: ...
    def prepare(self) -> None: ...
    def configure(self) -> None: ...
    def get(self, key: Any, provider: Provider) -> Any: ...

request: Any
_ModuleT = Union[Callable[[Binder], Any], Module]

class FlaskInjector:
    injector: Any = ...
    app: Any = ...
    def __init__(self, app: flask.Flask, modules: Iterable[_ModuleT]=..., injector: Injector=..., request_scope_class: type=...) -> None: ...

class FlaskModule(Module):
    app: Any = ...
    request_scope_class: Any = ...
    def __init__(self, app: flask.Flask, request_scope_class: type=...) -> None: ...
    def configure(self, binder: Binder) -> None: ...
