from .core import Patch
from .engine import DiffEngine
from typing import Any, List, T

class MyersEngine(DiffEngine):
    hash_optimization: Any = ...
    def __init__(self, hash_optimization: bool = ...) -> None: ...
    @property
    def name(self): ...
    def diff(self, original: Any, revised: Any): ...
    def __repr__(self): ...

def build_path(original: List[T], revised: List[T]) -> DiffNode: ...
def build_revision(path: DiffNode, original: List[T], revised: List[T]) -> Patch: ...

class DiffNode:
    __slots__: Any = ...
    i: Any = ...
    j: Any = ...
    lastSnake: Any = ...
    snake: bool = ...
    def __init__(self, i: Any, j: Any) -> None: ...
    def is_snake(self): ...
    def previous_snake(self): ...

def create_diff_node(i: Any, j: Any, prev: Any): ...
def create_snake(i: Any, j: Any, prev: Any): ...
