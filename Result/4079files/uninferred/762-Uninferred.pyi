from .api import API as API
from typing import Any, Union

_LOGGER: Any
DEVICE_ATTRIBUTE_GET_ENDPOINT: str
DEVICE_SET_ENDPOINT: str
STATE_OPEN: str
STATE_CLOSED: str
STATE_STOPPED: str
STATE_OPENING: str
STATE_CLOSING: str
STATE_UNKNOWN: str
STATE_TRANSITION: str
STATE_MAP: Any

class MyQDevice:
    _brand: Any = ...
    _device: Any = ...
    _device_json: Any = ...
    _device_id: Any = ...
    api: Any = ...
    next_allowed_update: Any = ...
    def __init__(self, device: dict, brand: str, api: API) -> None: ...
    @property
    def brand(self) -> str: ...
    @property
    def device_id(self) -> int: ...
    @property
    def parent_id(self) -> Union[None, int]: ...
    @property
    def name(self) -> str: ...
    @property
    def available(self) -> bool: ...
    @property
    def serial(self) -> str: ...
    @property
    def open_allowed(self) -> bool: ...
    @property
    def close_allowed(self) -> bool: ...
    @property
    def state(self) -> str: ...
    def _update_state(self, value: str) -> None: ...
    @property
    def type(self) -> str: ...
    @staticmethod
    def _coerce_state_from_string(value: Union[int, str]) -> str: ...
    async def _set_state(self, state: int) -> bool: ...
    async def close(self) -> bool: ...
    async def open(self) -> bool: ...
    async def update(self) -> None: ...
    async def close_connection(self) -> None: ...
