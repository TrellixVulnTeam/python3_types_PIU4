import marshmallow as ma
from typing import Any

hello_args: Any
hello_multiple: Any

class HelloSchema(ma.Schema):
    name: Any = ...

strict_kwargs: Any
hello_many_schema: Any

class Echo:
    def on_get(self, req: Any, resp: Any) -> None: ...
    on_post: Any = ...

class EchoQuery:
    def on_get(self, req: Any, resp: Any) -> None: ...

class EchoUseArgs:
    def on_get(self, req: Any, resp: Any, args: Any) -> None: ...
    on_post: Any = ...

class EchoUseKwargs:
    def on_get(self, req: Any, resp: Any, name: Any) -> None: ...
    on_post: Any = ...

class EchoUseArgsValidated:
    def on_get(self, req: Any, resp: Any, args: Any) -> None: ...
    on_post: Any = ...

class EchoMulti:
    def on_get(self, req: Any, resp: Any) -> None: ...
    on_post: Any = ...

class EchoManySchema:
    def on_get(self, req: Any, resp: Any) -> None: ...
    on_post: Any = ...

class EchoUseArgsWithPathParam:
    def on_get(self, req: Any, resp: Any, args: Any, name: Any) -> None: ...

class EchoUseKwargsWithPathParam:
    def on_get(self, req: Any, resp: Any, value: Any, name: Any) -> None: ...

class AlwaysError:
    def on_get(self, req: Any, resp: Any) -> None: ...
    on_post: Any = ...

class EchoHeaders:
    def on_get(self, req: Any, resp: Any) -> None: ...

class EchoCookie:
    def on_get(self, req: Any, resp: Any) -> None: ...

class EchoNested:
    def on_post(self, req: Any, resp: Any) -> None: ...

class EchoNestedMany:
    def on_post(self, req: Any, resp: Any) -> None: ...

def use_args_hook(args: Any, context_key: str = ..., **kwargs: Any): ...

class EchoUseArgsHook:
    def on_get(self, req: Any, resp: Any) -> None: ...

def create_app(): ...
