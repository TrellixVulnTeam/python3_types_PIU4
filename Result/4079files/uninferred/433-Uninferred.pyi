from typing import Any, Optional

DOCUMENTATION: str
EXAMPLES: str
RETURN: str

def run_package_operation(conda: Any, name: Any, version: Any, state: Any, dry_run: Any, command_runner: Any, on_failure: Any, on_success: Any) -> None: ...
def check_package_installed(command_runner: Any, conda: Any, name: Any, version: Any): ...
def install_package(command_runner: Any, conda: Any, name: Any, version: Optional[Any] = ..., dry_run: bool = ...): ...
def uninstall_package(command_runner: Any, conda: Any, name: Any, dry_run: bool = ...): ...
def find_conda(executable: Any): ...
def add_channels_to_command(command: Any, channels: Any): ...
def add_extras_to_command(command: Any, extras: Any): ...
def parse_conda_stdout(stdout: Any): ...
def run_conda_package_command(command_runner: Any, name: Any, version: Any, command: Any): ...
def get_install_target(name: Any, version: Any): ...

class CondaCommandError(Exception):
    command: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    def __init__(self, command: Any, stdout: Any, stderr: Any) -> None: ...

class CondaCommandJsonDescribedError(CondaCommandError):
    output: Any = ...
    def __init__(self, command: Any, output: Any, stderr: Any) -> None: ...

class CondaPackageNotFoundError(Exception):
    name: Any = ...
    version: Any = ...
    def __int__(self, name: Any, version: Any) -> None: ...

class CondaUnexpectedOutputError(Exception):
    output: Any = ...
    stderr: Any = ...
    def __int__(self, output: Any, stderr: Any) -> None: ...

class CondaExecutableNotFoundError(Exception):
    def __init__(self) -> None: ...

def _run_conda_command(module: Any, command: Any): ...
def _main(): ...
