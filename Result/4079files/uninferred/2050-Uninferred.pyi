from typing import Any, Optional

class OneStepTargetSARSA:
    tf_session: Any = ...
    tf_graph: Any = ...
    saver: Any = ...
    _get_output: Any = ...
    _train_step: Any = ...
    _update_target_network: Any = ...
    def __init__(self, input_shape: Any, output_num: Any, optimizer: Optional[Any] = ..., network_generator: Optional[Any] = ..., q_discount: float = ..., loss_clipping: int = ...) -> None: ...
    def init_tf_session(self) -> None: ...
    def create_network_graph(self, input_shape: Any, output_num: Any, network_generator: Any, q_discount: Any, optimizer: Any, loss_clipping: Any): ...
    def get_output(self, x: Any): ...
    def train_step(self, current_learning_rate: Any, state: Any, action: Any, reward: Any, state_tp1: Any, action_tp1: Any, terminal: Any, summaries: bool = ...): ...
    def update_target_network(self) -> None: ...
    def save(self, *args: Any, **kwargs: Any) -> None: ...
    def load(self, path: Any) -> None: ...

def create_nips_network(input_tensor: Any, output_num: Any): ...
