from typing import Any

class LibPeProtocol:
    CMD_RECEIVE_SUCCESS: int = ...
    CMD_RECEIVE_ERROR: int = ...
    CMD_SEND_ECHO: int = ...
    CMD_SEND_RESTART: int = ...
    CMD_SEND_SET_SECTION_NAME: int = ...
    CMD_SEND_SET_METHOD_CHANGE_FLAGS: int = ...
    CMD_SEND_SET_METHOD_NEW_SECTION: int = ...
    CMD_SEND_SET_METHOD_ALIGNMENT_RESIZE: int = ...
    CMD_SEND_SET_METHOD_ALIGNMENT: int = ...
    CMD_SEND_SET_REMOVE_INTEGRITY_CHECK: int = ...
    CMD_SEND_SET_DATA_PORT: int = ...
    CMD_SEND_SET_DATA_INTERFACE: int = ...
    CMD_SEND_SET_CONTROL_PORT: int = ...
    CMD_SEND_SET_CONTROL_INTERFACE: int = ...
    CMD_SEND_SET_PAYLOAD_X86: int = ...
    CMD_SEND_SET_PAYLOAD_X64: int = ...
    CMD_SEND_GET_CONFIG: int = ...
    CMD_SEND_SET_PAYLOAD_NAME_X86: int = ...
    CMD_SEND_SET_TRY_STAY_STEALTH: int = ...
    CMD_SEND_SET_ENABLE: int = ...
    CMD_SEND_SET_RANDOM_SECTION_NAME: int = ...
    CMD_SEND_SHUTDOWN: int = ...
    CMD_SEND_SET_PAYLOAD_NAME_X64: int = ...
    CMD_SEND_SET_METHOD_CROSS_SECTION_JUMP: int = ...
    CMD_SEND_SET_METHOD_CROSS_SECTION_JUMP_ITERATIONS: int = ...
    CMD_SEND_SET_ENCRYPT: int = ...
    CMD_SEND_SET_ENCRYPT_ITERATIONS: int = ...
    CMD_SEND_SET_TOKEN: int = ...
    CMD_SEND_PARAM_BOOL: Any = ...
    CMD_SEND_PARAM_STR: Any = ...
    CMD_SEND_PARAM_INT: Any = ...
    CMD_SEND_PARAM_BYTE: Any = ...
    CMD_SEND_PARAM_VOID: Any = ...
    host: Any = ...
    port: Any = ...
    timeout: Any = ...
    max_size: Any = ...
    last_error: Any = ...
    token: Any = ...
    def __init__(self, token: str, host: str, port: int, timeout: int=..., max_size: int=...) -> None: ...
    def get_last_error(self) -> str: ...
    def set_token(self, token: Any) -> bool: ...
    def send_command(self, command: Any, data: Any): ...
