from ..block import Block, BlockType as BlockType
from ..errors import ConfigError as ConfigError
from ..extensible import Writer
from ..model import Entity as Entity, Enumeration as Enumeration, Model as Model, Property as Property
from ..types import Type as Type
from collections import namedtuple
from typing import Any, Dict, List, Optional

PYTHON_BASE_TYPES: Any

TypeImport = namedtuple('TypeImport', ['module', 'symbol'])
PYTHON_TYPE_IMPORTS: Any

def sort_by_default(props: List[Property]) -> List[Property]: ...

class PythonWriter(Writer):
    block_types: Any = ...
    entities_module: Optional[str]
    entity_per_module: bool
    enums_module: Optional[str]
    model: Any = ...
    def __init__(self, model: Model, variables: Optional[Dict[str, str]]=...) -> None: ...
    def type_annotation(self, type: Type) -> str: ...
    def _entity_import(self, entity: Entity) -> Optional[TypeImport]: ...
    def _enum_import(self, enum: Enumeration) -> Optional[TypeImport]: ...
    def type_imports(self, type: Type) -> List[TypeImport]: ...
    def entity_type_imports(self, entity: Entity) -> List[TypeImport]: ...
    def typed_property(self, prop: Property, wrap: Optional[str]=...) -> str: ...
    def docstring(self, text: str) -> str: ...
    def comment(self, text: str) -> Block: ...
    def literal(self, value: str, type: Type) -> str: ...
    def init_argument(self, prop: Property) -> str: ...
    def default_value(self, prop: Property) -> str: ...
    def init_assignment(self, prop: Property) -> Block: ...
    def init_method(self, entity: Entity) -> Block: ...
    def eq_method(self, entity: Entity) -> Block: ...
    def write_class(self, entity: Entity) -> Block: ...
    def write_classes(self, entities: List[Entity]) -> Block: ...
    def write_class_file(self, entities: List[Entity]) -> Block: ...
    def write_enum(self, enum: Enumeration) -> Block: ...
    def write_enums_file(self) -> Block: ...
    def create_block(self, block_type: str, entities: Optional[List[str]]=...) -> Block: ...
