import abc
from abc import ABC, abstractmethod
from elliptic.Kernel.Context import ContextDelegate as ContextDelegate
from elliptic.Kernel.Expression import Expression
from typing import Any, Type, TypeVar

class DSLImplementation(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def base_delegate(self) -> Type[ContextDelegate]: ...
DSLImplementationSubclass = TypeVar('DSLImplementationSubclass', bound=DSLImplementation)
DSLContractSubclass = TypeVar('DSLContractSubclass', bound='DSLContract')

class DSLContract:
    dsl_impl: Any = ...
    expr: Any = ...
    def __init__(self, dsl_impl: DSLImplementationSubclass, expr: Expression=...) -> None: ...
    def append_tree(self, expr: Expression) -> DSLContractSubclass: ...
    def Base(self) -> DSLContractSubclass: ...
