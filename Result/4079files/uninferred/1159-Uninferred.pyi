import typing
from typing import Any

class Argument:
    name: Any = ...
    value: Any = ...
    type: Any = ...
    def __init__(self, name: str, value: str, type: typing.Optional[str]) -> None: ...

class CMake:
    generator: Any = ...
    build_folder: Any = ...
    source_folder: Any = ...
    arguments: Any = ...
    def __init__(self, build_folder: str, source_folder: str, generator: str) -> None: ...
    def add_argument_with_type(self, name: str, value: str, type: str) -> CMake: ...
    def add_argument(self, name: str, value: str) -> CMake: ...
    def set_install_folder(self, folder: str) -> CMake: ...
    def make_static_library(self) -> CMake: ...
    def config(self) -> None: ...
    def build_cmd(self, install: bool) -> Any: ...
    def build(self) -> None: ...
    def install(self) -> None: ...
