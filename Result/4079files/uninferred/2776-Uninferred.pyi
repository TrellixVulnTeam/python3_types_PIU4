from diana.module import Module
from typing import Any

LENGTH: int
INT_VALUE: int
STR_VALUE: str

def assert_wrapped(wrapped_func: Any) -> None: ...

class ModuleSync(Module):
    def provide_int(self) -> int: ...

def provide_string(self, length: int) -> str: ...

class AltModuleSync(Module):
    def provide_bool(self) -> bool: ...

def modules(request: Any): ...
def injector(modules: Any): ...
def basic_injected_function(request: Any, injector: Any): ...
def defaulted_injected_function(request: Any, injector: Any): ...
def parametrized_injected_function(request: Any, injector: Any): ...
def test_basic(basic_injected_function: Any) -> None: ...
def test_basic_manual(basic_injected_function: Any) -> None: ...
def test_inject_param(parametrized_injected_function: Any) -> None: ...
def test_provided_defaults(defaulted_injected_function: Any) -> None: ...
def test_module_dependencies(injector: Any): ...
def test_missing_dependency(injector: Any, basic_injected_function: Any) -> None: ...
def test_missing_dependency_provided(injector: Any, basic_injected_function: Any) -> None: ...
def test_module_unloading(injector: Any): ...
def test_instancemethod(injector: Any): ...
def test_classmethod(injector: Any): ...
def test_staticmethod(injector: Any): ...
