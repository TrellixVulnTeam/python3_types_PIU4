import tensorflow as tf
from typing import Any, Optional

class TensorflowGraph(tf.Graph):
    name: str = ...
    dropout_rate: Any = ...
    activator: Any = ...
    batch_norm: Any = ...
    cnn_size: Any = ...
    cnn_stride: int = ...
    initializer: Any = ...
    weight_dev: Any = ...
    is_training: Any = ...
    dropout: bool = ...
    saver: Any = ...
    summary_op: Any = ...
    train_writer: Any = ...
    test_writer: Any = ...
    enable_log: Any = ...
    save_weights: Any = ...
    save_images: Any = ...
    save_images_num: Any = ...
    save_meta_data: Any = ...
    log_weight_image_num: int = ...
    checkpoint_dir: Any = ...
    tf_log_dir: Any = ...
    Weights: Any = ...
    Biases: Any = ...
    features: str = ...
    H: Any = ...
    receptive_fields: int = ...
    complexity: int = ...
    pix_per_input: int = ...
    def __init__(self, flags: Any) -> None: ...
    sess: Any = ...
    def init_session(self, device_id: int = ...) -> None: ...
    def init_all_variables(self) -> None: ...
    def build_activator(self, input_tensor: Any, features: int, activator: Any=..., leaky_relu_alpha: Any=..., base_name: Any=...) -> Any: ...
    def conv2d(self, input_tensor: Any, w: Any, stride: Any, bias: Optional[Any] = ..., use_batch_norm: bool = ..., name: str = ...): ...
    def build_conv(self, name: Any, input_tensor: Any, cnn_size: Any, input_feature_num: Any, output_feature_num: Any, use_bias: bool = ..., activator: Optional[Any] = ..., use_batch_norm: bool = ..., dropout_rate: float = ...): ...
    def depthwise_separable_conv2d(self, input_tensor: Any, w: Any, stride: Any, channel_multiplier: int = ..., bias: Optional[Any] = ..., use_batch_norm: bool = ..., name: str = ...): ...
    def build_depthwise_separable_conv(self, name: Any, input_tensor: Any, cnn_size: Any, input_feature_num: Any, output_feature_num: Any, use_bias: bool = ..., activator: Optional[Any] = ..., use_batch_norm: bool = ..., dropout_rate: float = ...): ...
    def build_transposed_conv(self, name: Any, input_tensor: Any, scale: Any, channels: Any) -> None: ...
    def build_pixel_shuffler_layer(self, name: Any, h: Any, scale: Any, input_filters: Any, output_filters: Any, activator: Optional[Any] = ..., depthwise_separable: bool = ...) -> None: ...
    def copy_log_to_archive(self, archive_name: Any) -> None: ...
    def load_model(self, name: str = ..., trial: int = ..., output_log: bool = ...) -> None: ...
    def save_model(self, name: str = ..., trial: int = ..., output_log: bool = ...) -> None: ...
    def build_summary_saver(self, with_saver: bool = ...) -> None: ...
