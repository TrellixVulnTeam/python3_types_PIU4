from pathlib import Path
from peewee import Model
from typing import Any

class Events(Model):
    timestamp: Any = ...
    type: Any = ...
    message: Any = ...

class SeriesMedias(Model):
    id: Any = ...
    tv_db_id: Any = ...
    season_number: Any = ...
    episode_number: Any = ...
    added_timestamp: Any = ...
    series_title: Any = ...
    episode_title: Any = ...
    quality: Any = ...
    video_languages: Any = ...
    dirty: Any = ...
    media_filename: Any = ...

class SeriesSubtitles(Model):
    added_timestamp: Any = ...
    series_media: Any = ...
    language: Any = ...

class DopplerrDb:
    __sqlite_db_path: Any = ...
    __conn: Any = ...
    __database: Any = ...
    def __init__(self) -> None: ...
    @property
    def database(self): ...
    @property
    def conn(self): ...
    def init(self, sqlite_db_path: Path, reset_db: Any=...) -> Any: ...
    def create_tables(self) -> None: ...
    def insert_event(self, thetype: str, message: str) -> Any: ...
    def get_recent_events(self, limit: int) -> Any: ...
    def update_series_media(self, series_title: Any, tv_db_id: Any, season_number: Any, episode_number: Any, episode_title: Any, quality: Any, video_languages: Any, media_filename: Any, dirty: bool = ...) -> None: ...
    @staticmethod
    def _get_or_create(model: Any, **kwargs: Any): ...
    def update_fetched_series_subtitles(self, series_episode_uid: Any, subtitles_languages: Any, dirty: bool = ...) -> None: ...
    def get_last_fetched_series(self, limit: int) -> Any: ...
    def get_medias_series(self): ...
    def media_exists(self, media_filename: Any): ...
