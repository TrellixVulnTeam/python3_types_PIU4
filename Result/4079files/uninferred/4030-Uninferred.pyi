import collections.abc
from typing import Any, Optional

AUGEAS_LOAD_PATH: str
AUGEAS_FILES_PATH: str
AUGEAS_ERROR_PATH: str
log: Any

def join(*paths: Any): ...

class AugeasWrapper:
    _aug: Any = ...
    tree: Any = ...
    _loaded: bool = ...
    def __init__(self, confpath: Any, lens: Any, root: Optional[Any] = ..., loadpath: Optional[Any] = ..., flags: Any = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def save(self) -> None: ...
    def close(self) -> None: ...
    def match(self, path: Any) -> None: ...

class AugeasNode(collections.abc.MutableMapping):
    _aug: Any = ...
    _path: Any = ...
    _span: Any = ...
    def __init__(self, aug: Any, path: Any) -> None: ...
    @property
    def path(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value: Any) -> None: ...
    @property
    def span(self): ...
    @property
    def char(self): ...
    def __len__(self): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def match(self, subpath: Any) -> None: ...
    def __repr__(self): ...
