from overwatch_api.constants import *
from overwatch_api.exceptions import *
import aiohttp
from typing import Any

class AsyncOWAPI:
    server_url: Any = ...
    default_platform: Any = ...
    default_handle_ratelimit: Any = ...
    default_max_tries: Any = ...
    default_request_timeout: Any = ...
    _api_version: int = ...
    _api_urlpath: Any = ...
    def __init__(self, default_platform: str=..., server_url: str=..., *, handle_ratelimit: bool=..., max_tries: int=..., request_timeout: float=...) -> None: ...
    def _uses_aiohttp_session(func: Any): ...
    def _add_request_parameters(func: Any): ...
    async def get_profile(self, battletag: str, regions: Any=..., platform: Any=..., _session: Any=..., handle_ratelimit: Any=..., max_tries: Any=..., request_timeout: Any=...) -> Any: ...
    async def get_stats(self, battletag: str, regions: Any=..., platform: Any=..., _session: Any=..., handle_ratelimit: Any=..., max_tries: Any=..., request_timeout: Any=...) -> Any: ...
    async def get_achievements(self, battletag: str, regions: Any=..., platform: Any=..., _session: Any=..., handle_ratelimit: Any=..., max_tries: Any=..., request_timeout: Any=...) -> Any: ...
    async def get_hero_stats(self, battletag: str, regions: Any=..., platform: Any=..., _session: Any=..., handle_ratelimit: Any=..., max_tries: Any=..., request_timeout: Any=...) -> Any: ...
    @staticmethod
    def sanitize_battletag(battle_tag: str) -> str: ...
    async def _base_request(self, battle_tag: str, endpoint_name: str, session: aiohttp.ClientSession, *, platform: Any=..., handle_ratelimit: Any=..., max_tries: Any=..., request_timeout: Any=...) -> Any: ...
    async def _async_get(self, session: aiohttp.ClientSession, *args: Any, _async_timeout_seconds: int=..., **kwargs: Any) -> Any: ...
