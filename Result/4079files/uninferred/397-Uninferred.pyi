import argparse
from codot.commandbase import Command as Command
from linotype import Item
from typing import Any

def main_help_item() -> Item: ...
def command_help_item() -> Item: ...

class CustomArgumentParser(argparse.ArgumentParser):
    def error(self, message: Any) -> None: ...

class HelpAction(argparse.Action):
    def __init__(self, nargs: Any=..., **kwargs: Any) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any=...) -> None: ...

class VersionAction(argparse.Action):
    def __init__(self, nargs: Any=..., **kwargs: Any) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any=...) -> None: ...

class QuietAction(argparse.Action):
    def __init__(self, nargs: Any=..., **kwargs: Any) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Any=...) -> None: ...

def parse_args() -> argparse.Namespace: ...
def main() -> int: ...
def daemon() -> int: ...
def def_command(cmd_args: Any) -> Command: ...
def signal_exception_handler(signum: int, frame: Any) -> None: ...
def signal_exit_handler(signum: int, frame: Any) -> None: ...
