import mitmproxy.types
import queue
import typing
from mitmproxy import controller as controller, flow, http, options as options
from mitmproxy.coretypes import basethread
from typing import Any

class RequestReplayThread(basethread.BaseThread):
    daemon: bool = ...
    options: Any = ...
    channel: Any = ...
    queue: Any = ...
    inflight: Any = ...
    def __init__(self, opts: options.Options, channel: controller.Channel, queue: queue.Queue) -> None: ...
    def run(self) -> None: ...
    def replay(self, f: Any) -> None: ...

class ClientPlayback:
    q: Any = ...
    thread: Any = ...
    def __init__(self) -> None: ...
    def check(self, f: http.HTTPFlow) -> Any: ...
    def load(self, loader: Any) -> None: ...
    def running(self) -> None: ...
    def configure(self, updated: Any) -> None: ...
    def count(self) -> int: ...
    def stop_replay(self) -> None: ...
    def start_replay(self, flows: typing.Sequence[flow.Flow]) -> None: ...
    def load_file(self, path: mitmproxy.types.Path) -> None: ...
