import asyncio
from rflink.protocol import RflinkProtocol
from typing import Any, Callable, Optional

log: Any
CRLF: bytes
DEFAULT_RECONNECT_INTERVAL: int
DEFAULT_SIGNAL_REPETITIONS: int
CONNECTION_TIMEOUT: int
clients: Any

class ProxyProtocol(RflinkProtocol):
    raw_callback: Any = ...
    def __init__(self, *args: Any, raw_callback: Callable=..., **kwargs: Any) -> None: ...
    _last_ack: Any = ...
    def handle_raw_packet(self, raw_packet: Any) -> None: ...

def decode_tx_packet(packet: str) -> dict: ...

class RFLinkProxy:
    port: Any = ...
    host: Any = ...
    baud: Any = ...
    loop: Any = ...
    protocol: Any = ...
    transport: Any = ...
    closing: bool = ...
    def __init__(self, port: Optional[Any] = ..., host: Optional[Any] = ..., baud: int = ..., loop: Optional[Any] = ...) -> None: ...
    @asyncio.coroutine
    def handle_raw_tx_packet(self, writer: Any, raw_packet: Any) -> None: ...
    @asyncio.coroutine
    def forward_packet(self, writer: Any, packet: Any, raw_packet: Any) -> None: ...
    @asyncio.coroutine
    def client_connected_callback(self, reader: Any, writer: Any) -> None: ...
    def raw_callback(self, raw_packet: Any) -> None: ...
    def reconnect(self, exc: Optional[Any] = ...) -> None: ...
    async def connect(self) -> None: ...

def main(argv: Any = ..., loop: Optional[Any] = ...) -> None: ...
