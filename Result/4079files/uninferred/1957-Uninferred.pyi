import tensorflow as tf
from neuralmonkey.attention.base_attention import AttentionLoopStateTA, BaseAttention
from neuralmonkey.model.model_part import InitializerSpecs as InitializerSpecs
from neuralmonkey.model.stateful import Stateful as Stateful
from typing import Any, Optional, Tuple

class StatefulContext(BaseAttention):
    encoder: Any = ...
    def __init__(self, name: str, encoder: Stateful, save_checkpoint: str=..., load_checkpoint: str=..., initializers: InitializerSpecs=...) -> None: ...
    def attention_states(self) -> tf.Tensor: ...
    def attention_mask(self) -> Optional[tf.Tensor]: ...
    @property
    def context_vector_size(self) -> int: ...
    @property
    def state_size(self) -> int: ...
    def attention(self, query: tf.Tensor, decoder_prev_state: tf.Tensor, decoder_input: tf.Tensor, loop_state: AttentionLoopStateTA, step: tf.Tensor) -> Tuple[tf.Tensor, AttentionLoopStateTA]: ...
    def initial_loop_state(self) -> AttentionLoopStateTA: ...
    def finalize_loop(self, key: str, last_loop_state: AttentionLoopStateTA) -> None: ...
    def visualize_attention(self, key: str) -> None: ...
