from typing import Any, Dict, Iterable, Optional, Union
from vectorvondoom import elements
from vectorvondoom.elements import Circle as Circle, Element, Elements, Line as Line, Polygon as Polygon, Polyline as Polyline, Rect as Rect
from vectorvondoom.geometry import Point
from xml.etree import ElementTree

class SVG:
    _root: Any = ...
    _offset: Any = ...
    _height: Any = ...
    _invert_y: Any = ...
    def __init__(self, width: Optional[int]=..., height: Optional[int]=..., background: Optional[str]=..., attributes: Optional[Dict[str, Any]]=..., root: Optional[ElementTree.Element]=..., offset: Optional[Point]=..., invert_y: Optional[bool]=...) -> None: ...
    def circle(self, center: Point, radius: float, **attributes: Dict[str, Any]) -> None: ...
    def rect(self, top_left: Point, width: float, height: Any=..., **attributes: Dict[str, Any]) -> None: ...
    def rectangle(self, top_left: Point, bottom_right: Point, **attributes: Dict[str, Any]) -> None: ...
    def line(self, start: Point, end: Point, **attributes: Dict[str, Any]) -> None: ...
    def polyline(self, points: Iterable[Point], **attributes: Dict[str, Any]) -> None: ...
    def polygon(self, points: Iterable[Point], **attributes: Dict[str, Any]) -> None: ...
    def path(self, *descriptions: elements.PathDescription, **attributes: Dict[str, Any]) -> None: ...
    def star(self, center: Point, length: int, num_points: int, rotation: float=..., ngram: bool=..., inner_length: Optional[int]=..., **attributes: Dict[str, Any]) -> None: ...
    def add_raw(self, tag: str, attributes: Dict[str, Any], text: Optional[str]=...) -> None: ...
    def add(self, element: Union[Element, Elements]) -> None: ...
    def offset(self, point: Point) -> SVG: ...
    def export(self) -> bytes: ...
    @classmethod
    def format(cls: Any, value: Any) -> str: ...
    @classmethod
    def format_attributes(cls: Any, attributes: Dict[str, Any]) -> Dict[str, str]: ...
