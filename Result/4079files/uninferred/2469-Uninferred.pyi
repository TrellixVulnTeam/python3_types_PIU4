from absl.testing import parameterized
from deepmath.deephol import action_generator, deephol_pb2
from typing import Any, List

FLAGS: Any
PREDICTIONS_MODEL_PREFIX: Any
HOLLIGHT_TACTICS_TEXTPB_PATH: Any
EQ_REFL: str
EQ_SYM: str

def load_tactics(filename: Any) -> List[deephol_pb2.Tactic]: ...

class MockProofAssistantWrapper:
    def ApplyTactic(self, request: Any): ...

class MockActionGenerator(action_generator.ActionGenerator):
    suggestions: Any = ...
    def __init__(self, suggestions: Any) -> None: ...
    def step(self, goal: Any, premise_set: Any): ...

def mock_generator(*tactic_scores: Any): ...

MOCK_WRAPPER: Any
MOCK_THEOREM: Any
MOCK_PREMISE_SET: Any

class ActionGeneratorTest(parameterized.TestCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    tree: Any = ...
    node: Any = ...
    def setUp(self) -> None: ...
    def test_action_generator_hol_light_tactics_sanity_check(self): ...
    def test_action_generator_no_parameter_tactic(self) -> None: ...
    def test_action_generator_unknown_parameter_tactic(self) -> None: ...
    def test_action_generator_theorem_parameter_tactic(self) -> None: ...
    def test_action_generator_theorem_list_parameter_tactic(self, use_embedding_store: Any) -> None: ...
    def test_compute_parameter_string(self, types: Any, expected_params: Any, pass_no_arguments: Any) -> None: ...
    def test_compute_parameter_string_unknown(self) -> None: ...
