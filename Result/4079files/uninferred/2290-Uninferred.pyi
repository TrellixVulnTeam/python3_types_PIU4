import torch.nn.functional as nn
from .base_network import BaseNet
from typing import Any, Optional

logger: Any

def infer_conv_size(w: Any, k: Any, s: Any, p: Any): ...

class SimpleNet(nn.Module):
    conv1: Any = ...
    conv2: Any = ...
    conv2_drop: Any = ...
    fc1: Any = ...
    fc2: Any = ...
    def __init__(self) -> None: ...
    def forward(self, x: Any): ...

class SimpleConvEncoder(BaseNet):
    def __init__(self, shape: Any, dim_out: Optional[Any] = ..., dim_h: int = ..., fully_connected_layers: Optional[Any] = ..., nonlinearity: str = ..., output_nonlinearity: Optional[Any] = ..., f_size: int = ..., stride: int = ..., pad: int = ..., min_dim: int = ..., n_steps: Optional[Any] = ..., normalize_input: bool = ..., spectral_norm: bool = ..., last_conv_nonlinearity: bool = ..., last_batchnorm: bool = ..., **layer_args: Any) -> None: ...
    def next_size(self, dim_x: Any, dim_y: Any, k: Any, s: Any, p: Any): ...
