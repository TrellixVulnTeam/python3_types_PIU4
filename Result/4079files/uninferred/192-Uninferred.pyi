from .._base_provider import Provider
from typing import Any, Optional, Sequence

logger: Any

class LXD(Provider):
    _PROJECT_DEVICE_NAME: str = ...
    _PROJECT_EXPORTED_PRIME_NAME: str = ...
    _LXD_BIN: Any = ...
    _LXC_BIN: Any = ...
    @classmethod
    def ensure_provider(cls) -> None: ...
    @classmethod
    def setup_provider(cls: Any, echoer: Any) -> None: ...
    @classmethod
    def _get_provider_name(cls): ...
    @classmethod
    def _get_is_snap_injection_capable(cls: Any) -> bool: ...
    def _run(self, command: Sequence[str], hide_output: bool=...) -> Optional[bytes]: ...
    _container: Any = ...
    def _launch(self) -> None: ...
    def _start(self) -> None: ...
    def _stop(self) -> None: ...
    def _push_file(self, source: str, destination: str) -> None: ...
    _lxd_client: Any = ...
    def __init__(self, project: Any, echoer: Any, *, is_ephemeral: bool=...) -> None: ...
    def create(self) -> None: ...
    def destroy(self) -> None: ...
    def mount_project(self) -> None: ...
    def _mount_prime_directory(self) -> bool: ...
    def clean_project(self) -> bool: ...
    def pull_file(self, name: str, destination: str, delete: bool=...) -> None: ...
    def shell(self) -> None: ...
    def _ensure_container_running(self) -> None: ...
