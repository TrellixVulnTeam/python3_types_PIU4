import pymysql
from .kvetch import EdgeData, IndexDefinition as IndexDefinition, IndexEntry, KvetchData as KvetchData, KvetchShard, StoredIdEdgeDefinition as StoredIdEdgeDefinition
from graphscale.sql import ConnectionInfo as ConnectionInfo
from typing import Any, Dict, Iterator, List
from uuid import UUID

class KvetchDbSingleConnectionPool:
    conn_info: Any = ...
    def __init__(self, conn_info: ConnectionInfo) -> None: ...
    def create_safe_conn(self) -> Iterator[pymysql.Connection]: ...

class KvetchDbShard(KvetchShard):
    _pool: Any = ...
    def __init__(self, pool: KvetchDbSingleConnectionPool) -> None: ...
    def create_safe_conn(self) -> Any: ...
    async def gen_object(self, obj_id: UUID) -> KvetchData: ...
    async def gen_objects(self, ids: List[UUID]) -> Dict[UUID, KvetchData]: ...
    async def gen_objects_of_type(self, type_id: int, after: UUID=..., first: int=...) -> Dict[UUID, KvetchData]: ...
    async def gen_insert_index_entry(self, index: IndexDefinition, index_value: Any, target_id: UUID) -> None: ...
    async def gen_delete_index_entry(self, index: IndexDefinition, index_value: Any, target_id: UUID) -> None: ...
    async def gen_insert_edge(self, edge_definition: StoredIdEdgeDefinition, from_id: UUID, to_id: UUID, data: KvetchData=...) -> Any: ...
    async def gen_insert_object(self, new_id: UUID, type_id: int, data: KvetchData) -> UUID: ...
    async def gen_insert_objects(self, new_ids: List[UUID], type_id: int, datas: List[KvetchData]) -> List[UUID]: ...
    async def gen_update_object(self, obj_id: UUID, data: KvetchData) -> None: ...
    async def gen_delete_object(self, obj_id: UUID) -> None: ...
    async def gen_edges(self, edge_definition: StoredIdEdgeDefinition, from_id: UUID, after: UUID=..., first: int=...) -> List[EdgeData]: ...
    async def gen_edge_ids(self, edge_definition: StoredIdEdgeDefinition, from_id: UUID, after: UUID=..., first: int=...) -> List[UUID]: ...
    async def gen_index_entries(self, index: IndexDefinition, value: Any) -> List[IndexEntry]: ...

def _kv_shard_get_objects_by_type(shard_conn: pymysql.Connection, type_id: int, after: UUID=..., first: int=...) -> Dict[UUID, KvetchData]: ...
def _kv_shard_get_object(shard_conn: pymysql.Connection, obj_id: UUID) -> KvetchData: ...
def _kv_shard_get_objects(shard_conn: pymysql.Connection, obj_ids: List[UUID]) -> Dict[UUID, KvetchData]: ...
def _kv_shard_insert_object(shard_conn: pymysql.Connection, new_id: UUID, type_id: int, data: KvetchData) -> UUID: ...
def _kv_shard_insert_objects(shard_conn: pymysql.Connection, new_ids: List[UUID], type_id: int, datas: List[KvetchData]) -> List[UUID]: ...
def _kv_shard_replace_object(shard_conn: pymysql.Connection, obj_id: UUID, data: KvetchData) -> None: ...
def _kv_shard_delete_object(shard_conn: pymysql.Connection, obj_id: UUID) -> None: ...
def _to_sql_value(value: Any) -> Any: ...
def _kv_shard_insert_index_entry(shard_conn: pymysql.Connection, index_name: str, index_column: str, index_value: str, target_id: UUID) -> None: ...
def _kv_shard_delete_index_entry(shard_conn: pymysql.Connection, index_name: str, index_column: str, index_value: Any, target_id: UUID) -> None: ...
def _kv_shard_insert_edge(shard_conn: pymysql.Connection, edge_id: int, from_id: UUID, to_id: UUID, data: KvetchData) -> None: ...
def _kv_shard_get_edges(shard_conn: pymysql.Connection, edge_id: int, from_id: UUID, after: UUID, first: int) -> List[EdgeData]: ...
def _kv_shard_get_index_entries(shard_conn: pymysql.Connection, index_name: str, index_column: str, index_value: Any) -> List[IndexEntry]: ...
