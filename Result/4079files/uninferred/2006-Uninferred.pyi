from typing import Any

class Evidence:
    def init_config(self, evidence: Any, chars_vocab: Any) -> None: ...
    def dump_config(self): ...
    @staticmethod
    def read_config(js: Any, chars_vocab: Any): ...
    def read_data_point(self, program: Any) -> None: ...
    def set_chars_vocab(self, data: Any) -> None: ...
    def wrangle(self, data: Any) -> None: ...
    def placeholder(self, config: Any) -> None: ...
    def exists(self, inputs: Any) -> None: ...
    def init_sigma(self, config: Any) -> None: ...
    def encode(self, inputs: Any, config: Any) -> None: ...
    def evidence_loss(self, psi: Any, encoding: Any, config: Any) -> None: ...

class APICalls(Evidence):
    def read_data_point(self, program: Any): ...
    chars: Any = ...
    vocab: Any = ...
    vocab_size: Any = ...
    def set_chars_vocab(self, data: Any): ...
    def wrangle(self, data: Any): ...
    def placeholder(self, config: Any): ...
    def exists(self, inputs: Any): ...
    sigma: Any = ...
    def init_sigma(self, config: Any) -> None: ...
    def encode(self, inputs: Any, config: Any): ...
    def evidence_loss(self, psi: Any, encoding: Any, config: Any): ...
    @staticmethod
    def from_call(callnode: Any): ...

class Types(Evidence):
    def read_data_point(self, program: Any): ...
    chars: Any = ...
    vocab: Any = ...
    vocab_size: Any = ...
    def set_chars_vocab(self, data: Any): ...
    def wrangle(self, data: Any): ...
    def placeholder(self, config: Any): ...
    def exists(self, inputs: Any): ...
    sigma: Any = ...
    def init_sigma(self, config: Any) -> None: ...
    def encode(self, inputs: Any, config: Any): ...
    def evidence_loss(self, psi: Any, encoding: Any, config: Any): ...
    @staticmethod
    def get_types_re(s: Any): ...
    @staticmethod
    def from_call(callnode: Any): ...

class Keywords(Evidence):
    lemmatizer: Any = ...
    def __init__(self) -> None: ...
    STOP_WORDS: Any = ...
    def lemmatize(self, word: Any): ...
    def read_data_point(self, program: Any): ...
    chars: Any = ...
    vocab: Any = ...
    vocab_size: Any = ...
    def set_chars_vocab(self, data: Any): ...
    def wrangle(self, data: Any): ...
    def placeholder(self, config: Any): ...
    def exists(self, inputs: Any): ...
    sigma: Any = ...
    def init_sigma(self, config: Any) -> None: ...
    def encode(self, inputs: Any, config: Any): ...
    def evidence_loss(self, psi: Any, encoding: Any, config: Any): ...
    @staticmethod
    def split_camel(s: Any): ...
    @staticmethod
    def from_call(callnode: Any): ...

class Javadoc(Evidence):
    def read_data_point(self, program: Any, infer: bool = ...): ...
    chars: Any = ...
    vocab: Any = ...
    vocab_size: Any = ...
    def set_dicts(self, data: Any) -> None: ...
