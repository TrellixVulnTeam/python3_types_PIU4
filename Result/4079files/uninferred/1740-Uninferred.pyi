from typing import Any, Optional

class TableConnection:
    _hash_keyname: Any = ...
    _range_keyname: Any = ...
    table_name: Any = ...
    connection: Any = ...
    def __init__(self, table_name: Any, region: Optional[Any] = ..., host: Optional[Any] = ..., session_cls: Optional[Any] = ..., request_timeout_seconds: Optional[Any] = ..., max_retry_attempts: Optional[Any] = ..., base_backoff_ms: Optional[Any] = ..., aws_access_key_id: Optional[Any] = ..., aws_secret_access_key: Optional[Any] = ...) -> None: ...
    def get_meta_table(self, refresh: bool = ...): ...
    def delete_item(self, hash_key: Any, range_key: Optional[Any] = ..., condition: Optional[Any] = ..., expected: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., return_values: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., return_item_collection_metrics: Optional[Any] = ...): ...
    def update_item(self, hash_key: Any, range_key: Optional[Any] = ..., actions: Optional[Any] = ..., attribute_updates: Optional[Any] = ..., condition: Optional[Any] = ..., expected: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., return_item_collection_metrics: Optional[Any] = ..., return_values: Optional[Any] = ...): ...
    def put_item(self, hash_key: Any, range_key: Optional[Any] = ..., attributes: Optional[Any] = ..., condition: Optional[Any] = ..., expected: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., return_values: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., return_item_collection_metrics: Optional[Any] = ...): ...
    def batch_write_item(self, put_items: Optional[Any] = ..., delete_items: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., return_item_collection_metrics: Optional[Any] = ...): ...
    def batch_get_item(self, keys: Any, consistent_read: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., attributes_to_get: Optional[Any] = ...): ...
    def get_item(self, hash_key: Any, range_key: Optional[Any] = ..., consistent_read: bool = ..., attributes_to_get: Optional[Any] = ...): ...
    def rate_limited_scan(self, filter_condition: Optional[Any] = ..., attributes_to_get: Optional[Any] = ..., page_size: Optional[Any] = ..., limit: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., scan_filter: Optional[Any] = ..., segment: Optional[Any] = ..., total_segments: Optional[Any] = ..., exclusive_start_key: Optional[Any] = ..., timeout_seconds: Optional[Any] = ..., read_capacity_to_consume_per_second: Optional[Any] = ..., allow_rate_limited_scan_without_consumed_capacity: Optional[Any] = ..., max_sleep_between_retry: Optional[Any] = ..., max_consecutive_exceptions: Optional[Any] = ..., consistent_read: Optional[Any] = ..., index_name: Optional[Any] = ...): ...
    def scan(self, filter_condition: Optional[Any] = ..., attributes_to_get: Optional[Any] = ..., limit: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., scan_filter: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., segment: Optional[Any] = ..., total_segments: Optional[Any] = ..., exclusive_start_key: Optional[Any] = ..., consistent_read: Optional[Any] = ..., index_name: Optional[Any] = ...): ...
    def query(self, hash_key: Any, range_key_condition: Optional[Any] = ..., filter_condition: Optional[Any] = ..., attributes_to_get: Optional[Any] = ..., consistent_read: bool = ..., exclusive_start_key: Optional[Any] = ..., index_name: Optional[Any] = ..., key_conditions: Optional[Any] = ..., query_filters: Optional[Any] = ..., limit: Optional[Any] = ..., return_consumed_capacity: Optional[Any] = ..., scan_index_forward: Optional[Any] = ..., conditional_operator: Optional[Any] = ..., select: Optional[Any] = ...): ...
    def describe_table(self): ...
    def delete_table(self): ...
    def update_table(self, read_capacity_units: Optional[Any] = ..., write_capacity_units: Optional[Any] = ..., global_secondary_index_updates: Optional[Any] = ...): ...
    def create_table(self, attribute_definitions: Optional[Any] = ..., key_schema: Optional[Any] = ..., read_capacity_units: Optional[Any] = ..., write_capacity_units: Optional[Any] = ..., global_secondary_indexes: Optional[Any] = ..., local_secondary_indexes: Optional[Any] = ..., stream_specification: Optional[Any] = ...): ...
