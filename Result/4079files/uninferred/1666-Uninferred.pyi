import unittest
from typing import Any
from urllib.parse import SplitResult as SplitResult

query: str
expected_response: Any
error_message: str
mock_uri: str
keyspace: str

class MockEngine:
    headers: Any = ...
    body: Any = ...
    params: Any = ...
    _httmock: Any = ...
    def __init__(self, status_code: int, response: Any): ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...

def engine_responding_ok() -> MockEngine: ...
def engine_responding_bad_request() -> MockEngine: ...

class TestGraphConstructor(unittest.TestCase):
    def test_open_accepts_no_arguments(self) -> None: ...
    def test_open_accepts_two_arguments(self) -> None: ...
    def test_open_accepts_keyword_arguments(self) -> None: ...

class TestExecute(unittest.TestCase):
    graph: Any = ...
    def setUp(self) -> None: ...
    def test_executing_a_valid_query_returns_expected_response(self) -> None: ...
    def test_executing_a_query_sends_expected_accept_header(self) -> None: ...
    def test_executing_a_query_sends_query_in_body(self) -> None: ...
    def test_executing_a_query_sends_keyspace_in_params(self) -> None: ...
    def test_executing_a_query_sends_infer_false_in_params(self) -> None: ...
    def test_executing_a_query_with_inference_sends_infer_true_in_params(self) -> None: ...
    def test_executing_a_query_sends_materialise_in_params(self) -> None: ...
    def test_executing_an_invalid_query_throws_grakn_exception(self) -> None: ...
    def test_executing_an_insert_query_returns_expected_response(self) -> None: ...
    def test_executing_a_query_without_a_server_throws_grakn_exception(self) -> None: ...
