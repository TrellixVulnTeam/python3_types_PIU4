from abc import ABCMeta, abstractmethod
from lyra.core.expressions import Expression as Expression, VariableIdentifier as VariableIdentifier
from lyra.core.types import LyraType as LyraType
from typing import Any, List

class ProgramPoint:
    _line: Any = ...
    _column: Any = ...
    def __init__(self, line: int, column: int) -> None: ...
    @property
    def line(self): ...
    @property
    def column(self): ...
    def __eq__(self, other: ProgramPoint) -> Any: ...
    def __hash__(self) -> Any: ...
    def __ne__(self, other: ProgramPoint) -> Any: ...
    def __repr__(self): ...

class Statement(metaclass=ABCMeta):
    _pp: Any = ...
    def __init__(self, pp: ProgramPoint) -> None: ...
    @property
    def pp(self): ...
    @abstractmethod
    def __repr__(self) -> Any: ...

class LiteralEvaluation(Statement):
    _literal: Any = ...
    def __init__(self, pp: ProgramPoint, literal: Expression) -> None: ...
    @property
    def literal(self): ...
    def __repr__(self): ...

class ExpressionAccess(Statement, metaclass=ABCMeta):
    _typ: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType) -> None: ...
    @property
    def typ(self): ...

class VariableAccess(ExpressionAccess):
    _variable: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, variable: VariableIdentifier) -> None: ...
    @property
    def variable(self): ...
    def __repr__(self): ...

class ListDisplayAccess(ExpressionAccess):
    _items: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, items: List[Statement]) -> None: ...
    @property
    def items(self): ...
    def __repr__(self): ...

class TupleDisplayAccess(ExpressionAccess):
    _items: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, items: List[Statement]) -> None: ...
    @property
    def items(self): ...
    def __repr__(self): ...

class SetDisplayAccess(ExpressionAccess):
    _items: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, items: List[Statement]) -> None: ...
    @property
    def items(self): ...
    def __repr__(self): ...

class DictDisplayAccess(ExpressionAccess):
    _keys: Any = ...
    _values: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, keys: List[Statement], values: List[Statement]) -> None: ...
    @property
    def keys(self): ...
    @property
    def values(self): ...
    def __repr__(self): ...

class SubscriptionAccess(ExpressionAccess):
    _target: Any = ...
    _key: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, target: Statement, key: Statement) -> None: ...
    @property
    def target(self): ...
    @property
    def key(self): ...
    def __repr__(self): ...

class SlicingAccess(ExpressionAccess):
    _target: Any = ...
    _lower: Any = ...
    _upper: Any = ...
    _stride: Any = ...
    def __init__(self, pp: ProgramPoint, typ: LyraType, target: Statement, lower: Statement, upper: Statement=..., stride: Statement=...) -> None: ...
    @property
    def target(self): ...
    @property
    def lower(self): ...
    @property
    def upper(self): ...
    @property
    def stride(self): ...
    def __repr__(self): ...

class Assignment(Statement):
    _left: Any = ...
    _right: Any = ...
    def __init__(self, pp: ProgramPoint, left: ExpressionAccess, right: Statement) -> None: ...
    @property
    def left(self): ...
    @property
    def right(self): ...
    def __repr__(self): ...

class Raise(Statement):
    def __init__(self, pp: ProgramPoint) -> None: ...
    def __repr__(self): ...

class Call(Statement):
    _name: Any = ...
    _arguments: Any = ...
    _typ: Any = ...
    _forloop: Any = ...
    def __init__(self, pp: ProgramPoint, name: str, arguments: List[Statement], typ: LyraType, forloop: bool=...) -> None: ...
    @property
    def name(self): ...
    @property
    def arguments(self): ...
    @property
    def typ(self): ...
    @property
    def forloop(self): ...
    def __repr__(self): ...
