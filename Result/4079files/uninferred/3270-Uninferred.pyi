import enum
import irc.connection
from typing import Any

_logger: Any
IRC_RATE_LIMIT: Any
RECONNECT_MIN_INTERVAL: int
RECONNECT_MAX_INTERVAL: int

class BattleState(enum.Enum):
    waiting: str = ...
    betting: str = ...
    battle: str = ...
    finished: str = ...

class TPPBotFacade:
    _client: Any = ...
    def __init__(self, client: Client) -> None: ...
    def place_buy_order(self, team: str, price: int=..., amount: int=..., duration: int=...) -> Any: ...
    def place_sell_order(self, team: str, price: int=..., amount: int=..., duration: int=...) -> Any: ...
    def get_balance(self) -> None: ...
    def _send_tpp_bot_whisper(self, command: Any) -> None: ...

class BetBot:
    MIN_BALANCE: int = ...
    TIER_BALANCE_THRESHOLD: Any = ...
    TIER_BUY_PRICES: Any = ...
    TIER_SELL_PRICES: Any = ...
    TIER_BET_CHANCES: Any = ...
    _battle_state: Any = ...
    _tpp_bot: Any = ...
    _bet_placed: bool = ...
    _token_balance: int = ...
    _cool_off_timestamp: int = ...
    def __init__(self, tpp_bot: TPPBotFacade) -> None: ...
    def set_token_balance(self, tokens: int) -> Any: ...
    def start_betting(self) -> None: ...
    def start_battle(self) -> None: ...
    def stop_battle(self) -> None: ...
    def reset(self, soft: bool = ...) -> None: ...
    def _place_bet(self, tier_index: Any) -> None: ...

class Client(irc.client.SimpleIRCClient):
    _reconnect_interval: Any = ...
    _running: bool = ...
    _tpp_bot_facade: Any = ...
    _bet_bot: Any = ...
    def __init__(self) -> None: ...
    def _keep_alive(self) -> None: ...
    def autoconnect(self, *args: Any, **kwargs: Any) -> None: ...
    def _schedule_reconnect(self) -> None: ...
    def on_disconnect(self, connection: Any, event: Any) -> None: ...
    def stop(self) -> None: ...
    def on_welcome(self, connection: Any, event: Any) -> None: ...
    def on_pubmsg(self, connection: Any, event: Any) -> None: ...
    def on_action(self, connection: Any, event: Any) -> None: ...
    def on_whisper(self, connection: Any, event: Any) -> None: ...
    def _process_message(self, event: Any) -> None: ...

def main() -> None: ...
