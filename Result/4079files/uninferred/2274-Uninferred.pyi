from contextlib import ContextDecorator
from kresd import Kresd as Kresd
from typing import Any, Dict, Optional

HINTS: Any

def resolve_hint(sock: Any, qname: Any) -> None: ...

class Proxy(ContextDecorator):
    EXECUTABLE: str = ...
    local_ip: Any = ...
    local_port: Any = ...
    upstream_ip: Any = ...
    upstream_port: Any = ...
    proxy: Any = ...
    def __init__(self, local_ip: str=..., local_port: Optional[int]=..., upstream_ip: str=..., upstream_port: Optional[int]=...) -> None: ...
    def get_args(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class TLSProxy(Proxy):
    EXECUTABLE: str = ...
    cert_path: Any = ...
    key_path: Any = ...
    close: Any = ...
    rehandshake: Any = ...
    force_tls13: Any = ...
    def __init__(self, local_ip: str=..., local_port: Optional[int]=..., upstream_ip: str=..., upstream_port: Optional[int]=..., certname: Optional[str]=..., close: Optional[int]=..., rehandshake: bool=..., force_tls13: bool=...) -> None: ...
    def get_args(self): ...

def kresd_tls_client(workdir: str, proxy: TLSProxy, kresd_tls_client_kwargs: Optional[Dict[Any, Any]]=..., kresd_fwd_target_kwargs: Optional[Dict[Any, Any]]=...) -> Kresd: ...
