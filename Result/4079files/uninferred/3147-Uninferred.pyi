from typing import Any, Optional

class Sniffer:
    def run(self) -> None: ...
    def _cb_interfaces_added(self, sender: Any, obj: Any, iface: Any, signal: Any, params: Any) -> None: ...
    def _cb_interfaces_removed(self, sender: Any, obj: Any, iface: Any, signal: Any, params: Any) -> None: ...
    def _cb_properties_changed(self, sender: Any, obj: Any, iface: Any, signal: Any, params: Any) -> None: ...
    def _cb_backup_registry(self): ...
    def _cb_connect_check(self): ...
    def _register_device(self, device: Any) -> None: ...
    def _register_service(self, path: Any, service: Any) -> None: ...
    def _register_characteristic(self, path: Any, characteristic: Any) -> None: ...
    def _register_descriptor(self, path: Any, descriptor: Any) -> None: ...
    def _connect(self, device: Any) -> None: ...
    def _find_device(self, device: Any): ...
    def _find_device_by_path(self, path: Any): ...
    output_path: Any = ...
    backup_interval: Any = ...
    attempt_connection: Any = ...
    threshold_rssi: Any = ...
    queueing_interval: Any = ...
    queued_connections: int = ...
    adapter: Any = ...
    _log: Any = ...
    registry: Any = ...
    def __init__(self, output_path: Optional[Any] = ..., backup_interval: int = ..., resume: bool = ..., attempt_connection: bool = ..., threshold_rssi: int = ..., queueing_interval: int = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any): ...
