from collections import OrderedDict
from typing import Any, Optional

_undefined: Any

class Argument:
    __slots__: Any = ...
    default: Any = ...
    show: Any = ...
    validator: Any = ...
    def __init__(self, validator: Any, default: Any = ..., show: bool = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    @property
    def optional(self): ...
    def validate(self, value: Any = ..., name: Optional[Any] = ...): ...
    __call__: Any = ...

class TypeSignature(OrderedDict):
    __slots__: Any = ...
    @classmethod
    def from_dtypes(cls, dtypes: Any): ...
    def validate(self, *args: Any, **kwargs: Any): ...
    __call__: Any = ...
    def names(self): ...

class AnnotableMeta(type):
    @classmethod
    def __prepare__(metacls: Any, name: Any, bases: Any, **kwds: Any): ...
    def __new__(meta: Any, name: Any, bases: Any, dct: Any): ...

class Annotable(metaclass=AnnotableMeta):
    __slots__: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _validate(self) -> None: ...
    @property
    def args(self): ...
    @property
    def argnames(self): ...
