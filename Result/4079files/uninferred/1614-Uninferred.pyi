import unittest
from typing import Any

pure: Any
unit: Any

class TestList(unittest.TestCase):
    def test_list_null(self) -> None: ...
    def test_list_not_null_after_cons_and_tail(self) -> None: ...
    def test_list_not_null_after_cons(self) -> None: ...
    def test_list_head(self) -> None: ...
    def test_list_tail_head(self) -> None: ...
    def test_list_tail_tail_null(self) -> None: ...
    def test_list_list(self) -> None: ...
    def test_list_length_empty(self) -> None: ...
    def test_list_length_non_empty(self) -> None: ...
    def test_list_length_multiple(self) -> None: ...
    def test_list_append_empty(self) -> None: ...
    def test_list_append_empty_other(self) -> None: ...
    def test_list_append_non_empty(self) -> None: ...

class TestListFunctor(unittest.TestCase):
    def test_list_functor_map(self): ...
    def test_list_functor_law_1(self) -> None: ...
    def test_list_functor_law2(self): ...

class TestListApplicative(unittest.TestCase):
    def test_list_applicative_law_functor(self): ...
    def test_list_applicative_law_identity(self) -> None: ...
    def test_identity_applicative_law_composition(self): ...
    def test_identity_applicative_law_composition_empty(self): ...
    def test_identity_applicative_law_composition_range(self): ...
    def test_list_applicative_binary_func_singleton(self): ...
    def test_list_applicative_unary_func(self): ...
    def test_list_applicative_binary_func(self): ...
    def test_list_applicative_empty_func(self) -> None: ...
    def test_list_applicative_binary_func_empty_arg_1(self): ...
    def test_list_applicative_binary_func_empty_arg_2(self): ...

class TestListMonad(unittest.TestCase):
    def test_list_monad_bind(self): ...
    def test_list_monad_empty_bind(self): ...
    def test_list_monad_law_left_identity(self): ...
    def test_list_monad_law_right_identity(self) -> None: ...
    def test_list_monad_law_associativity(self): ...
    def test_list_monad_law_associativity_empty(self): ...
    def test_list_monad_law_associativity_range(self): ...
