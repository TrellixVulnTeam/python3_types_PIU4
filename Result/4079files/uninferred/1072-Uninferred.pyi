import pathlib
from typing import Any, Optional

logger: Any
HTTP_HEADERS: Any

class UrlDescriptor:
    GITHUB_LATEST_TEMPLATE: str = ...
    _url: Any = ...
    _github_profile: Any = ...
    _github_repo: Any = ...
    _github_latest_release_url: Any = ...
    _filename: Any = ...
    def __init__(self, url: str) -> None: ...
    def __repr__(self): ...
    def get_github_package_url(self) -> Optional[str]: ...
    def _parse_github_repo_url(self): ...
    def parse_url(self) -> None: ...
    @property
    def url(self): ...
    @property
    def is_github_repo_url(self): ...
    @property
    def github_profile(self) -> str: ...
    @property
    def github_repo(self): ...
    @property
    def has_filename(self): ...

class UrlDownloader:
    _current_url_desc: Any = ...
    _download_path: Any = ...
    def __init__(self, url_descriptor: Optional[UrlDescriptor]=...) -> None: ...
    @property
    def current_url_descriptor(self): ...
    @current_url_descriptor.setter
    def current_url_descriptor(self, value: UrlDescriptor) -> Any: ...
    @property
    def download_path(self): ...
    def download_from_url(self, url: str, download_path: pathlib.Path) -> Any: ...
    def download_from_url_descriptor(self, url_descriptor: Optional[UrlDescriptor]=..., download_path: Optional[pathlib.Path]=...) -> bool: ...
    def download_latest_github_release(self, url: Optional[str]=..., download_path: Optional[pathlib.Path]=...) -> Optional[pathlib.Path]: ...
    @staticmethod
    def download_file(url: str, download_path: pathlib.Path) -> bool: ...
    def extract(self, package_path: Optional[pathlib.Path]=..., extract_path: Optional[pathlib.Path]=..., password: str=...) -> bool: ...
    @staticmethod
    def is_zip_file(file_path: pathlib.Path) -> bool: ...
    @staticmethod
    def is_zipped_dir(file_path: pathlib.Path, password: Optional[str]=...) -> bool: ...
    @staticmethod
    def zipped_dir_name(file_path: pathlib.Path, pwd: Optional[str]=...) -> Optional[pathlib.Path]: ...

def copy_to_dir(source_dir: pathlib.Path, dest_dir: pathlib.Path) -> bool: ...
def banner_execute() -> pathlib.Path: ...
def main(args: Any): ...
