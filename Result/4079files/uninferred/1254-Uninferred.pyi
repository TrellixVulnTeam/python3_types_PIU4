from lyra.abstract_domains.assumption.assumption_domain import InputMixin, JSONMixin
from lyra.abstract_domains.numerical.sign_domain import SignLattice, SignState
from lyra.core.expressions import Expression as Expression, Input as Input, VariableIdentifier
from typing import Any, Optional, Set

class QuantityLattice(SignLattice, JSONMixin):
    def to_json(self) -> str: ...
    @staticmethod
    def from_json(json: str) -> JSONMixin: ...

class QuantityState(SignState, InputMixin):
    def __init__(self, variables: Set[VariableIdentifier], precursory: InputMixin=...): ...
    def replace(self, variable: VariableIdentifier, expression: Expression) -> QuantityState: ...
    def unify(self, other: QuantityState) -> QuantityState: ...
    class ExpressionRefinement(SignState.ExpressionRefinement):
        def visit_Input(self, expr: Input, evaluation: Any=..., value: Any=..., state: Any=...) -> Any: ...
        def visit_BinaryArithmeticOperation(self, expr: Any, evaluation: Optional[Any] = ..., value: Optional[Any] = ..., state: Optional[Any] = ...): ...
    _refinement: Any = ...
