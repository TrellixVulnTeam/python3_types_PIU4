from io import FileIO
from typing import Any, List

VERSION: str
SANDBOX_HOME_DIR_NAME: str
SANDBOX_WORKING_DIR_NAME: Any
SANDBOX_USERNAME: str
SANDBOX_DOCKER_IMAGE: Any

class AutograderSandbox:
    _name: Any = ...
    _docker_image: Any = ...
    _linux_uid: Any = ...
    _allow_network_access: Any = ...
    _environment_variables: Any = ...
    _is_running: bool = ...
    _container_create_timeout: Any = ...
    debug: Any = ...
    def __init__(self, name: str=..., docker_image: str=..., allow_network_access: bool=..., environment_variables: dict=..., container_create_timeout: int=..., debug: Any=...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
    def reset(self) -> None: ...
    def restart(self) -> None: ...
    def _create_and_start(self) -> None: ...
    def _destroy(self) -> None: ...
    def _stop(self) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def docker_image(self) -> str: ...
    @property
    def allow_network_access(self) -> bool: ...
    @allow_network_access.setter
    def allow_network_access(self, value: bool) -> Any: ...
    @property
    def environment_variables(self) -> dict: ...
    def run_command(self, args: List[str], max_num_processes: int=..., max_stack_size: int=..., max_virtual_memory: int=..., as_root: bool=..., stdin: FileIO=..., timeout: int=..., check: bool=..., truncate_stdout: int=..., truncate_stderr: int=...) -> CompletedCommand: ...
    def add_files(self, *filenames: str, owner: str=..., read_only: bool=...) -> Any: ...
    def add_and_rename_file(self, filename: str, new_filename: str) -> None: ...
    def _chown_files(self, filenames: Any) -> None: ...

class CompletedCommand:
    return_code: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    timed_out: Any = ...
    stdout_truncated: Any = ...
    stderr_truncated: Any = ...
    def __init__(self, return_code: int, stdout: FileIO, stderr: FileIO, timed_out: bool, stdout_truncated: bool, stderr_truncated: bool) -> None: ...

_REDIS_SETTINGS: Any
_NEXT_UID_KEY: str

def _get_next_linux_uid(): ...
