from core.generic import mixins, views
from django.views.generic.detail import SingleObjectMixin
from djutils.views.generic import SortMixin
from typing import Any

class Search(mixins.PermissionRequiredMixin, SortMixin, mixins.FormMixin, views.ListView):
    template_name: str = ...
    form_class: Any = ...
    paginate_by: int = ...
    title: str = ...
    model: Any = ...
    permission_required: str = ...
    sort_params: Any = ...
    def get_paginate_by(self, queryset: Any): ...
    def get_breadcrumbs(self): ...
    def get_queryset(self): ...

search: Any

class Edit(mixins.PermissionRequiredMixin, mixins.FormAndModelFormsetMixin, views.EditView):
    template_name: str = ...
    form_class: Any = ...
    model: Any = ...
    formset_model: Any = ...
    permission_required: str = ...
    title_create: str = ...
    def get_success_url(self): ...
    def get_form_kwargs(self): ...
    def get_formset_initial(self): ...
    def get_breadcrumbs(self): ...
    object: Any = ...
    def form_valid(self, form: Any, formset: Any): ...
    def get_context_data(self, *args: Any, **kwargs: Any): ...

edit: Any

class Copy(mixins.PermissionRequiredMixin, views.FormView):
    template_name: str = ...
    form_class: Any = ...
    permission_required: str = ...
    title: str = ...
    def get_breadcrumbs(self): ...
    def get_initial(self): ...
    def get_object(self): ...
    new_template: Any = ...
    def form_valid(self, form: Any): ...
    def get_success_url(self): ...

copy: Any

class Delete(mixins.PermissionRequiredMixin, views.DeleteView):
    template_name: str = ...
    model: Any = ...
    permission_required: str = ...
    success_url: Any = ...
    def get_title(self): ...
    def get_breadcrumbs(self): ...

delete: Any

class Run(mixins.PermissionRequiredMixin, SingleObjectMixin, views.View):
    permission_required: str = ...
    model: Any = ...
    def get(self, request: Any, *args: Any, **kwargs: Any): ...

run: Any

class Inventory(mixins.PermissionRequiredMixin, SingleObjectMixin, views.View):
    permission_required: str = ...
    model: Any = ...
    def get(self, *args: Any, **kwargs: Any): ...

inventory: Any

class RepeatSettings(mixins.PermissionRequiredMixin, views.FormView):
    permission_required: str = ...
    form_class: Any = ...
    template_name: str = ...
    title: str = ...
    def get_breadcrumbs(self): ...
    def get_success_url(self): ...
    def get_form_kwargs(self): ...
    object: Any = ...
    def form_valid(self, form: Any): ...

repeat_settings: Any
