import tensorflow as tf
from demeter.rl import Policy
from typing import Any, Callable, Dict, List, Tuple, Union

class DiscreteActor(Policy):
    dist_model: Any = ...
    obs_features: Any = ...
    action_features: Any = ...
    def __init__(self, dist_model: tf.keras.Model, obs_features: Callable[[Any], Dict[str, tf.Tensor]]=..., action_features: Callable[[Any], Dict[str, tf.Tensor]]=...) -> None: ...
    def sample(self, obs: Any, featurize_inputs: bool=...) -> Any: ...
    @staticmethod
    def sample_action(dist: Union[tf.Tensor, Dict[str, tf.Tensor]]) -> Any: ...
    def log_pdf(self, action: Union[tf.Tensor, Dict[str, tf.Tensor]], dist: Union[str, Dict[str, tf.Tensor]]) -> tf.Tensor: ...
    def sample_eval(self, obs: Any, **kwargs: Any) -> Dict[str, tf.Tensor]: ...
    def eval(self, obs: Any, action: Any, featurize_inputs: bool=...) -> Tuple[Union[tf.Tensor, Dict[str, tf.Tensor]], Union[tf.Tensor, Dict[str, tf.Tensor]], tf.Tensor]: ...
    def features(self, obs: Any=..., action: Any=..., featurize_inputs: bool=...) -> Any: ...
    @property
    def variables(self) -> List[tf.Variable]: ...
