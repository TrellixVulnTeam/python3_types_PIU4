from typing import Any, Optional
from voxpopuli import PhonemeList as PhonemeList

class TreeNode:
    children: Any = ...
    leaves: Any = ...
    child_leaves_count: int = ...
    def __init__(self) -> None: ...
    def __getitem__(self, item: Any): ...
    @property
    def total_leaves_count(self): ...
    def insert(self, leaf: Leaf, current_pho_index: Any) -> Any: ...
    def find_random(self): ...
    def find(self, phoneme_list: PhonemeList, original_string: str) -> Any: ...
    def to_dict(self): ...

class RhymeTree(TreeNode):
    voice: Any = ...
    children: Any = ...
    def __init__(self, rhyming_lang: str = ...) -> None: ...
    def insert_rhyme(self, rhyme_string: Any, data: Optional[Any] = ...) -> None: ...
    def find_rhyme(self, string: Any): ...
    def save(self, filepath: Any) -> None: ...
    @classmethod
    def from_pickle(cls, pickle_filepath: Any): ...
    @classmethod
    def from_text_file(cls, textfile_filepath: Any, lang: str = ..., separator: Optional[Any] = ...): ...
    @classmethod
    def from_word_list(cls, input_list: Any, lang: str = ...): ...
    def to_dict(self): ...

class Leaf:
    text: Any = ...
    phonemes: Any = ...
    total_leaves_count: int = ...
    data: Any = ...
    def __init__(self, string: Any, phonemic_form: Any) -> None: ...
    def __repr__(self): ...
    def __str__(self): ...
    @staticmethod
    def clean_silences(phoneme_list: Any): ...
    @classmethod
    def from_string(cls, string: Any, voxpopuli_voice: Any): ...
    def to_dict(self): ...
    def find(self, phoneme_list: PhonemeList, original_string: str) -> Any: ...
    def find_random(self): ...
