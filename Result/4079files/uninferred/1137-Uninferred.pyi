from .base import BaseTestRunner
from ethereumd.poller import Poller
from typing import Any, Optional

class FakePoller(Poller):
    _cmds: Any = ...
    def __init__(self, blocknotify: Optional[Any] = ..., walletnotify: Optional[Any] = ..., alertnotify: Optional[Any] = ...) -> None: ...

class TestPoller(BaseTestRunner):
    run_with_node: bool = ...
    async def test_alertnotify_valid_func_without_errors(self) -> None: ...
    async def test_alertnotify_invalid_func_with_error_raise_no_notify(self) -> None: ...
    async def test_alertnotify_invalid_func_with_error_raise_and_notify(self) -> None: ...
    async def test_call_blocknotify_and_has_block(self) -> None: ...
    async def test_call_blocknotify_and_has_no_block(self) -> None: ...
    async def test_call_walletnotify_and_has_trans(self) -> None: ...
    async def test_call_walletnotify_and_has_no_trans(self) -> None: ...
    async def test_method_has_command(self) -> None: ...
    async def test_method__is_account_trans_and_trans_exists(self) -> None: ...
    async def test_method__is_account_trans_and_trans_not_exists(self) -> None: ...
    async def test_method__build_filter_which_exists(self) -> None: ...
    async def test_method__build_filter_which_not_exists(self) -> None: ...
    async def test_method__poll_with_reconnect_when_droped(self): ...
    async def test_method__exec_command_exist_cmd(self) -> None: ...
    async def test_method__exec_command_some_error(self) -> None: ...
    async def test_method__exec_command_no_such_cmd(self) -> None: ...
