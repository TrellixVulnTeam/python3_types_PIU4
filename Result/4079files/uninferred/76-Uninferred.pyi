from autobahn.wamp.types import RegisterOptions, SubscribeOptions
from typing import Any, Callable, Dict, Type, TypeVar, Union

Procedure: Any
Subscriber: Any
T_Options = TypeVar('T_Options')

class WAMPRegistry:
    __slots__: Any = ...
    prefix: Any = ...
    procedure_defaults: Any = ...
    subscription_defaults: Any = ...
    procedures: Any = ...
    subscriptions: Any = ...
    exceptions: Any = ...
    def __init__(self, prefix: str=..., *, procedure_defaults: Union[RegisterOptions, Dict[str, Any]]=..., subscription_defaults: Union[SubscribeOptions, Dict[str, Any]]=...) -> None: ...
    def add_procedure(self, handler: Callable, name: str=..., options: Union[RegisterOptions, Dict[str, Any]]=...) -> Procedure: ...
    def procedure(self, name: Union[str, Callable]=..., options: Union[RegisterOptions, Dict[str, Any]]=...) -> Callable: ...
    def add_subscriber(self, handler: Callable, topic: str, options: Union[SubscribeOptions, Dict[str, Any]]=...) -> Subscriber: ...
    def subscriber(self, topic: str, options: Union[SubscribeOptions, Dict[str, Any]]=...) -> Callable: ...
    def map_exception(self, exc_type: Type[BaseException], code: str) -> None: ...
    def exception(self, error: str) -> Callable: ...
    def add_from(self, registry: WAMPRegistry, prefix: str=...) -> None: ...
    def __repr__(self, *args: Any, **kwargs: Any): ...
