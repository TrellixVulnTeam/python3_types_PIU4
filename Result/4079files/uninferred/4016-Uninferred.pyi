import abc
from typing import Any, Dict, List, Optional, Tuple, Type

SelectorType = Tuple[str, Optional[str]]
GraphType: Any

class CommandGraphNode(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def selector(self) -> Optional[str]: ...
    @property
    @abc.abstractmethod
    def selectors(self) -> List[SelectorType]: ...
    @property
    @abc.abstractmethod
    def parent(self) -> Optional[CommandGraphNode]: ...
    @property
    @abc.abstractmethod
    def children(self) -> List[str]: ...
    def navigate(self, name: str, selector: Optional[str]) -> CommandGraphNode: ...
    def call(self, name: str) -> CommandGraphCall: ...

class CommandGraphCall:
    _name: Any = ...
    _parent: Any = ...
    def __init__(self, name: str, parent: CommandGraphNode) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def selectors(self) -> List[SelectorType]: ...
    @property
    def parent(self) -> CommandGraphNode: ...

class CommandGraphRoot(CommandGraphNode):
    @property
    def selector(self) -> None: ...
    @property
    def selectors(self) -> List[SelectorType]: ...
    @property
    def parent(self) -> None: ...
    @property
    def children(self) -> List[str]: ...

class CommandGraphObject(CommandGraphNode, metaclass=abc.ABCMeta):
    _selector: Any = ...
    _parent: Any = ...
    def __init__(self, selector: Optional[str], parent: CommandGraphNode) -> None: ...
    @property
    def selector(self) -> Optional[str]: ...
    @property
    def selectors(self) -> List[SelectorType]: ...
    @property
    def parent(self) -> CommandGraphNode: ...
    @property
    @abc.abstractmethod
    def object_type(self) -> str: ...

class _BarGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

class _GroupGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

class _LayoutGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

class _ScreenGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

class _WidgetGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

class _WindowGraphNode(CommandGraphObject):
    object_type: str = ...
    children: Any = ...

_COMMAND_GRAPH_MAP: Dict[str, Type[CommandGraphObject]]
