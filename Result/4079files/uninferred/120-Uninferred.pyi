from typing import Any, Optional

python3: bool
file_store_content_lock: Any

class NinjaIOException(Exception): ...
class NinjaNoFileNameException(Exception): ...

class NinjaFileExistsException(Exception):
    filename: Any = ...
    def __init__(self, filename: str = ...) -> None: ...

def create_init_file(folderName: Any) -> None: ...
def create_init_file_complete(folderName: Any) -> None: ...
def create_folder(folderName: Any, add_init_file: bool = ...) -> None: ...
def create_tree_folders(folderName: Any) -> None: ...
def folder_exists(folderName: Any): ...
def file_exists(path: Any, fileName: str = ...): ...
def _search_coding_line(txt: Any): ...
def get_file_encoding(content: Any): ...
def read_file_content(fileName: Any): ...
def get_basename(fileName: Any): ...
def get_folder(fileName: Any): ...
def store_file_content(fileName: Any, content: Any, addExtension: bool = ..., newFile: bool = ...): ...
def open_project(path: Any): ...
def open_project_with_extensions(path: Any, extensions: Any): ...
def delete_file(path: Any, fileName: Optional[Any] = ...) -> None: ...
def delete_folder(path: Any, fileName: Optional[Any] = ...) -> None: ...
def rename_file(old: Any, new: Any): ...
def get_file_extension(fileName: Any): ...
def get_file_name(fileName: Any): ...
def get_module_name(fileName: Any): ...
def convert_to_relative(basePath: Any, fileName: Any): ...
def create_path(*args: Any): ...
def belongs_to_folder(path: Any, fileName: Any): ...
def get_last_modification(fileName: Any): ...
def has_write_permission(fileName: Any): ...
def check_for_external_modification(fileName: Any, old_mtime: Any): ...
def get_files_from_folder(folder: Any, ext: Any): ...
def is_supported_extension(filename: Any, extensions: Optional[Any] = ...): ...
def show_containing_folder(path: Any) -> None: ...
