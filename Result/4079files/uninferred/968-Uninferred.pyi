from pathlib import PurePath
from types import SimpleNamespace as SimpleNamespace
from typing import Any, Iterable, Iterator, List, Mapping, Set, Sized

class Configuration(Mapping[str, Any]):
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def slug(self) -> PurePath: ...
    @property
    def hashed_slug(self) -> PurePath: ...
    def __getitem__(self, key: str) -> Any: ...
    def __getattr__(self, key: str) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

class Configurations(Sized, Iterable[Configuration]):
    options: Any = ...
    def __init__(self, **configs: Set[Any]) -> None: ...
    def __iter__(self) -> Iterator[Configuration]: ...
    def __len__(self) -> int: ...
    def __radd__(self, other: List[Configuration]) -> List[Configuration]: ...
    def __add__(self, other: Iterable[Configuration]) -> List[Configuration]: ...
