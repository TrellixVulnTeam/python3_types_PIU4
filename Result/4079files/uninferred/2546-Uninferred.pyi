from eden.cli import filesystem as filesystem, mtab as mtab
from eden.cli.config import EdenCheckout as EdenCheckout
from eden.cli.doctor.problem import FixableProblem, Problem, ProblemTracker as ProblemTracker
from typing import Any

def check_bind_mounts(tracker: ProblemTracker, checkout: EdenCheckout, mount_table: mtab.MountTable, fs_util: filesystem.FsUtil) -> None: ...
def _check_bind_mount_client_path(tracker: ProblemTracker, path: str, mount_table: mtab.MountTable, fs_util: filesystem.FsUtil) -> None: ...
def _check_bind_mount_path(tracker: ProblemTracker, mount_source: str, mount_point: str, checkout_path_stat: mtab.MTStat, mount_table: mtab.MountTable, fs_util: filesystem.FsUtil) -> None: ...

class NonDirectoryFile(Problem):
    _path: Any = ...
    def __init__(self, path: str) -> None: ...

class MissingBindMountClientDir(FixableProblem):
    _path: Any = ...
    _fs_util: Any = ...
    def __init__(self, path: str, fs_util: filesystem.FsUtil) -> None: ...
    def description(self) -> str: ...
    def dry_run_msg(self) -> str: ...
    def start_msg(self) -> str: ...
    def perform_fix(self) -> None: ...

class BindMountNotMounted(FixableProblem):
    _client_dir_path: Any = ...
    _mount_path: Any = ...
    _mkdir: Any = ...
    _fs_util: Any = ...
    _mount_table: Any = ...
    def __init__(self, client_dir_path: str, mount_path: str, mkdir: bool, fs_util: filesystem.FsUtil, mount_table: mtab.MountTable) -> None: ...
    def description(self) -> str: ...
    def dry_run_msg(self) -> str: ...
    def start_msg(self) -> str: ...
    def perform_fix(self) -> None: ...
