from typing import Any, Optional

async def _g() -> None: ...

type_coro: Any

def launch(func: Any, tup_args: Any) -> None: ...

class Lock:
    _locked: bool = ...
    def __init__(self) -> None: ...
    def locked(self): ...
    async def __aenter__(self) -> None: ...
    async def __aexit__(self, *args: Any) -> None: ...
    async def acquire(self) -> None: ...
    def release(self) -> None: ...

class Event:
    def __init__(self) -> None: ...
    _flag: bool = ...
    _data: Any = ...
    def clear(self) -> None: ...
    def __await__(self) -> None: ...
    __iter__: Any = ...
    def is_set(self): ...
    def set(self, data: Optional[Any] = ...) -> None: ...
    def value(self): ...

class Barrier:
    _participants: Any = ...
    _func: Any = ...
    _args: Any = ...
    def __init__(self, participants: Any, func: Optional[Any] = ..., args: Any = ...) -> None: ...
    def __await__(self) -> None: ...
    __iter__: Any = ...
    _down: Any = ...
    _count: Any = ...
    def _reset(self, down: Any) -> None: ...
    def _at_limit(self): ...
    def _update(self) -> None: ...

class Semaphore:
    _count: Any = ...
    def __init__(self, value: int = ...) -> None: ...
    async def __aenter__(self) -> None: ...
    async def __aexit__(self, *args: Any) -> None: ...
    async def acquire(self) -> None: ...
    def release(self) -> None: ...

class BoundedSemaphore(Semaphore):
    _initial_value: Any = ...
    def __init__(self, value: int = ...) -> None: ...
    def release(self) -> None: ...
