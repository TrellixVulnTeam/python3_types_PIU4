from typing import Any, Dict, Optional, Sequence

class GATTDescriptor:
    uuid: Any = ...
    value: Any = ...
    flags: Any = ...
    def __init__(self, uuid: str, value: Optional[Sequence[int]], flags: Optional[Sequence[str]]) -> None: ...
    def __str__(self): ...
    def __repr__(self): ...

class GATTCharacteristic:
    uuid: Any = ...
    value: Any = ...
    flags: Any = ...
    descriptors: Any = ...
    def __init__(self, uuid: str, value: Optional[Sequence[int]], flags: Sequence[str]) -> None: ...
    def __str__(self): ...
    def __repr__(self): ...
    def __getitem__(self, path: str) -> GATTDescriptor: ...
    def __setitem__(self, path: str, descriptor: GATTDescriptor) -> Any: ...

class GATTService:
    uuid: Any = ...
    primary: Any = ...
    characteristics: Any = ...
    def __init__(self, uuid: str, primary: bool) -> None: ...
    def __str__(self): ...
    def __repr__(self): ...
    def __getitem__(self, path: str) -> GATTCharacteristic: ...
    def __setitem__(self, path: str, characteristic: GATTCharacteristic) -> Any: ...

class Device:
    @classmethod
    def create_from_dbus_dict(cls: Any, path: str, data: Dict[str, Any]) -> Device: ...
    last_seen: Any = ...
    active: bool = ...
    path: Any = ...
    address: Any = ...
    paired: Any = ...
    services_resolved: Any = ...
    name: Any = ...
    device_class: Any = ...
    appearance: Any = ...
    uuids: Any = ...
    tx_power: Any = ...
    def update_from_dbus_dict(self, path: str, data: Dict[str, Any]) -> None: ...
    def update_from_device(self, device: Device) -> None: ...
    connected: Any = ...
    rssis: Any = ...
    first_seen: Any = ...
    services: Any = ...
    manufacturer_data: Any = ...
    service_data: Any = ...
    def __init__(self, path: str, address: str, paired: bool, connected: bool, services_resolved: bool, name: Optional[str]=..., device_class: Optional[int]=..., appearance: Optional[int]=..., uuids: Sequence[str]=..., rssi: int=..., tx_power: int=..., manufacturer_data: Dict[int, Sequence[int]]=..., service_data: Dict[str, Sequence[int]]=...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self): ...
    def __getitem__(self, path: str) -> GATTService: ...
    def __setitem__(self, path: str, service: GATTService) -> Any: ...

def print_device(device: Any, prefix: Optional[Any] = ...) -> None: ...
