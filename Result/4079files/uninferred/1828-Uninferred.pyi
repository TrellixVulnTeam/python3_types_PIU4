from ._argument import Argument as Argument
from ._parser_function import SubWikiTextWithArgs
from typing import Any, Iterable, List, Optional, TypeVar

COMMENT_SUB: Any
TL_NAME_ARGS_FULLMATCH: Any
STARTING_WS_MATCH: Any
ENDING_WS_MATCH: Any
SPACE_AFTER_SEARCH: Any
T = TypeVar('T')

class Template(SubWikiTextWithArgs):
    _name_args_matcher: Any = ...
    _first_arg_sep: int = ...
    def normal_name(self, rm_namespaces: Any=..., capital_links: Any=..., _code: str=..., *, code: str=..., capitalize: Any=...) -> str: ...
    def rm_first_of_dup_args(self) -> None: ...
    def rm_dup_args_safe(self, tag: str=...) -> None: ...
    def set_arg(self, name: str, value: str, positional: bool=..., before: str=..., after: str=..., preserve_spacing: bool=...) -> None: ...
    def get_arg(self, name: str) -> Optional[Argument]: ...
    def has_arg(self, name: str, value: str=...) -> bool: ...
    def del_arg(self, name: str) -> None: ...

def mode(list_: List[T]) -> T: ...
def get_arg(name: str, args: Iterable[Argument]) -> Optional[Argument]: ...
