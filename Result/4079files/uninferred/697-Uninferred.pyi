from typing import *
from threading import Thread
from typing import Any

LOG_MESSAGES: bool

class MessageListener:
    one_time: Any = ...
    input_on_message: Any = ...
    message_predicate: Any = ...
    remove_fn: Any = ...
    def __init__(self, on_message: Callable[[Dict], None], message_predicate: Callable[[Dict], bool]=..., listen_to: ApartCore=..., one_time: bool=...): ...
    def listen_to(self, core: ApartCore) -> MessageListener: ...
    def stop_listening(self) -> MessageListener: ...
    def on_message(self, msg: Dict) -> bool: ...

class ApartCore(Thread):
    ipc_address: Any = ...
    zmq_context: Any = ...
    socket: Any = ...
    on_finish: Any = ...
    listeners: Any = ...
    process: Any = ...
    def __init__(self, listeners: List[MessageListener]=..., on_finish: Callable[[int], None]=...): ...
    def run(self) -> None: ...
    def kill(self) -> None: ...
    def send(self, message: str) -> Any: ...
    def register(self, message_listener: MessageListener) -> Callable[[], None]: ...
