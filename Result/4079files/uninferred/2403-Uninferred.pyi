import apache_beam as beam
import numpy as np
from tensorflow_model_analysis import types
from tensorflow_model_analysis.proto import metrics_for_slice_pb2
from tensorflow_model_analysis.slicer import slicer
from typing import Any, Dict, List, Text, Tuple

def load_and_deserialize_metrics(path: Text) -> List[Tuple[slicer.SliceKeyType, Any]]: ...
def load_and_deserialize_plots(path: Text) -> List[Tuple[slicer.SliceKeyType, Any]]: ...
def _convert_to_array_value(array: np.ndarray) -> metrics_for_slice_pb2.ArrayValue: ...
def convert_slice_metrics(slice_metrics: Dict[Text, Any], post_export_metrics: List[types.AddMetricsCallbackType], metrics_for_slice: metrics_for_slice_pb2.MetricsForSlice) -> None: ...
def _serialize_metrics(metrics: Tuple[slicer.SliceKeyType, Dict[Text, Any]], post_export_metrics: List[types.AddMetricsCallbackType]) -> bytes: ...
def _convert_slice_plots(slice_plots: Dict[Text, Any], post_export_metrics: List[types.AddMetricsCallbackType], plot_data: Dict[Text, metrics_for_slice_pb2.PlotData]) -> Any: ...
def _serialize_plots(plots: Tuple[slicer.SliceKeyType, Dict[Text, Any]], post_export_metrics: List[types.AddMetricsCallbackType]) -> bytes: ...

class SerializeMetrics(beam.PTransform):
    _post_export_metrics: Any = ...
    def __init__(self, post_export_metrics: List[types.AddMetricsCallbackType]) -> None: ...
    def expand(self, metrics: beam.pvalue.PCollection) -> Any: ...

class SerializePlots(beam.PTransform):
    _post_export_metrics: Any = ...
    def __init__(self, post_export_metrics: List[types.AddMetricsCallbackType]) -> None: ...
    def expand(self, plots: beam.pvalue.PCollection) -> Any: ...

class SerializeMetricsAndPlots(beam.PTransform):
    _post_export_metrics: Any = ...
    def __init__(self, post_export_metrics: List[types.AddMetricsCallbackType]) -> None: ...
    def expand(self, metrics_and_plots: Tuple[beam.pvalue.PCollection, beam.pvalue.PCollection]) -> Any: ...
