from typing import Any, Optional

HTTP_CODES: Any
_HTTP_STATUS_LINES: Any

class BaseResponse:
    default_status: int = ...
    default_content_type: str = ...
    _body: Any = ...
    _status_code: Any = ...
    headers: Any = ...
    _cookies: Any = ...
    def __init__(self, body: Optional[Any] = ..., status: Optional[Any] = ..., headers: Optional[Any] = ...) -> None: ...
    @property
    def body(self): ...
    @property
    def status_code(self): ...
    @property
    def status(self): ...
    @status.setter
    def status(self, status_code: Any) -> None: ...
    @property
    def headerlist(self): ...
    def set_cookie(self, key: Any, value: Any, expires: Optional[Any] = ..., max_age: Optional[Any] = ..., path: str = ..., secret: Optional[Any] = ..., digestmod: Any = ...) -> None: ...
    def delete_cookie(self, key: Any, **kwargs: Any) -> None: ...

class Response(BaseResponse):
    default_content_type: str = ...
    charset: Any = ...
    def __init__(self, body: str = ..., status: Optional[Any] = ..., headers: Optional[Any] = ..., charset: str = ...) -> None: ...

class JSONResponse(BaseResponse):
    default_content_type: str = ...
    def __init__(self, dic: Any, status: int = ..., headers: Optional[Any] = ..., charset: str = ..., **dump_args: Any) -> None: ...

class TemplateResponse(BaseResponse):
    default_content_type: str = ...
    def __init__(self, filename: Any, status: int = ..., headers: Optional[Any] = ..., charset: str = ..., **tpl_args: Any) -> None: ...

class RedirectResponse(BaseResponse):
    def __init__(self, url: Any) -> None: ...

class HTTPError(Response, Exception):
    default_status: int = ...
    def __init__(self, body: Any, status: Any, headers: Optional[Any] = ..., charset: str = ...) -> None: ...
