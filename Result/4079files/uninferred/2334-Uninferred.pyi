from typing import Any, Optional

class CaptionGenerator:
    word_to_idx: Any = ...
    idx_to_word: Any = ...
    prev2out: Any = ...
    ctx2out: Any = ...
    alpha_c: Any = ...
    selector: Any = ...
    dropout: Any = ...
    V: Any = ...
    L: Any = ...
    D: Any = ...
    M: Any = ...
    H: Any = ...
    T: Any = ...
    _start: Any = ...
    _null: Any = ...
    weight_initializer: Any = ...
    const_initializer: Any = ...
    emb_initializer: Any = ...
    features: Any = ...
    captions: Any = ...
    def __init__(self, word_to_idx: Any, dim_feature: Any = ..., dim_embed: int = ..., dim_hidden: int = ..., n_time_step: int = ..., prev2out: bool = ..., ctx2out: bool = ..., alpha_c: float = ..., selector: bool = ..., dropout: bool = ...) -> None: ...
    def _get_initial_lstm(self, features: Any): ...
    def _word_embedding(self, inputs: Any, reuse: bool = ...): ...
    def _project_features(self, features: Any): ...
    def _attention_layer(self, features: Any, features_proj: Any, h: Any, reuse: bool = ...): ...
    def _selector(self, context: Any, h: Any, reuse: bool = ...): ...
    def _decode_lstm(self, x: Any, h: Any, context: Any, dropout: bool = ..., reuse: bool = ...): ...
    def _batch_norm(self, x: Any, mode: str = ..., name: Optional[Any] = ...): ...
    def build_model(self): ...
    def build_sampler(self, max_len: int = ...): ...
