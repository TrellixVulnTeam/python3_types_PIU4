from gi.repository import Gtk
from typing import Any

class FindBar(Gtk.Grid):
    __gtype_name__: str = ...
    find_entry: Any = ...
    find_next_button: Any = ...
    find_previous_button: Any = ...
    match_case: Any = ...
    regex: Any = ...
    replace_all_button: Any = ...
    replace_button: Any = ...
    replace_entry: Any = ...
    whole_word: Any = ...
    wrap_box: Any = ...
    replace_mode: Any = ...
    def activate_secondary(self) -> None: ...
    search_context: Any = ...
    notify_id: Any = ...
    search_settings: Any = ...
    def __init__(self, parent: Any): ...
    def on_focus_child(self, container: Any, widget: Any): ...
    def hide(self) -> None: ...
    def update_match_state(self, *args: Any) -> None: ...
    textview: Any = ...
    def set_text_view(self, textview: Any) -> None: ...
    def start_find(self, textview: Gtk.TextView, replace: bool, text: str) -> Any: ...
    def start_find_next(self, textview: Any) -> None: ...
    def start_find_previous(self, textview: Any) -> None: ...
    def on_find_next_button_clicked(self, button: Any) -> None: ...
    def on_find_previous_button_clicked(self, button: Any) -> None: ...
    def on_replace_button_clicked(self, entry: Any) -> None: ...
    def on_replace_all_button_clicked(self, entry: Any) -> None: ...
    def on_toggle_replace_button_clicked(self, button: Any) -> None: ...
    def on_find_entry_changed(self, entry: Any) -> None: ...
    def on_stop_search(self, search_entry: Any) -> None: ...
    def _find_text(self, start_offset: int = ..., backwards: bool = ...): ...
