import typing
from apistar.validators import Validator as Validator
from collections import namedtuple
from typing import Any

LinkInfo = namedtuple('LinkInfo', ['link', 'name', 'sections'])

class Document:
    content: Any = ...
    url: Any = ...
    title: Any = ...
    description: Any = ...
    version: Any = ...
    def __init__(self, content: typing.Sequence[typing.Union[Section, Link]]=..., url: str=..., title: str=..., description: str=..., version: str=...) -> None: ...
    def get_links(self): ...
    def get_sections(self): ...
    def walk_links(self): ...

class Section:
    content: Any = ...
    name: Any = ...
    title: Any = ...
    description: Any = ...
    def __init__(self, name: str, content: typing.Sequence[typing.Union[Section, Link]]=..., title: str=..., description: str=...) -> None: ...
    def get_links(self): ...
    def get_sections(self): ...
    def walk_links(self, previous_sections: Any = ...): ...

class Link:
    url: Any = ...
    method: Any = ...
    handler: Any = ...
    name: Any = ...
    encoding: Any = ...
    response: Any = ...
    title: Any = ...
    description: Any = ...
    fields: Any = ...
    def __init__(self, url: str, method: str, handler: typing.Callable=..., name: str=..., encoding: str=..., response: Response=..., title: str=..., description: str=..., fields: typing.Sequence[Field]=...) -> None: ...
    def get_path_fields(self): ...
    def get_query_fields(self): ...
    def get_body_field(self): ...
    def get_expanded_body(self): ...

class Field:
    name: Any = ...
    title: Any = ...
    description: Any = ...
    location: Any = ...
    required: Any = ...
    schema: Any = ...
    example: Any = ...
    def __init__(self, name: str, location: str, title: str=..., description: str=..., required: bool=..., schema: Validator=..., example: typing.Any=...) -> None: ...

class Response:
    encoding: Any = ...
    status_code: Any = ...
    schema: Any = ...
    def __init__(self, encoding: str, status_code: int=..., schema: Validator=...) -> None: ...
