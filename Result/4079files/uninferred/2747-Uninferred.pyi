import argparse
import subprocess
import typing
from typing import Any, List, Tuple

__version__: str
STRIP_DOMAIN_USERNAMES: Any
REVIEWERS_LIMIT: int

class FindReviewers:
    config: Any = ...
    def __init__(self, config: Config) -> None: ...
    def get_reviewers(self) -> typing.Counter[str]: ...
    def run_command(self, command: List[str]) -> List[str]: ...
    def extract_username_from_email(self, email: str) -> str: ...
    def check_phabricator_activated(self, username: str) -> subprocess.Popen: ...
    def parse_phabricator(self, username: str, process: subprocess.Popen) -> str: ...
    def filter_phabricator_activated(self, all_users: List[str]) -> List[str]: ...

class FindFileLogReviewers(FindReviewers):
    def extract_username_from_shortlog(self, shortlog: str) -> Tuple[str, int]: ...
    def get_log_reviewers_from_file(self, file_paths: List[str]) -> typing.Counter[str]: ...
    def get_changed_files(self) -> List[str]: ...
    def get_reviewers(self) -> typing.Counter[str]: ...

class FindLogReviewers(FindFileLogReviewers):
    def get_changed_files(self) -> List[str]: ...

class FindHistoricalReviewers(FindFileLogReviewers):
    def get_reviewers(self) -> typing.Counter[str]: ...

class FindArcCommitReviewers(FindLogReviewers):
    def get_log_reviewers_from_file(self, file_paths: List[str]) -> typing.Counter[str]: ...

def show_reviewers(reviewer_list: List[str], copy_clipboard: bool) -> None: ...
def get_reviewers(config: Config) -> List[str]: ...

class Config:
    DEFAULT_GLOBAL_JSON: str = ...
    VERBOSE_DEFAULT: Any = ...
    IGNORES_DEFAULT: str = ...
    JSON_DEFAULT: str = ...
    COPY_DEFAULT: Any = ...
    BASE_BRANCH_DEFAULT: str = ...
    verbose: bool = ...
    ignores: Any = ...
    json: str = ...
    copy: bool = ...
    base_branch: str = ...
    def __init__(self) -> None: ...
    @staticmethod
    def default_global_json() -> str: ...
    def read_configs(self, args: argparse.Namespace) -> None: ...
    def read_from_json(self, args_json: str) -> None: ...
    def read_from_args(self, args: argparse.Namespace) -> None: ...

def main() -> None: ...
