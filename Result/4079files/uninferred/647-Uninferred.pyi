import abc
from rlkit.policies.base import ExplorationPolicy
from typing import Any

class ExplorationStrategy(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get_action(self, t: Any, observation: Any, policy: Any, **kwargs: Any) -> Any: ...
    def reset(self) -> None: ...

class RawExplorationStrategy(ExplorationStrategy, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def get_action_from_raw_action(self, action: Any, **kwargs: Any) -> Any: ...
    def get_action(self, t: Any, policy: Any, *args: Any, **kwargs: Any): ...
    def reset(self) -> None: ...

class PolicyWrappedWithExplorationStrategy(ExplorationPolicy):
    es: Any = ...
    policy: Any = ...
    t: int = ...
    def __init__(self, exploration_strategy: ExplorationStrategy, policy: Any) -> None: ...
    def set_num_steps_total(self, t: Any) -> None: ...
    def get_action(self, *args: Any, **kwargs: Any): ...
    def reset(self) -> None: ...
