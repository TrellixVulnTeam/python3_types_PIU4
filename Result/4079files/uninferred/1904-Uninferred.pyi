from typing import *
import numpy as np
import scipy.sparse as sparse
from typing import Any

def _renumber(a: np.ndarray, keys: np.ndarray, values: np.ndarray) -> np.ndarray: ...

class GraphManager:
    def __init__(self, ds: Any, axis: int) -> None: ...
    def keys(self) -> List[str]: ...
    def items(self) -> Iterable[Tuple[str, sparse.coo_matrix]]: ...
    def __len__(self) -> int: ...
    def __contains__(self, name: str) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def last_modified(self, name: str=...) -> str: ...
    def __getitem__(self, thing: Any) -> sparse.coo_matrix: ...
    def __getattr__(self, name: str) -> sparse.coo_matrix: ...
    def __setitem__(self, name: str, g: sparse.coo_matrix) -> None: ...
    def __setattr__(self, name: str, g: sparse.coo_matrix) -> None: ...
    def __delitem__(self, name: str) -> None: ...
    def __delattr__(self, name: str) -> None: ...
    def _permute(self, ordering: np.ndarray) -> None: ...
