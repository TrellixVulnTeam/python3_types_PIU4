from collections import OrderedDict
from typing import Any, Optional

class DictCallable(dict):
    def __call__(self, *args: Any, **kwargs: Any): ...

class Condictional(OrderedDict):
    def key(self, x: Any, *args: Any, **kwargs: Any) -> bool: ...
    default: Any = ...
    def __init__(self, args: Any = ..., default: Optional[Any] = ..., key: Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

class Dispatch(Condictional):
    def key(self, key: Any, *args: Any, **kwargs: Any): ...
    default: Any = ...
    def __init__(self, args: Any = ..., default: Optional[Any] = ...) -> None: ...

class ListCallable(list):
    def __call__(self, *args: Any, **kwargs: Any): ...

class SetCallable(set):
    def __call__(self, *args: Any, **kwargs: Any): ...

class TupleCallable(tuple):
    def __call__(self, *args: Any, **kwargs: Any): ...
