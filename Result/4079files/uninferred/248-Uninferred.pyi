from pydev_docker import models
from typing import Any, Iterable, Iterator, List, Optional

class ContainerOptions:
    DEFAULT_PYPATH_DIR: str = ...
    DEFAULT_SRC_DIR: str = ...
    _image: Any = ...
    _source_directory: Any = ...
    _command: Any = ...
    _pypath_directory: Any = ...
    _container_source_directory: Any = ...
    _py_volumes: Any = ...
    _ext_volumes: Any = ...
    _environment_variables: Any = ...
    _ports: Any = ...
    _network: Any = ...
    _remove_container: Any = ...
    def __init__(self, image: str, source_directory: str, *, command: Optional[str]=..., container_source_directory: str=..., environment_variables: Optional[Iterable[models.Environment]]=..., ext_volumes: Optional[Iterable[models.Volume]]=..., network: Optional[str]=..., py_volumes: Optional[Iterable[str]]=..., ports: Optional[Iterable[models.Port]]=..., pypath_directory: str=..., remove_container: bool=...) -> None: ...
    @property
    def image(self) -> str: ...
    @property
    def command(self) -> Optional[str]: ...
    @property
    def network(self) -> Optional[str]: ...
    @property
    def remove_container(self) -> bool: ...
    def get_source_volume(self) -> models.Volume: ...
    def get_pythonpath_environment(self) -> models.Environment: ...
    def iter_pypath_volumes(self) -> Iterator[models.Volume]: ...
    def iter_ext_volumes(self) -> Iterator[models.Volume]: ...
    def iter_environment_variables(self) -> Iterator[models.Environment]: ...
    def get_ports(self) -> List[models.Port]: ...
    def get_volume_collection(self) -> List[models.Volume]: ...
    def get_environment_collection(self) -> List[models.Environment]: ...
