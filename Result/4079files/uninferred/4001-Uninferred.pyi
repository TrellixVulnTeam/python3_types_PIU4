import fabricio
from fabricio import utils
from typing import Any, Optional

class ServiceError(fabricio.Error): ...
class ManagerNotFoundError(ServiceError): ...

class Option(utils.default_property):
    name: Any = ...
    safe: Any = ...
    safe_name: Any = ...
    def __init__(self, func: Optional[Any] = ..., default: Optional[Any] = ..., name: Optional[Any] = ..., safe: bool = ..., safe_name: Optional[Any] = ...) -> None: ...

class Attribute(utils.default_property): ...

class BaseService:
    image: Any = ...
    def name(self) -> None: ...
    overridden_options: Any = ...
    overridden_attributes: Any = ...
    _other_options: Any = ...
    _other_safe_options: Any = ...
    def __init__(self, image: Optional[Any] = ..., options: Optional[Any] = ..., safe_options: Optional[Any] = ..., **attrs: Any) -> None: ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def _get_option_attribute(self, option_name: Any): ...
    def _options_custom_names(self): ...
    @property
    def image_id(self) -> None: ...
    def _attributes(self): ...
    @classmethod
    def _get_available_options(cls, safe: bool = ...): ...
    def _options(self): ...
    def _safe_options(self): ...
    def _get_options(self, safe: bool = ...): ...
    @property
    def options(self): ...
    @property
    def safe_options(self): ...
    def fork(self, image: Optional[Any] = ..., options: Optional[Any] = ..., **attrs: Any): ...
    def __str__(self): ...
    def __copy__(self): ...
    def get_backup_version(self) -> None: ...
    def update(self, tag: Optional[Any] = ..., registry: Optional[Any] = ..., account: Optional[Any] = ..., force: bool = ...) -> None: ...
    def revert(self) -> None: ...
    def pull_image(self, tag: Optional[Any] = ..., registry: Optional[Any] = ..., account: Optional[Any] = ...): ...
    def migrate(self, tag: Optional[Any] = ..., registry: Optional[Any] = ..., account: Optional[Any] = ...) -> None: ...
    def migrate_back(self) -> None: ...
    def backup(self) -> None: ...
    def restore(self, backup_name: Optional[Any] = ...) -> None: ...
    def destroy(self) -> None: ...
    @property
    def info(self) -> None: ...

class ManagedService(BaseService):
    managers: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _is_manager(self): ...
    def is_manager(self, raise_manager_error: bool = ...): ...
    def pull_image(self, *args: Any, **kwargs: Any): ...
    def migrate(self, *args: Any, **kwargs: Any) -> None: ...
    def migrate_back(self) -> None: ...
    def backup(self) -> None: ...
    def restore(self, backup_name: Optional[Any] = ...) -> None: ...
