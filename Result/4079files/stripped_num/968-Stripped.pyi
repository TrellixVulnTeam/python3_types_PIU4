# (generated with --quick)

import pathlib
import types
from typing import Any, Callable, Dict, Generator, Iterable, Iterator, Mapping, Sized, Tuple, Type, TypeVar

PurePath: Type[pathlib.PurePath]
SimpleNamespace: Type[types.SimpleNamespace]
hashlib: module

_S = TypeVar('_S')
_T = TypeVar('_T')
_T1 = TypeVar('_T1')
_T2 = TypeVar('_T2')
_T3 = TypeVar('_T3')
_T4 = TypeVar('_T4')
_T5 = TypeVar('_T5')
_T6 = TypeVar('_T6')

class Configuration(Mapping[str, Any]):
    hashed_slug: pathlib.PurePath
    slug: pathlib.PurePath
    def __getattr__(self, key) -> Any: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, **kwargs) -> None: ...
    def __iter__(self) -> `dictionary-keyiterator`: ...
    def __len__(self) -> int: ...

class Configurations(Sized, Iterable[Configuration]):
    options: Dict[str, Any]
    def __add__(self, other) -> list: ...
    def __init__(self, **configs) -> None: ...
    def __iter__(self) -> Generator[Configuration, Any, None]: ...
    def __len__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...

@overload
def product(iter1: Iterable, iter2: Iterable, iter3: Iterable, iter4: Iterable, iter5: Iterable, iter6: Iterable, iter7: Iterable, *iterables: Iterable) -> Iterator[tuple]: ...
@overload
def product(iter1: Iterable[_T1]) -> Iterator[Tuple[_T1]]: ...
@overload
def product(iter1: Iterable[_T1], iter2: Iterable[_T2]) -> Iterator[Tuple[_T1, _T2]]: ...
@overload
def product(iter1: Iterable[_T1], iter2: Iterable[_T2], iter3: Iterable[_T3]) -> Iterator[Tuple[_T1, _T2, _T3]]: ...
@overload
def product(iter1: Iterable[_T1], iter2: Iterable[_T2], iter3: Iterable[_T3], iter4: Iterable[_T4]) -> Iterator[Tuple[_T1, _T2, _T3, _T4]]: ...
@overload
def product(iter1: Iterable[_T1], iter2: Iterable[_T2], iter3: Iterable[_T3], iter4: Iterable[_T4], iter5: Iterable[_T5]) -> Iterator[Tuple[_T1, _T2, _T3, _T4, _T5]]: ...
@overload
def product(iter1: Iterable[_T1], iter2: Iterable[_T2], iter3: Iterable[_T3], iter4: Iterable[_T4], iter5: Iterable[_T5], iter6: Iterable[_T6]) -> Iterator[Tuple[_T1, _T2, _T3, _T4, _T5, _T6]]: ...
@overload
def product(*iterables: Iterable, repeat: int = ...) -> Iterator[tuple]: ...
@overload
def reduce(function: Callable[[_T, _S], _T], sequence: Iterable[_S], initial: _T) -> _T: ...
@overload
def reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T: ...
