# (generated with --quick)

from typing import Any, Callable, Dict, Optional, TypeVar, Union

JSONRPCError: Any
RawProxy: Any
errno: module
os: module
subprocess: module

_AnyPath = TypeVar('_AnyPath', str, _PathLike[str])

class Manager(object):
    base_port: int
    base_rpcport: int
    conf_path: str
    host: str
    nodes: Dict[Any, Optional[Dict[str, Any]]]
    nodes_number: int
    password: str
    regtest_path: Any
    user: str
    def __init__(self, path = ...) -> None: ...
    def gen_node(self, id_) -> None: ...
    def generate_nodes(self, num) -> None: ...
    def send_rpc_cmd(self, rpc_cmd, *nodes) -> Any: ...
    def start_nodes(self) -> None: ...
    def stop_nodes(self) -> None: ...
    def teardown(self) -> None: ...

class NodesAlreadyConnected(Exception): ...

class RegtestRunning(Exception): ...

class SendCommandError(Exception): ...

class TxVerifyError(Exception): ...

def copyfile(src: Union[str, _PathLike[str]], dst: _AnyPath, *, follow_symlinks: bool = ...) -> _AnyPath: ...
def rmtree(path: Union[bytes, str, _PathLike[str]], ignore_errors: bool = ..., onerror: Optional[Callable[[Any, Any, Any], Any]] = ...) -> None: ...
def sleep(secs: float) -> None: ...
