# (generated with --quick)

import collections
from typing import Any, Dict, List, Optional, Type, TypeVar

GdbController: Any
REQUIRED_GDB_FLAGS: List[str]
defaultdict: Type[collections.defaultdict]
logger: logging.Logger
logging: module
traceback: module

_T = TypeVar('_T')

class StateManager(object):
    config: Any
    controller_to_client_ids: collections.defaultdict
    gdb_reader_thread: None
    def __init__(self, config) -> None: ...
    def _connect_to_existing_gdb_controller(self) -> None: ...
    def _spawn_new_gdb_controller(self) -> None: ...
    def connect_client(self, client_id, desired_gdbpid) -> Dict[str, Any]: ...
    def disconnect_client(self, client_id) -> None: ...
    def exit_all_gdb_processes(self) -> None: ...
    def get_client_ids_from_controller(self, controller) -> Any: ...
    def get_client_ids_from_gdb_pid(self, pid) -> Any: ...
    def get_controller_from_client_id(self, client_id) -> Any: ...
    def get_controller_from_pid(self, pid) -> Any: ...
    def get_dashboard_data(self) -> Dict[str, Dict[str, Any]]: ...
    def get_pid_from_controller(self, controller) -> Any: ...
    def remove_gdb_controller(self, controller) -> Any: ...
    def remove_gdb_controller_by_pid(self, gdbpid) -> Any: ...

def deepcopy(x: _T, memo: Optional[Dict[int, _T]] = ..., _nil = ...) -> _T: ...
