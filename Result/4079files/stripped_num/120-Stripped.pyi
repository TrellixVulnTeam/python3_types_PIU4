# (generated with --quick)

import __future__
from typing import Any, Dict, Optional, TypeVar, Union

QtCore: Any
file_store_content_lock: threading.Lock
os: module
python3: bool
re: module
settings: Any
shutil: module
sys: module
threading: module
unicode_literals: __future__._Feature

_T1 = TypeVar('_T1')

class NinjaFileExistsException(Exception):
    __doc__: str
    filename: Any
    def __init__(self, filename = ...) -> None: ...

class NinjaIOException(Exception):
    __doc__: str

class NinjaNoFileNameException(Exception):
    __doc__: str

def _search_coding_line(txt) -> Optional[str]: ...
def belongs_to_folder(path, fileName) -> Any: ...
def check_for_external_modification(fileName, old_mtime) -> bool: ...
def convert_to_relative(basePath, fileName) -> Any: ...
def create_folder(folderName, add_init_file = ...) -> None: ...
def create_init_file(folderName) -> None: ...
def create_init_file_complete(folderName) -> None: ...
def create_path(*args) -> str: ...
def create_tree_folders(folderName) -> None: ...
def delete_file(path, fileName = ...) -> None: ...
def delete_folder(path, fileName = ...) -> None: ...
def file_exists(path, fileName = ...) -> bool: ...
def folder_exists(folderName) -> bool: ...
def get_basename(fileName) -> Any: ...
def get_file_encoding(content) -> str: ...
def get_file_extension(fileName) -> Any: ...
def get_file_name(fileName) -> Any: ...
def get_files_from_folder(folder, ext) -> list: ...
def get_folder(fileName) -> Any: ...
def get_last_modification(fileName) -> Any: ...
def get_module_name(fileName) -> Any: ...
def has_write_permission(fileName) -> bool: ...
def is_supported_extension(filename, extensions = ...) -> bool: ...
def open_project(path) -> Any: ...
def open_project_with_extensions(path, extensions) -> Dict[Any, list]: ...
def read_file_content(fileName) -> str: ...
def rename_file(old, new: _T1) -> Union[str, _T1]: ...
def show_containing_folder(path) -> None: ...
def store_file_content(fileName, content, addExtension = ..., newFile = ...) -> Any: ...
