# (generated with --quick)

from typing import Any, Dict, Optional, Pattern, Tuple, TypeVar, Union

dir: str
ipquery: IpQuery
os: module
re: module
result: Dict[str, Any]
v4db_path: str
v4ptn: Pattern[str]
v6db_path: str
v6ptn: Pattern[str]

_T0 = TypeVar('_T0')

class IpDb(object):
    dLen: Optional[int]
    db: bytes
    dbAddr: Optional[int]
    except_raw: int
    ipLen: Optional[int]
    osLen: Optional[int]
    size: Optional[int]
    type: int
    def __init__(self, db_path) -> None: ...
    def _init_v4db(self) -> None: ...
    def _init_v6db(self) -> None: ...
    def binarySearch(self, key, lo = ..., hi = ...) -> Any: ...
    def checkIndex(self, index) -> None: ...
    def getData(self, index) -> int: ...
    def getLoc(self, index) -> Any: ...
    def getSize(self) -> int: ...
    def readLoc(self, start, isTwoPart = ...) -> Any: ...
    def readRawText(self, start) -> Union[bytes, list]: ...
    def searchIp(self, val) -> Any: ...

class IpQuery(object):
    v4db: IpDb
    v6db: IpDb
    def searchIp(self, ip: _T0) -> Dict[str, Optional[Union[str, _T0]]]: ...

def parseIp(ip) -> Tuple[int, int]: ...
def parseIpv4(ip) -> int: ...
def parseIpv6(ip) -> int: ...
