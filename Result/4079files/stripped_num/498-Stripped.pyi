# (generated with --quick)

import client
from typing import Any, Dict, Tuple, Type, Union

Server: Type[client.Server]
atexit: module
histfile: str
pprint: module
readline: module
rlcompleter: module
sys: module
time: module
traceback: module

class Cli:
    commands: Dict[Any, Union[client.Host, Tuple[str, ...]]]
    completion: Dict[Any, Union[client.Host, Tuple[str, ...]]]
    path: Any
    pp: pprint.PrettyPrinter
    server: client.Server
    def __init__(self, path) -> None: ...
    def cli(self) -> None: ...
    def command(self, cmd_name) -> Any: ...
    def help(self) -> None: ...
    def ls(self) -> None: ...
    def mkhost(self, arch, profile, hostname) -> None: ...
    def q(self) -> None: ...
    @staticmethod
    def send_request(request_str, args) -> Tuple[Any, Any, str]: ...
    def stage3(self, host_id, args = ...) -> None: ...
    def update_completion(self) -> None: ...

def __getattr__(name) -> Any: ...
def main(args) -> None: ...
