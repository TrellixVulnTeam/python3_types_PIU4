# (generated with --quick)

import collections
import functools
import typing
from typing import Any, Dict, List, Tuple, Type

Counter: Type[typing.Counter]
_: float
adjacency_matrix: Any
centrality: Any
contrib: float
defaultdict: Type[collections.defaultdict]
deque: Type[collections.deque]
eigenvector_centralities: Any
endorsements: List[Tuple[int, int]]
endorsements_by_id: List[Tuple[int, int]]
friendships: List[Tuple[int, int]]
i: int
id: int
j: int
math: module
n: int
num_paths: int
partial: Type[functools.partial]
path: List[int]
paths: List[List[int]]
pr: float
random: module
re: module
source: Dict[str, Any]
source_id: int
target_id: int
user: Dict[str, Any]
user_id: int
users: List[Dict[str, Any]]

def distance(v, w) -> float: ...
def dot(v, w) -> Any: ...
def entry_fn(i, j) -> int: ...
def farness(user) -> int: ...
def find_eigenvector(A, tolerance = ...) -> Tuple[Any, float]: ...
def get_column(A, j) -> Any: ...
def get_row(A, i) -> Any: ...
def magnitude(v) -> float: ...
def make_matrix(num_rows, num_cols, entry_fn) -> Any: ...
def matrix_multiply(A, B) -> Any: ...
def matrix_operate(A, v) -> list: ...
def matrix_product_entry(A, B, i, j) -> Any: ...
def page_rank(users, damping = ..., num_iters = ...) -> dict: ...
def scalar_multiply(c, v) -> Any: ...
def shape(A) -> Tuple[int, int]: ...
def shortest_paths_from(from_user) -> Dict[Any, List[list]]: ...
def vector_as_matrix(v) -> List[list]: ...
def vector_from_matrix(v_as_matrix) -> list: ...
