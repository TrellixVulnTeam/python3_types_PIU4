# (generated with --quick)

import _importlib_modulespec
import decimal
import fractions
from typing import Any, Iterable, List, Optional, Type, Union
import unittest
import unittest.case
import unittest.loader
import unittest.runner

Decimal: Type[decimal.Decimal]
Fraction: Type[fractions.Fraction]
TestCase: Type[unittest.case.TestCase]
change_defaults: Any
ordinal_words: Any
pi: float
words: Any

class Number2FarsiWord(unittest.case.TestCase):
    __doc__: str
    def test_change_defaults(self) -> None: ...
    def test_decimal_input(self) -> None: ...
    def test_float(self) -> None: ...
    def test_fraction_separator(self) -> None: ...
    def test_fractions(self) -> None: ...
    def test_negative(self) -> None: ...
    def test_negative_float(self) -> None: ...
    def test_negative_numbers(self) -> None: ...
    def test_non_negative(self) -> None: ...
    def test_non_negative_ordinal_words(self) -> None: ...
    def test_persian_numbers(self) -> None: ...
    def test_positive(self) -> None: ...
    def test_scientific_fraction_separator(self) -> None: ...
    def test_scientific_separator(self) -> None: ...
    def test_str_input(self) -> None: ...
    def test_unsupported_input_type(self) -> None: ...
    def test_value_errors(self) -> None: ...

def main(module: Optional[Union[str, _importlib_modulespec.ModuleType]] = ..., defaultTest: Optional[Union[str, Iterable[str]]] = ..., argv: Optional[List[str]] = ..., testRunner: Optional[Union[unittest.runner.TestRunner, Type[unittest.runner.TestRunner]]] = ..., testLoader: unittest.loader.TestLoader = ..., exit: bool = ..., verbosity: int = ..., failfast: bool = ..., catchbreak: bool = ..., buffer: bool = ..., warnings: Optional[str] = ...) -> unittest.TestProgram: ...
