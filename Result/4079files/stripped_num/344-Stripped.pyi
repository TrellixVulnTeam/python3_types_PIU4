# (generated with --quick)

from typing import Any, Generator, MutableSet, Tuple

GROUP: str
NOTHING: str
OR: str
WORD_BOUNDARY: str
__all__: Tuple[str]
collections: module

class Triegex(MutableSet):
    _root: TriegexNode
    def __contains__(self, word) -> Any: ...
    def __init__(self, *words) -> None: ...
    def __iter__(self) -> Generator[str, Any, None]: ...
    def __len__(self) -> int: ...
    def _traverse(self) -> Generator[TriegexNode, Any, Any]: ...
    def add(self, word) -> None: ...
    def discard(self, word) -> None: ...
    def to_regex(self) -> Any: ...

class TriegexNode:
    char: Any
    children: Any
    end: Any
    def __contains__(self, key) -> bool: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __init__(self, char, end, *children) -> None: ...
    def __iter__(self) -> listiterator: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def to_regex(self) -> Any: ...
