# (generated with --quick)

import itertools
import typing
from typing import Any, Dict, List, NoReturn, Type, Union

C0: Any
CONFIG_ENCODER: Any
CONFIG_INFER: Any
Counter: Type[typing.Counter]
UNK: Any
WordNetLemmatizer: Any
chain: Type[itertools.chain]
json: module
nltk: Any
np: module
os: module
re: module
tf: Any

class APICalls(Evidence):
    chars: List[nothing]
    sigma: Any
    vocab: Dict[nothing, nothing]
    vocab_size: int
    def encode(self, inputs, config) -> Any: ...
    def evidence_loss(self, psi, encoding, config) -> Any: ...
    def exists(self, inputs) -> Any: ...
    @staticmethod
    def from_call(callnode) -> List[str]: ...
    def init_sigma(self, config) -> None: ...
    def placeholder(self, config) -> Any: ...
    def read_data_point(self, program) -> list: ...
    def set_chars_vocab(self, data) -> None: ...
    def wrangle(self, data) -> Any: ...

class Evidence(object):
    def dump_config(self) -> dict: ...
    def encode(self, inputs, config) -> NoReturn: ...
    def evidence_loss(self, psi, encoding, config) -> NoReturn: ...
    def exists(self, inputs) -> NoReturn: ...
    def init_config(self, evidence, chars_vocab) -> None: ...
    def init_sigma(self, config) -> NoReturn: ...
    def placeholder(self, config) -> NoReturn: ...
    @staticmethod
    def read_config(js, chars_vocab) -> List[Union[APICalls, Keywords, Types]]: ...
    def read_data_point(self, program) -> NoReturn: ...
    def set_chars_vocab(self, data) -> NoReturn: ...
    def wrangle(self, data) -> NoReturn: ...

class Javadoc(Evidence):
    chars: Any
    vocab: dict
    vocab_size: int
    def read_data_point(self, program, infer = ...) -> Any: ...
    def set_dicts(self, data) -> None: ...

class Keywords(Evidence):
    STOP_WORDS: set
    chars: List[nothing]
    lemmatizer: Any
    sigma: Any
    vocab: Dict[nothing, nothing]
    vocab_size: int
    def encode(self, inputs, config) -> Any: ...
    def evidence_loss(self, psi, encoding, config) -> Any: ...
    def exists(self, inputs) -> Any: ...
    @staticmethod
    def from_call(callnode) -> list: ...
    def init_sigma(self, config) -> None: ...
    def lemmatize(self, word) -> Any: ...
    def placeholder(self, config) -> Any: ...
    def read_data_point(self, program) -> list: ...
    def set_chars_vocab(self, data) -> None: ...
    @staticmethod
    def split_camel(s) -> List[str]: ...
    def wrangle(self, data) -> Any: ...

class Types(Evidence):
    chars: List[nothing]
    sigma: Any
    vocab: Dict[nothing, nothing]
    vocab_size: int
    def encode(self, inputs, config) -> Any: ...
    def evidence_loss(self, psi, encoding, config) -> Any: ...
    def exists(self, inputs) -> Any: ...
    @staticmethod
    def from_call(callnode) -> list: ...
    @staticmethod
    def get_types_re(s) -> List[str]: ...
    def init_sigma(self, config) -> None: ...
    def placeholder(self, config) -> Any: ...
    def read_data_point(self, program) -> list: ...
    def set_chars_vocab(self, data) -> None: ...
    def wrangle(self, data) -> Any: ...
