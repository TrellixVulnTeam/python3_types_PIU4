# (generated with --quick)

from typing import Any, Callable, TypeVar

Functor: Any
Monad: Any
compose: Any
identity: Any

_TObservable = TypeVar('_TObservable', bound=Observable)

class Observable(Any, Any):
    __doc__: str
    _get_value: Callable[[], Any]
    def __eq__(self, other) -> Any: ...
    def __init__(self, subscribe) -> None: ...
    def bind(self: _TObservable, fn) -> _TObservable: ...
    @staticmethod
    def call_cc(fn) -> Observable: ...
    def filter(self: _TObservable, predicate) -> _TObservable: ...
    def flat_map(self: _TObservable, fn) -> _TObservable: ...
    @classmethod
    def just(cls, x) -> Any: ...
    def map(self: _TObservable, mapper) -> _TObservable: ...
    def subscribe(self, on_next) -> Any: ...
    @classmethod
    def unit(cls, x) -> Any: ...
