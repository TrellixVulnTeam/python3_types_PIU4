# (generated with --quick)

from typing import Any, Dict, Iterator, Tuple
import unittest.case

ConsoleErrorListener: Any
ProxyErrorListener: Any
RecognitionException: Any
RuleContext: Any
Token: Any
unittest: module

class Recognizer(object):
    _interp: None
    _listeners: list
    _stateNumber: int
    ruleIndexMapCache: Dict[Any, Iterator[Tuple[Any, Any]]]
    state: Any
    tokenTypeMapCache: Dict[Any, Iterator[Tuple[Any, Any]]]
    def addErrorListener(self, listener) -> None: ...
    def checkVersion(self, toolVersion) -> None: ...
    def extractVersion(self, version) -> Tuple[Any, Any]: ...
    def getErrorHeader(self, e) -> str: ...
    def getErrorListenerDispatch(self) -> Any: ...
    def getRuleIndexMap(self) -> Iterator[Tuple[Any, Any]]: ...
    def getTokenErrorDisplay(self, t) -> str: ...
    def getTokenType(self, tokenName) -> Any: ...
    def getTokenTypeMap(self) -> Iterator[Tuple[Any, Any]]: ...
    def precpred(self, localctx, precedence) -> bool: ...
    def removeErrorListener(self, listener) -> None: ...
    def removeErrorListeners(self) -> None: ...
    def sempred(self, localctx, ruleIndex, actionIndex) -> bool: ...

class Test(unittest.case.TestCase):
    def testVersion(self) -> None: ...
