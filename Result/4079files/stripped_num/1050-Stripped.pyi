# (generated with --quick)

import __future__
from typing import Any, TypeVar
import unittest.case

SleepTalker: Any
TalkerToSpeaker: Any
TalkerToSpeaker2: Any
absolute_import: __future__._Feature
division: __future__._Feature
mock: module
none_to_speaker: Any
print_function: __future__._Feature
pure_interface: Any
talk_to_speaker: Any
unicode_literals: __future__._Feature
unittest: module

_T0 = TypeVar('_T0')

class ISleepTalker(ISpeaker):
    is_asleep: None

class ISpeaker(Any):
    def speak(self, volume) -> None: ...

class ITopicSpeaker(ISpeaker):
    topic: None

class Sleeper(object):
    is_asleep: bool

class Speaker(object):
    def speak(self, volume) -> str: ...

class Talker(object):
    def talk(self) -> str: ...

class Talker2(object):
    def talk(self) -> str: ...

class Talker3(object):
    def talk(self) -> str: ...

class Talker4(object):
    def talk(self) -> str: ...

class TalkerToSpeaker3(object):
    _talker: Any
    def __init__(self, talker) -> None: ...
    def speak(self, volume) -> Any: ...

class TestAdaption(unittest.case.TestCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    def test_adapt_on_class_works(self) -> None: ...
    def test_adapt_to_interface_or_none(self) -> None: ...
    def test_adapt_to_interface_raises(self) -> None: ...
    def test_adapter_call_check(self) -> None: ...
    def test_adapter_check(self) -> None: ...
    def test_adaption_passes(self) -> None: ...
    def test_callable_adapter_passes(self) -> None: ...
    def test_filter_adapt(self) -> None: ...
    def test_from_type_check(self) -> None: ...
    def test_implicit_adapter(self) -> None: ...
    def test_implicit_filter_adapt(self) -> None: ...
    def test_no_interface_on_class_raises(self) -> None: ...
    def test_to_interface_check(self) -> None: ...

class TestAdaptionToInterfaceOnly(unittest.case.TestCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    def test_adapt_to_interface_or_none(self) -> None: ...
    def test_adapter_preference(self) -> None: ...
    def test_adapter_to_sub_interface_used(self) -> None: ...
    def test_callable_adapter_passes(self) -> None: ...
    def test_filter_adapt(self) -> None: ...
    def test_implicit_adapter_passes(self) -> None: ...
    def test_implicit_filter_adapt(self) -> None: ...
    def test_optional_adapt(self) -> None: ...
    def test_wrapping_works(self) -> None: ...
    def test_wrapping_works2(self) -> None: ...

class TopicSpeaker(Speaker, ITopicSpeaker):
    topic: Any
    def __init__(self, topic) -> None: ...

def bad_adapter(talker: _T0) -> _T0: ...
