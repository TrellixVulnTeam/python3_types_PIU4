# (generated with --quick)

import numpy
from typing import Any, Callable, Dict, Iterable, Iterator, Tuple, Type, TypeVar

argmax: Any
ndarray: Type[numpy.ndarray]
ones: Any

_FuncT = TypeVar('_FuncT', bound=Callable)
_S = TypeVar('_S')
_T = TypeVar('_T')

class AsgGraphemeEncoding(GraphemeEncodingBase):
    allowed_character_count: int
    allowed_characters: Any
    asg_thrice: int
    asg_twice: int
    grapheme_set_size: int
    graphemes_by_character: dict
    def __init__(self, allowed_characters) -> None: ...
    def decode_grapheme(self, grapheme, previous_grapheme) -> Any: ...
    def encode(self, label) -> list: ...

class CtcGraphemeEncoding(GraphemeEncodingBase):
    allowed_character_count: int
    allowed_characters: Any
    ctc_blank: int
    grapheme_set_size: int
    graphemes_by_character: dict
    def __init__(self, allowed_characters) -> None: ...
    def decode_grapheme(self, grapheme, previous_grapheme) -> Any: ...
    def encode(self, label) -> list: ...

class GraphemeEncodingBase:
    allowed_character_count: int
    allowed_characters: Any
    grapheme_set_size: Any
    graphemes_by_character: Dict[Any, int]
    def __init__(self, allowed_characters, special_grapheme_count) -> None: ...
    @abstractmethod
    def decode_grapheme(self, grapheme, previous_grapheme) -> None: ...
    def decode_grapheme_batch(self, grapheme_batch, prediction_lengths, merge_repeated = ...) -> list: ...
    def decode_graphemes(self, graphemes, merge_repeated = ...) -> str: ...
    def decode_prediction_batch(self, prediction_batch, prediction_lengths) -> Any: ...
    @abstractmethod
    def encode(self, label) -> None: ...
    def encode_character(self, label_char) -> int: ...
    def encode_label_batch(self, labels) -> Any: ...

def abstractmethod(callable: _FuncT) -> _FuncT: ...
def array(object, dtype = ..., copy: bool = ..., order: str = ..., subok: bool = ..., ndmin: int = ...) -> numpy.ndarray: ...
@overload
def groupby(iterable: Iterable[_T], key: Callable[[_T], _S]) -> Iterator[Tuple[_S, Iterator[_T]]]: ...
@overload
def groupby(iterable: Iterable[_T], key: None = ...) -> Iterator[Tuple[_T, Iterator[_T]]]: ...
