# (generated with --quick)

from typing import Any, Coroutine, NoReturn, TypeVar

_TNumberOfEntities = TypeVar('_TNumberOfEntities', bound=NumberOfEntities)

class NumberOfEntities:
    __slots__ = ["num_clients", "num_events", "num_guard_conditions", "num_services", "num_subscriptions", "num_timers"]
    num_clients: Any
    num_events: Any
    num_guard_conditions: Any
    num_services: Any
    num_subscriptions: Any
    num_timers: Any
    def __add__(self: _TNumberOfEntities, other) -> _TNumberOfEntities: ...
    def __init__(self, num_subs = ..., num_gcs = ..., num_timers = ..., num_clients = ..., num_services = ..., num_events = ...) -> None: ...
    def __repr__(self) -> str: ...

class Waitable:
    __doc__: str
    _executor_event: bool
    _futures: list
    callback_group: Any
    def __init__(self, callback_group) -> None: ...
    def add_future(self, future) -> None: ...
    def add_to_wait_set(self, wait_set) -> NoReturn: ...
    def execute(self, taken_data) -> Coroutine[Any, Any, nothing]: ...
    def get_num_entities(self) -> NoReturn: ...
    def is_ready(self, wait_set) -> NoReturn: ...
    def remove_future(self, future) -> None: ...
    def take_data(self) -> NoReturn: ...
