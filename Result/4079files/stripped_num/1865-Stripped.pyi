# (generated with --quick)

from typing import Any, Tuple, TypeVar

argparse: module
lArgParser: argparse.ArgumentParser
lArgs: argparse.Namespace
lCountInvolutaryKeys: int
math: module

_T1 = TypeVar('_T1')

def derive_key(lKey) -> bytearray: ...
def extended_euclidian_algorithm(a, b: _T1) -> Tuple[Any, Any, Any]: ...
def get_adjunct(pMatrix, pModulus) -> bytearray: ...
def get_count_involutary_keys(pModulus) -> int: ...
def get_determinant(pKey, pModulus) -> Any: ...
def get_gcd(x, y) -> Any: ...
def get_int_modulo_n_in_zn(pInt, pModulus) -> Any: ...
def get_inverse_matrix(pMatrix, pModulus) -> bytearray: ...
def get_multiplicative_inverse(a, n) -> Any: ...
def key_is_involutary(pKey, pModulus) -> bool: ...
