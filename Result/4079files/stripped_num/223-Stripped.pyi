# (generated with --quick)

import abc
import collections
import pathlib
from typing import Any, Callable, Iterable, Optional, Sized, Tuple, Type, TypeVar, Union

_ServiceConfig = `namedtuple-_ServiceConfig-service_name-config_name-config_suffix`

ABC: Type[abc.ABC]
DEFAULT_PROCESS_EVENTS_LIMIT: int
DEFAULT_SOA_DIR: str
Path: Type[pathlib.Path]
fnmatch: module
log: logging.Logger
logging: module
os: module
pyinotify: Any

_FuncT = TypeVar('_FuncT', bound=Callable)
_TConfigsFileWatcher = TypeVar('_TConfigsFileWatcher', bound=ConfigsFileWatcher)
_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix = TypeVar('_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix', bound=`namedtuple-_ServiceConfig-service_name-config_name-config_suffix`)

class BaseCachedView(abc.ABC):
    __doc__: str
    @abstractmethod
    def add(self, path, service_name, config_name, config_suffix) -> Any: ...
    @abstractmethod
    def remove(self, path, service_name, config_name, config_suffix) -> Any: ...

class ConfigsFileWatcher:
    __doc__: str
    _configs_folder: Any
    _configs_names: Optional[set]
    _configs_suffixes: Optional[set]
    _exclude_folders_filters: Any
    _notifier: Any
    _processed_events_count: int
    _services_names: Any
    configs_view: Any
    def __enter__(self: _TConfigsFileWatcher) -> _TConfigsFileWatcher: ...
    def __exit__(self, err_type, err_val, err_tb) -> None: ...
    def __init__(self, configs_view, configs_folder = ..., services_names = ..., configs_names = ..., configs_suffixes = ..., exclude_folders_filters = ...) -> None: ...
    def _exclude_filter(self, path) -> bool: ...
    def _maybe_add_path_to_cache(self, path) -> None: ...
    def _maybe_remove_path_from_cache(self, path) -> None: ...
    def _process_inotify_event(self) -> None: ...
    def _service_name_and_config_from_path(self, path) -> Optional[`namedtuple-_ServiceConfig-service_name-config_name-config_suffix`]: ...
    def close(self) -> None: ...
    @staticmethod
    def log_inotify_constants() -> None: ...
    def process_events(self, limit = ...) -> None: ...
    def setup(self) -> None: ...

class _EventHandler(Any):
    cache: Any
    def my_init(self, cache) -> None: ...
    def process_IN_CREATE(self, event) -> None: ...
    def process_IN_DELETE(self, event) -> None: ...
    def process_IN_DELETE_SELF(self, event) -> None: ...
    def process_IN_MOVED_TO(self, event) -> None: ...
    def process_IN_Q_OVERFLOW(self, event) -> None: ...

class `namedtuple-_ServiceConfig-service_name-config_name-config_suffix`(tuple):
    __slots__ = ["config_name", "config_suffix", "service_name"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    config_name: Any
    config_suffix: Any
    service_name: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`], service_name, config_name, config_suffix) -> `_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`: ...
    def _replace(self: `_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`, **kwds) -> `_Tnamedtuple-_ServiceConfig-service_name-config_name-config_suffix`: ...

def abstractmethod(callable: _FuncT) -> _FuncT: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
