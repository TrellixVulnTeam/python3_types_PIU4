# (generated with --quick)

from typing import Any, Dict

logger: logging.Logger
logging: module
threading: module
zhelper: Any
zmq: Any
zsocket: Any

class ZActor(object):
    ZACTOR_TAG: int
    ctx: Any
    is_running: bool
    pipe: Any
    shim_args: tuple
    shim_handler: Any
    shim_kwargs: Dict[str, Any]
    shim_pipe: Any
    tag: int
    thread: threading.Thread
    def __init__(self, ctx, actor, *args, **kwargs) -> None: ...
    def destroy(self) -> None: ...
    def is_zactor(self) -> Any: ...
    def recv(self, *args, **kwargs) -> Any: ...
    def recv_multipart(self, *args, **kwargs) -> Any: ...
    def recv_pyobj(self, *args, **kwargs) -> Any: ...
    def recv_unicode(self, *args, **kwargs) -> Any: ...
    def resolve(self) -> Any: ...
    def run(self) -> None: ...
    def send(self, *args, **kwargs) -> Any: ...
    def send_multipart(self, *args, **kwargs) -> Any: ...
    def send_pyobj(self, *args, **kwargs) -> Any: ...
    def send_unicode(self, *args, **kwargs) -> Any: ...

def echo_actor(ctx, pipe, *args) -> Any: ...
def zactor_test(verbose = ...) -> None: ...
