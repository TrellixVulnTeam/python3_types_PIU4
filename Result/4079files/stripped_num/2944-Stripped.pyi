# (generated with --quick)

import pkg_resources
from typing import Any, Dict, Optional, TextIO, Union

libhfst: Any
os: module
regex: Any
stdin: TextIO

class Analyser:
    ANALYSER_REGEX: Any
    POS_REGEX: Any
    RESOURCE_PATH: str
    analyser: Any
    fsa: Optional[str]
    transducer: Any
    def __init__(self) -> None: ...
    def analyse(self, token, weighted = ...) -> Any: ...
    def get_analyser(self) -> Any: ...
    @staticmethod
    def get_pos_weight(pos) -> int: ...
    @staticmethod
    def get_weight(analysis) -> int: ...
    @staticmethod
    def parse_analysis(analysis) -> Dict[str, Any]: ...

class Generator:
    RESOURCE_PATH: str
    fsa: Optional[str]
    generator: Any
    transducer: Any
    def __init__(self) -> None: ...
    def generate(self, token, weighted = ...) -> Any: ...
    def get_generator(self) -> Any: ...
    @staticmethod
    def get_weight(generated_word, token) -> Any: ...

def get_transducer(fsa) -> Any: ...
def resource_exists(package_or_requirement: Union[str, pkg_resources.Requirement], resource_name: str) -> bool: ...
def resource_filename(package_or_requirement: Union[str, pkg_resources.Requirement], resource_name: str) -> str: ...
