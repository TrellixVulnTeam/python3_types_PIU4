# (generated with --quick)

import collections
import contextlib
from typing import Any, Callable, Coroutine, Dict, Iterator, Type, TypeVar
import uuid

ConnectionInfo: Any
EdgeData: Any
IndexDefinition: Any
IndexEntry: Any
KvetchData: Any
KvetchShard: Any
OrderedDict: Type[collections.OrderedDict]
StoredIdEdgeDefinition: Any
UUID: Type[uuid.UUID]
body_to_data: Any
data_to_body: Any
datetime: Type[datetime.datetime]
pymysql: module
pymysql_conn_from_info: Any
row_to_obj: Any

_T = TypeVar('_T')
_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')

class KvetchDbShard(Any):
    _pool: Any
    def __init__(self, *, pool) -> None: ...
    def create_safe_conn(self) -> Any: ...
    def gen_delete_index_entry(self, index, index_value, target_id) -> Coroutine[Any, Any, None]: ...
    def gen_delete_object(self, obj_id) -> Coroutine[Any, Any, None]: ...
    def gen_edge_ids(self, edge_definition, from_id, after = ..., first = ...) -> Coroutine[Any, Any, list]: ...
    def gen_edges(self, edge_definition, from_id, after = ..., first = ...) -> coroutine: ...
    def gen_index_entries(self, index, value) -> coroutine: ...
    def gen_insert_edge(self, edge_definition, from_id, to_id, data = ...) -> Coroutine[Any, Any, None]: ...
    def gen_insert_index_entry(self, index, index_value, target_id) -> Coroutine[Any, Any, None]: ...
    def gen_insert_object(self, new_id: _T0, type_id, data) -> Coroutine[Any, Any, _T0]: ...
    def gen_insert_objects(self, new_ids: _T0, type_id, datas) -> Coroutine[Any, Any, _T0]: ...
    def gen_object(self, obj_id) -> coroutine: ...
    def gen_objects(self, ids) -> Coroutine[Any, Any, Dict[uuid.UUID, Any]]: ...
    def gen_objects_of_type(self, type_id, after = ..., first = ...) -> Coroutine[Any, Any, collections.OrderedDict]: ...
    def gen_update_object(self, obj_id, data) -> Coroutine[Any, Any, None]: ...

class KvetchDbSingleConnectionPool:
    conn_info: Any
    create_safe_conn: Callable[..., contextlib._GeneratorContextManager]
    def __init__(self, conn_info) -> None: ...

def _kv_shard_delete_index_entry(shard_conn, index_name, index_column, index_value, target_id) -> None: ...
def _kv_shard_delete_object(shard_conn, obj_id) -> None: ...
def _kv_shard_get_edges(shard_conn, edge_id, from_id, after, first) -> list: ...
def _kv_shard_get_index_entries(shard_conn, index_name, index_column, index_value) -> list: ...
def _kv_shard_get_object(shard_conn, obj_id) -> Any: ...
def _kv_shard_get_objects(shard_conn, obj_ids) -> Dict[uuid.UUID, Any]: ...
def _kv_shard_get_objects_by_type(shard_conn, type_id, after = ..., first = ...) -> collections.OrderedDict[nothing, nothing]: ...
def _kv_shard_insert_edge(shard_conn, edge_id, from_id, to_id, data) -> None: ...
def _kv_shard_insert_index_entry(shard_conn, index_name, index_column, index_value, target_id) -> None: ...
def _kv_shard_insert_object(shard_conn, new_id: _T1, type_id, data) -> _T1: ...
def _kv_shard_insert_objects(shard_conn, new_ids: _T1, type_id, datas) -> _T1: ...
def _kv_shard_replace_object(shard_conn, obj_id, data) -> None: ...
def _to_sql_value(value) -> Any: ...
def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
