# (generated with --quick)

import _importlib_modulespec
import logging
import requests.exceptions
import requests.models
from typing import Any, IO, Iterable, Mapping, Optional, Tuple, Type, TypeVar, Union
import zipfile

BadZipFile: Type[zipfile.BadZipFile]
BeautifulSoup: Any
ConnectionError: Type[requests.exceptions.ConnectionError]
LOG: logging.Logger
PARSER: str
ZipFile: Type[zipfile.ZipFile]

AnyStr = TypeVar('AnyStr', str, bytes)

@overload
def NamedTemporaryFile(mode, buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO[str]: ...
@overload
def NamedTemporaryFile(mode = ..., buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO[bytes]: ...
@overload
def NamedTemporaryFile(mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., newline: Optional[str] = ..., suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ..., dir: Optional[Union[_PathLike[AnyStr], AnyStr]] = ..., delete: bool = ...) -> IO: ...
def download(code, cookies, database, no_download = ..., overwrite = ..., **kwargs) -> None: ...
def find_spec(name: str, package: Optional[str] = ...) -> Optional[_importlib_modulespec.ModuleSpec]: ...
def get(url: Union[bytes, str], params: Optional[Union[bytes, str, Mapping[Union[bytes, float, str], Union[bytes, float, str, Iterable[Union[bytes, float, str]]]], Tuple[Union[bytes, float, str], Union[bytes, float, str, Iterable[Union[bytes, float, str]]]]]] = ..., **kwargs) -> requests.models.Response: ...
def getLogger(name: Optional[str] = ...) -> logging.Logger: ...
def isdir(path: Union[_PathLike, bytes, str]) -> bool: ...
def isfile(path: Union[_PathLike, bytes, str]) -> bool: ...
def makedirs(name: Union[_PathLike, bytes, str], mode: int = ..., exist_ok: bool = ...) -> None: ...
