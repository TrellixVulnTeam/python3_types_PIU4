# (generated with --quick)

from typing import Any, Dict, List, Tuple, TypeVar, Union

re: module

_T1 = TypeVar('_T1')
_TSignature = TypeVar('_TSignature', bound=Signature)

class Interpretation(object):
    __doc__: str
    children: List[Interpretation]
    name: Any
    operations: list
    parent: Any
    def __init__(self, name) -> None: ...
    def __str__(self) -> Any: ...
    def pre(self) -> Any: ...

class Operation(object):
    __doc__: str
    name: Any
    signatures: dict
    def __init__(self, name) -> None: ...
    def __str__(self) -> Any: ...
    def add_signature(self, interp, sig) -> None: ...
    def get_definition(self, interp) -> Any: ...

class Signature(object):
    __doc__: str
    anchor: Any
    args: Any
    interpretation: Any
    operation: Any
    result: Any
    def __init__(self, interpretation, operation, args, result, anchor) -> None: ...
    def mdlink(self, ext = ...) -> str: ...
    def with_result(self: _TSignature, new_result) -> _TSignature: ...

class Specification(object):
    __doc__: str
    interpretations: list
    interpretations_byname: dict
    operations: List[Operation]
    operations_byname: Dict[Any, Operation]
    def add_interpretation(self, interp) -> None: ...
    def extract_interpretations(self, text) -> None: ...
    def extract_operations(self, text) -> List[Tuple[Union[Interpretation, _T1], Any]]: ...
    def get_operation(self, name) -> Operation: ...
    def interpretations_pre(self) -> Any: ...
    def parse(self, text) -> None: ...
