# (generated with --quick)

import contextlib
from typing import Any, Callable, Dict, Iterator, List, Optional, Set, TextIO, TypeVar, Union

DEFAULTS: Dict[str, str]
_LOG: logging.Logger
_NAME_KEY_TO_TRY: List[str]
_OID_IGNORED_KEYS: Set[str]
__author__: str
__copyright__: str
fcntl: Optional[module]
hashlib: module
lock: Callable[..., contextlib._GeneratorContextManager]
logging: module
os: module
yaml: module

_T = TypeVar('_T')
_T0 = TypeVar('_T0')

def _check_dir_for_file(fpath) -> None: ...
def _conf2string(conf) -> list: ...
def _find_config_file(name: _T0, must_exists = ...) -> Union[str, _T0]: ...
def _try_lock() -> Optional[TextIO]: ...
def _unlock(fhandler) -> None: ...
def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
def gen_input_oid(conf) -> Any: ...
def get_input_name(conf, idx = ...) -> Any: ...
def load_configuration(filename) -> Any: ...
def load_inputs(filename) -> Optional[list]: ...
