# (generated with --quick)

from typing import Any, Dict, Tuple, TypeVar, Union

_BETALNCACHE: Dict[Tuple[Any, Any], Any]

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_T2 = TypeVar('_T2')
_T3 = TypeVar('_T3')

def _cachedBetaln(a, b) -> Any: ...
def _logsubexp(a, b) -> Any: ...
def _meanVarToBeta(mean, var) -> Tuple[Any, Any]: ...
def _rebalace(prior, result, tnow, proposed: _T3) -> Union[Tuple[Any, Any, Any], _T3]: ...
def _subexp(x, y) -> Any: ...
def defaultModel(t: _T0, alpha: _T1 = ..., beta: _T2 = ...) -> Tuple[_T1, Union[_T1, _T2], _T0]: ...
def modelToPercentileDecay(model, percentile = ..., coarse = ...) -> Any: ...
def predictRecall(prior, tnow, exact = ...) -> Any: ...
def updateRecall(prior, result, tnow, rebalance = ..., tback = ...) -> Any: ...
