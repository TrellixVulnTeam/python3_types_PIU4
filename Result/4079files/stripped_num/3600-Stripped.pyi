# (generated with --quick)

import types
from typing import Any, Dict, List, Optional, Pattern, Tuple, Type, Union

AbstractServiceHandler: Any
Episode: Any
_exludors: List[Pattern[str]]
_num_extractors: List[Pattern[str]]
datetime: Type[datetime.datetime]
re: module
timedelta: Type[datetime.timedelta]

class ServiceHandler(Any):
    _search_base: str
    def __init__(self) -> None: ...
    def _get_feed_episodes(self, show_key, **kwargs) -> Any: ...
    def extract_show_key(self, url) -> None: ...
    def get_all_episodes(self, stream, **kwargs) -> list: ...
    def get_seasonal_streams(self, **kwargs) -> List[nothing]: ...
    def get_stream_info(self, stream, **kwargs) -> None: ...
    def get_stream_link(self, stream) -> None: ...

def _digest_episode(feed_episode) -> Any: ...
def _extract_episode_num(name) -> Optional[int]: ...
def _is_valid_episode(feed_episode) -> bool: ...
def _verify_feed(feed) -> bool: ...
def debug(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def error(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def exception(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def info(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
@overload
def url_quote(string: bytes, safe: Union[bytes, str] = ...) -> str: ...
@overload
def url_quote(string: str, safe: Union[bytes, str] = ..., encoding: str = ..., errors: str = ...) -> str: ...
def warning(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
