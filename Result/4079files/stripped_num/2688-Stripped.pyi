# (generated with --quick)

from typing import Any, Coroutine

SMTP: Any
SMTPConnectError: Any
SMTPException: Any
SMTPResponseException: Any
SMTPServerDisconnected: Any
SMTPStatus: Any
copy: module
pytest: Any
pytestmark: Any
socket: module
ssl: module
tls_smtp_client: Any
tls_smtpd_server: Any

def test_starttls(smtp_client, smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_starttls_advertised_but_not_supported(smtp_client, smtpd_server, smtpd_class, smtpd_response_handler_factory, monkeypatch) -> Coroutine[Any, Any, None]: ...
def test_starttls_cert_error(event_loop, smtp_client, smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_starttls_connect_kwarg(smtp_client, smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_starttls_disconnect_before_upgrade(smtp_client, smtpd_server, smtpd_class, smtpd_response_handler_factory, monkeypatch) -> Coroutine[Any, Any, None]: ...
def test_starttls_init_kwarg(hostname, port, smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_starttls_invalid_responses(smtp_client, smtpd_server, event_loop, smtpd_class, smtpd_response_handler_factory, monkeypatch, error_code) -> Coroutine[Any, Any, None]: ...
def test_starttls_not_supported(smtp_client, smtpd_server, smtpd_class, smtpd_response_handler_factory, monkeypatch) -> Coroutine[Any, Any, None]: ...
def test_starttls_with_client_cert(smtp_client, smtpd_server, valid_cert_path, valid_key_path) -> Coroutine[Any, Any, None]: ...
def test_starttls_with_explicit_server_hostname(smtp_client, hostname, smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_starttls_with_invalid_client_cert(smtp_client, smtpd_server, invalid_cert_path, invalid_key_path) -> Coroutine[Any, Any, None]: ...
def test_tls_connection(tls_smtp_client, tls_smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_tls_connection_with_cert_error(event_loop, tls_smtp_client, tls_smtpd_server) -> Coroutine[Any, Any, None]: ...
def test_tls_connection_with_client_cert(tls_smtp_client, tls_smtpd_server, hostname, valid_cert_path, valid_key_path) -> Coroutine[Any, Any, None]: ...
def test_tls_connection_with_existing_sslcontext(tls_smtp_client, tls_smtpd_server, client_tls_context) -> Coroutine[Any, Any, None]: ...
def test_tls_get_transport_info(tls_smtp_client, tls_smtpd_server, hostname, port, event_loop) -> Coroutine[Any, Any, None]: ...
def test_tls_smtp_connect_to_non_tls_server(tls_smtp_client, smtpd_server, event_loop, hostname, port) -> Coroutine[Any, Any, None]: ...
