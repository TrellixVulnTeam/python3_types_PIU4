# (generated with --quick)

from typing import Any, Dict, List, Tuple, TypeVar

Printer: Any
get_printer: Any

_FileSizeType = TypeVar('_FileSizeType', bound=FileSize)
_TFileSize = TypeVar('_TFileSize', bound=FileSize)

class FileSize:
    MULTIPLIERS: List[Tuple[str, int]]
    SIZE_COLORS: Dict[str, Any]
    __doc__: str
    bytes: Any
    kilo_bytes: Any
    mega_bytes: Any
    size: Any
    def __add__(self: _TFileSize, file_size) -> _TFileSize: ...
    def __eq__(self, other) -> bool: ...
    def __float__(self) -> float: ...
    def __floordiv__(self: _TFileSize, amount) -> _TFileSize: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __init__(self, size) -> None: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __mul__(self: _TFileSize, amount) -> _TFileSize: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __sub__(self: _TFileSize, file_size) -> _TFileSize: ...
    def __truediv__(self: _TFileSize, amount) -> _TFileSize: ...
    def _unit_info(self) -> Tuple[str, int]: ...
    @staticmethod
    def get_file_size_string(size_bytes) -> str: ...
    def pretty_print(self, printer = ..., min_width = ..., min_unit_width = ...) -> None: ...
