# (generated with --quick)

import collections
from typing import Any, Dict, List, NoReturn, Optional, Type, Union

Logger: Any
PickleContainer: Any
R: Any
copy: module
deque: Type[collections.deque]
logger: Any
now: Any
random: module
web: Any
workers: Any

class ErrorHandler(_BaseHandler):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def get(self, project_id, tag) -> Any: ...
    def patch(self, project_id, tag) -> Any: ...
    def rollback(self, project_id, tag) -> Any: ...

class ErrorsHandler(_BaseHandler):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def get(self, project_id) -> Any: ...

class MongoDriver(object):
    def add(self, project_id, urls, priority) -> NoReturn: ...
    def create(self, project_id, seeders, timeout, interval, results_mode) -> NoReturn: ...
    def exist(self, project_id, url, url_hash) -> NoReturn: ...
    def get_error_tags(self, project_id) -> NoReturn: ...
    def get_error_urls(self, project_id, tag, start = ..., limit = ...) -> NoReturn: ...
    def get_projects(self) -> NoReturn: ...
    def get_queues(self, project_id) -> NoReturn: ...
    def modify_options(self, project_id, timeout, interval) -> NoReturn: ...
    def pop(self, projects, limit = ...) -> NoReturn: ...
    def remove(self, project_id) -> NoReturn: ...
    def report_error(self, project_id, url, tag) -> NoReturn: ...
    def report_finish(self, project_id, url) -> NoReturn: ...
    def rollback_errors(self, project_id, tag, priority) -> NoReturn: ...

class PickleDriver(object):
    _count: int
    _db: Any
    _max_count: int
    _next_pop_time: dict
    def __init__(self, path) -> None: ...
    def _flush(self) -> None: ...
    def add(self, project_id, urls, priority) -> List[Optional[str]]: ...
    def create(self, project_id, seeders, timeout, interval, results_mode) -> None: ...
    def exist(self, project_id, url, url_hash) -> Optional[str]: ...
    def get_error_tags(self, project_id) -> Dict[Any, int]: ...
    def get_error_urls(self, project_id, tag, start = ..., limit = ...) -> list: ...
    def get_projects(self) -> list: ...
    def get_queues(self, project_id) -> Dict[str, Any]: ...
    def modify_options(self, project_id, timeout, interval) -> None: ...
    def pop(self, projects, limit = ...) -> list: ...
    def remove(self, project_id) -> None: ...
    def report_error(self, project_id, url, tag) -> None: ...
    def report_finish(self, project_id, url) -> None: ...
    def rollback_errors(self, project_id, tag, priority) -> list: ...

class QueueHandler(_BaseHandler):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def delete(self, project_id) -> Any: ...
    def get(self, project_id) -> Any: ...
    def patch(self, project_id) -> Any: ...

class QueueURLsHandler(_BaseHandler):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def patch(self, project_id) -> Any: ...
    def pop(self) -> Any: ...
    def post(self, project_id) -> Any: ...
    def report_error(self, project_id) -> Any: ...
    def report_finish(self, project_id) -> Any: ...

class QueuesHandler(_BaseHandler):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def get(self) -> Any: ...
    def post(self) -> Any: ...

class _BaseHandler(Any):
    driver: Union[MongoDriver, PickleDriver]
    worker_driver: Any
    def __init__(self, *args, **kwargs) -> None: ...
