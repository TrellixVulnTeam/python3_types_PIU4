# (generated with --quick)

from typing import Any, Callable, Coroutine, Dict, List, Optional, Sequence, Union

NO_SUCH_ROOM: str
ROOM_ALREADY_EXISTS: str
ROOM_FILLED: str
SUCCESS: str
TOO_MANY_ROOMS: str
analyze_aid_turn: Callable
analyze_bomb_turn: Callable
analyze_concrete_turn: Callable
analyze_go_turn: Callable
analyze_knife_turn: Callable
datetime: module
fields: module
json: module
logging: module

def close_reason(websocket, reason) -> Coroutine[Any, Any, None]: ...
def create_packet_aid() -> Dict[str, Optional[Union[int, str]]]: ...
def create_packet_bomb() -> Dict[str, Union[int, str, List[int]]]: ...
def create_packet_concrete() -> Dict[str, Union[int, str, List[int]]]: ...
def create_packet_go() -> Dict[str, Optional[Union[int, str, List[int]]]]: ...
def create_packet_knife() -> Dict[str, Optional[Union[int, str, List[int]]]]: ...
def parse_json(message) -> Any: ...
def to_json(func) -> Callable: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
