# (generated with --quick)

import collections
from typing import Any, Callable, Generator, Iterable, Sequence, Sized, Tuple, Type, TypeVar

inspect: module

_TIssueDescription = TypeVar('_TIssueDescription', bound=IssueDescription)

class DetailedTypeError(TypeError):
    __doc__: str
    issues: Any
    def __init__(self, issues) -> None: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __len__(self) -> int: ...

class IssueDescription(tuple):
    __slots__ = []
    __dict__: collections.OrderedDict[str, None]
    __doc__: str
    _field_defaults: collections.OrderedDict[str, None]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[nothing, ...]
    generic_message: None
    def __getnewargs__(self) -> Tuple[nothing, ...]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TIssueDescription]) -> _TIssueDescription: ...
    def _asdict(self) -> collections.OrderedDict[str, None]: ...
    @classmethod
    def _make(cls: Type[_TIssueDescription], iterable: Iterable[None], new = ..., len: Callable[[Sized], int] = ...) -> _TIssueDescription: ...
    def _replace(self: _TIssueDescription, **kwds: None) -> _TIssueDescription: ...

def check_args(func) -> Callable: ...
def check_type(obj, candidate_type, reltype = ...) -> Any: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
