# (generated with --quick)

import __future__
import _importlib_modulespec
import argparse
import core.environment
import subprocess
from typing import Any, Callable, IO, Mapping, Optional, Sequence, Type, Union

ArgumentParser: Type[argparse.ArgumentParser]
CalledProcessError: Type[subprocess.CalledProcessError]
Environment: Type[core.environment.Environment]
Popen: Type[subprocess.Popen]
STDOUT: int
coloredlogs: Any
conf: Any
config: Any
cpuinfo: Any
logging: module
os: module
platform: module
print_function: __future__._Feature
re: module

class CLIEnvironment(core.environment.Environment):
    def __init__(self, cli_args, *args, **kwargs) -> None: ...

class Manager:
    __doc__: str
    benchmark_name: Any
    debug: str
    names: Any
    verbose: str
    def __init__(self, args) -> None: ...
    def print_hw_parameters(self, args) -> None: ...
    def run_benchmark(self, name) -> None: ...
    def set_configuration(self, args) -> None: ...
    def set_environment(self, args) -> None: ...
    def start(self, action) -> None: ...

def check_call(args: Union[bytes, str, Sequence[Union[_PathLike, bytes, str]]], bufsize: int = ..., executable: Union[_PathLike, bytes, str] = ..., stdin: Optional[Union[int, IO]] = ..., stdout: Optional[Union[int, IO]] = ..., stderr: Optional[Union[int, IO]] = ..., preexec_fn: Callable[[], Any] = ..., close_fds: bool = ..., shell: bool = ..., cwd: Optional[Union[_PathLike, bytes, str]] = ..., env: Optional[Mapping[Union[bytes, str], Union[bytes, str]]] = ..., universal_newlines: bool = ..., startupinfo = ..., creationflags: int = ..., restore_signals: bool = ..., start_new_session: bool = ..., pass_fds = ..., timeout: Optional[float] = ...) -> int: ...
def exec_scripts(path, name_pattern) -> bool: ...
def get_arguments() -> argparse.Namespace: ...
def import_module(name: str, package: Optional[str] = ...) -> _importlib_modulespec.ModuleType: ...
def main() -> None: ...
def run_python_module(exp_name, file_name, benchmark_name = ...) -> Any: ...
def set_all_environments(debug = ..., verbose = ..., env_type = ...) -> None: ...
def set_logging(verbose = ...) -> None: ...
