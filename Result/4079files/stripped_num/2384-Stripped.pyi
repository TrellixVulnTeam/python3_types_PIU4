# (generated with --quick)

import multiprocessing.pool
from typing import Any, Dict, Tuple, TypeVar

Base: Any
C: Any
ClauseElement: Any
IntegrityError: Any
Session: Any
__async_job_id: int
__async_jobs: Dict[int, Dict[str, Any]]
__db_engine: Any
__db_pool: multiprocessing.pool.Pool
__db_session: Any
asyncio: module
automap_base: Any
create_engine: Any
datetime: module
err: Exception
mp: module
os: module
sessionmaker: Any
sqlalchemy: Any

_T0 = TypeVar('_T0')

def __execute_async(async_job_id: _T0, query) -> Tuple[_T0, Any]: ...
def __execute_callback(result) -> None: ...
def __getattr__(name) -> Any: ...
def cancel(async_job_id) -> None: ...
def check_session(obj) -> None: ...
def execute(query) -> Any: ...
def execute_aio(query) -> coroutine: ...
def execute_bw(query, callback = ...) -> int: ...
def generic_count(obj) -> Any: ...
def generic_save(obj) -> None: ...
def get_or_create(session, model, defaults = ..., **kwargs) -> Tuple[Any, bool]: ...
def init_pg(user, password, host, port, db) -> Any: ...
def session() -> Any: ...
