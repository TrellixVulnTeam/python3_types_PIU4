# (generated with --quick)

from typing import Any, List, Optional, Tuple, Union

NNManager: Any
PNG_SUFFIX: Any
TRAIN_DAT_MTX: Any
TRAIN_DAT_SUFFIX: Any
__author__: str
_dir: Any
argparse: module
args: argparse.Namespace
cv2: Any
cvconf: Any
destroy_win: Any
manager: Any
np: module
os: module
regex: module
show: Any

def archive(idx) -> None: ...
def display_histo(labels, nb_bins = ...) -> None: ...
def distrib_imbalance(labels, nb_bins = ...) -> List[Tuple[int, Any]]: ...
def exists(path: Union[_PathLike, bytes, int, str]) -> bool: ...
def extract_ys(base_dir) -> None: ...
def get_argparser() -> argparse.ArgumentParser: ...
def isfile(path: Union[_PathLike, bytes, str]) -> bool: ...
@overload
def join(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def join(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def merge_npz(train_data_dir, pattern) -> Tuple[Any, Any, Optional[list]]: ...
def raw_histo(labels, nb_bins = ...) -> Any: ...
def run_batch(manager, base_dir, train = ..., eval = ..., epochs = ..., bs = ...) -> None: ...
def split_data(base_dir) -> Tuple[Any, Any, Any, Any]: ...
