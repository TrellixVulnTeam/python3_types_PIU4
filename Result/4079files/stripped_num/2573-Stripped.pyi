# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, List, Optional, Sized, Tuple, Type, TypeVar, Union

Token = `namedtuple-Token-kind-value`

re: module

_T1 = TypeVar('_T1')
_Tnamedtuple-Token-kind-value = TypeVar('_Tnamedtuple-Token-kind-value', bound=`namedtuple-Token-kind-value`)

class `namedtuple-Token-kind-value`(tuple):
    __slots__ = ["kind", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    kind: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Token-kind-value`], kind, value) -> `_Tnamedtuple-Token-kind-value`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Token-kind-value`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Token-kind-value`: ...
    def _replace(self: `_Tnamedtuple-Token-kind-value`, **kwds) -> `_Tnamedtuple-Token-kind-value`: ...

def _transform(kind, text: _T1) -> Optional[Union[str, _T1]]: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def preprocess_options(options_line) -> str: ...
def tokenize(options_line) -> List[`namedtuple-Token-kind-value`]: ...
def validate_options(options_line) -> None: ...
