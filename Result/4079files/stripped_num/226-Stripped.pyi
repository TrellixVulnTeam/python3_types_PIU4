# (generated with --quick)

import logging.handlers
import types
from typing import Any, Dict, Optional, SupportsFloat, Tuple, Type, Union

Interval: Any
RotatingFileHandler: Type[logging.handlers.RotatingFileHandler]
const: Any
logger: logging.Logger
logging: module
sys: module
time: module

class lvl0:
    def cfg_dst_not_exists_error(item) -> None: ...
    def cfg_no_absolute_path_error(item) -> None: ...
    def cfg_type_error(item, type_) -> None: ...
    def job_out_info(init_time, message = ..., completed = ..., skipped = ..., failed = ..., unknown = ...) -> None: ...
    def job_start_info(ip, src, due_snapshots) -> None: ...
    def skip_info(online, due_jobs, ip, path) -> None: ...
    def ts_msg(msg = ...) -> str: ...

class lvl1:
    def backup_dst_invalid_error(backup_dst) -> None: ...
    def backup_src_not_exist_error(backup_src) -> None: ...
    def ts_msg(msg = ...) -> str: ...

def _backup_dst_invalid_error(backup_dst) -> None: ...
def _backup_src_not_exist_error(backup_src) -> None: ...
def _cfg_dst_not_exists_error(item) -> None: ...
def _cfg_no_absolute_path_error(item) -> None: ...
def _cfg_type_error(item, type_) -> None: ...
def _fix_len(string, limit, filler = ..., rpl = ...) -> Any: ...
def _job_out_info(init_time, message = ..., completed = ..., skipped = ..., failed = ..., unknown = ...) -> None: ...
def _job_start_info(ip, src, due_snapshots) -> None: ...
def _skip_info(online, due_jobs, ip, path) -> None: ...
def _ts_msg_lvl0(msg = ...) -> str: ...
def _ts_msg_lvl1(msg = ...) -> str: ...
def ceil(__x: SupportsFloat) -> int: ...
def critical(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def debug(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def error(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def info(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
def init(log_output_dir) -> None: ...
def warning(msg, *args, exc_info: Union[BaseException, bool, Tuple[Optional[type], Optional[BaseException], Optional[types.TracebackType]]] = ..., stack_info: bool = ..., extra: Optional[Dict[str, Any]] = ..., **kwargs) -> None: ...
