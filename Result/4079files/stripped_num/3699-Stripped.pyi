# (generated with --quick)

import io
from typing import Any, Generator, Optional, Type, TypeVar
import unittest.case

StringIO: Type[io.StringIO]
Token: Any
unittest: module

_TIntervalSet = TypeVar('_TIntervalSet', bound=IntervalSet)

class IntervalSet(object):
    intervals: Optional[list]
    readOnly: bool
    def __contains__(self, item) -> bool: ...
    def __getitem__(self, item) -> Any: ...
    def __iter__(self) -> Generator[Any, Any, None]: ...
    def __len__(self) -> int: ...
    def addOne(self, v) -> None: ...
    def addRange(self, v) -> None: ...
    def addSet(self: _TIntervalSet, other) -> _TIntervalSet: ...
    def complement(self: _TIntervalSet, start, stop) -> _TIntervalSet: ...
    def elementName(self, literalNames, symbolicNames, a) -> Any: ...
    def reduce(self, k) -> None: ...
    def removeOne(self, v) -> None: ...
    def removeRange(self, v) -> None: ...
    def toString(self, literalNames, symbolicNames) -> str: ...

class TestIntervalSet(unittest.case.TestCase):
    def testComplement(self) -> None: ...
    def testContiguous1(self) -> None: ...
    def testContiguous2(self) -> None: ...
    def testDistinct1(self) -> None: ...
    def testDistinct2(self) -> None: ...
    def testEmpty(self) -> None: ...
    def testOne(self) -> None: ...
    def testOverlapping1(self) -> None: ...
    def testOverlapping2(self) -> None: ...
    def testOverlapping3(self) -> None: ...
    def testRange(self) -> None: ...
    def testTwo(self) -> None: ...
