# (generated with --quick)

from typing import Any, List, Optional, TypeVar

QAbstractItemModel: Any
QAbstractListModel: Any
QApplication: Any
QByteArray: Any
QDataStream: Any
QFileDialog: Any
QJsonDocument: Any
QJsonParseError: Any
QJsonValue: Any
QMimeData: Any
QModelIndex: Any
QTreeView: Any
QVariant: Any
Qt: Any
app: Any
json: bytes
model: QJsonModel
sys: module
view: Any

_TQJsonTreeItem = TypeVar('_TQJsonTreeItem', bound=QJsonTreeItem)

class QJsonModel(Any):
    mDocument: Any
    mHeaders: List[str]
    mRootItem: Any
    def __init__(self, parent = ...) -> None: ...
    def columnCount(self, parent = ...) -> int: ...
    def data(self, index, role = ...) -> Any: ...
    def headerData(self, section, orientation, role = ...) -> Any: ...
    def index(self, row, column, parent = ...) -> Any: ...
    def load(self, fileName) -> Optional[bool]: ...
    def loadJson(self, json) -> bool: ...
    def parent(self, index) -> Any: ...
    def rowCount(self, parent = ...) -> Any: ...

class QJsonTreeItem(object):
    mChilds: list
    mKey: Any
    mParent: Any
    mType: Any
    mValue: Any
    def __init__(self, parent = ...) -> None: ...
    def appendChild(self, item) -> None: ...
    def child(self, row) -> Any: ...
    def childCount(self) -> int: ...
    def key(self) -> Any: ...
    def load(self: _TQJsonTreeItem, value, parent = ...) -> _TQJsonTreeItem: ...
    def parent(self) -> Any: ...
    def row(self) -> Any: ...
    def setKey(self, key) -> None: ...
    def setType(self, type) -> None: ...
    def setValue(self, value) -> None: ...
    def type(self) -> Any: ...
    def value(self) -> Any: ...
