# (generated with --quick)

import asyncio.locks
import pathlib
from typing import Any, Coroutine, Dict, List, Type
import uuid

BaseDriver: Any
IdentifierData: Any
Path: Type[pathlib.Path]
__all__: List[str]
_driver_counts: Dict[Any, int]
_finalizers: List[weakref.finalize]
_shared_datastore: dict
asyncio: module
json: module
log: logging.Logger
logging: module
os: module
pickle: module
weakref: module

class JSON(Any):
    __doc__: str
    _lock: asyncio.locks.Lock
    data: Any
    data_path: Any
    file_name: Any
    def __init__(self, cog_name, identifier, *, data_path_override = ..., file_name_override = ...) -> None: ...
    def _load_data(self) -> None: ...
    def _save(self) -> Coroutine[Any, Any, None]: ...
    def clear(self, identifier_data) -> Coroutine[Any, Any, None]: ...
    def get(self, identifier_data) -> coroutine: ...
    def get_config_details(self) -> None: ...
    def has_valid_connection(self) -> Coroutine[Any, Any, bool]: ...
    def import_data(self, cog_data, custom_group_data) -> Coroutine[Any, Any, None]: ...
    def migrate_identifier(self, raw_identifier) -> None: ...
    def set(self, identifier_data, value = ...) -> Coroutine[Any, Any, None]: ...

def _save_json(path, data) -> None: ...
def finalize_driver(cog_name) -> None: ...
def uuid4() -> uuid.UUID: ...
