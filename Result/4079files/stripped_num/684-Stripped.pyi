# (generated with --quick)

import collections
from typing import Any, Callable, DefaultDict, Dict, List, Type

T: module
defaultdict: Type[collections.defaultdict]

class EventNotFound(Exception):
    __doc__: str
    event: Any
    def __init__(self, event) -> None: ...

class HandlerNotFound(Exception):
    __doc__: str
    event: Any
    handler: Any
    def __init__(self, event, handler) -> None: ...

class Observable:
    __doc__: str
    _events: DefaultDict[str, list]
    def __init__(self) -> None: ...
    def get_all_handlers(self) -> Dict[str, List[Callable]]: ...
    def get_handlers(self, event) -> List[Callable]: ...
    def is_registered(self, event, handler) -> bool: ...
    def off(self, event = ..., *handlers) -> None: ...
    def on(self, event, *handlers) -> Any: ...
    def once(self, event, *handlers) -> Any: ...
    def trigger(self, event, *args, **kw) -> bool: ...
