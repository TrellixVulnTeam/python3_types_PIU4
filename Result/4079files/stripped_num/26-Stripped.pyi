# (generated with --quick)

from typing import Any, Awaitable, Callable, Sequence, Tuple, Type, Union

_Deco = Callable[[Union[Callable[[Any], Awaitable], type]], Union[Callable[[Any], Awaitable], type]]
_SimpleHandler = Callable[[Any], Awaitable]

AbstractView: Any
PathLike: Any
Request: Any
RouteDef: Any
StaticDef: Any
StreamResponse: Any
UrlDispatcher: Any
_HandlerType: Type[Union[Callable[[Any], Awaitable], type]]
__all__: Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str]
abc: module
attr: Any
hdrs: Any
os: Any

class AbstractRouteDef(Any):
    @abstractmethod
    def register(self, router) -> None: ...

class RouteTableDef(Sequence[AbstractRouteDef]):
    __doc__: str
    _items: list
    def __contains__(self, item) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> listiterator[AbstractRouteDef]: ...
    def __len__(self) -> int: ...
    def delete(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def get(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def head(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def patch(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def post(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def put(self, path, **kwargs) -> Callable[[Any], Any]: ...
    def route(self, method, path, **kwargs) -> Callable[[Any], Any]: ...
    def static(self, prefix, path, **kwargs) -> None: ...
    def view(self, path, **kwargs) -> Callable[[Any], Any]: ...

def delete(path, handler, **kwargs) -> Any: ...
def get(path, handler, *, name = ..., allow_head = ..., **kwargs) -> Any: ...
def head(path, handler, **kwargs) -> Any: ...
def options(path, handler, **kwargs) -> Any: ...
def patch(path, handler, **kwargs) -> Any: ...
def post(path, handler, **kwargs) -> Any: ...
def put(path, handler, **kwargs) -> Any: ...
def route(method, path, handler, **kwargs) -> Any: ...
def static(prefix, path, **kwargs) -> Any: ...
def view(path, handler, **kwargs) -> Any: ...
