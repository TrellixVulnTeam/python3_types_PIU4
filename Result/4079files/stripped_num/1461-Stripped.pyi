# (generated with --quick)

from typing import Any, List, Optional, Tuple, TypeVar

Logger: Any
NumPyUtil: Any
ShapelyUtil: Any
__all__: List[str]
numpy: module
scipy: Any

_TPolygon = TypeVar('_TPolygon', bound=Polygon)

class Polygon:
    _points: Any
    def __eq__(self, other) -> Any: ...
    def __init__(self, points = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _isRightTurn(self, p, q, r) -> int: ...
    @staticmethod
    def approximatedCircle(radius) -> Polygon: ...
    def getConvexHull(self: _TPolygon) -> _TPolygon: ...
    def getMinkowskiHull(self: _TPolygon, other) -> _TPolygon: ...
    def getMinkowskiSum(self: _TPolygon, other) -> _TPolygon: ...
    def getPoints(self) -> Any: ...
    def intersectionConvexHulls(self: _TPolygon, other) -> _TPolygon: ...
    def intersectsPolygon(self, other) -> Optional[Tuple[Any, Any]]: ...
    def isInside(self, point) -> bool: ...
    def isValid(self) -> bool: ...
    def mirror(self: _TPolygon, point_on_axis, axis_direction) -> _TPolygon: ...
    def project(self, normal) -> Tuple[Any, Any]: ...
    def translate(self: _TPolygon, x = ..., y = ...) -> _TPolygon: ...
    def unionConvexHulls(self, other) -> Any: ...
