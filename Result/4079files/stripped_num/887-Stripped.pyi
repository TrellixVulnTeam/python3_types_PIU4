# (generated with --quick)

from typing import Any, List, Optional, Tuple, TypeVar
import unittest.case

logging: module
unittest: module

_TAssertRaises = TypeVar('_TAssertRaises', bound=AssertRaises)

class AssertRaises(object):
    exception: Any
    expected: Any
    def __enter__(self: _TAssertRaises) -> _TAssertRaises: ...
    def __exit__(self, exc_type, exc_value, exc_tb) -> bool: ...
    def __init__(self, exc) -> None: ...

class CompatTestCase(unittest.case.TestCase):
    def assertDictEqual(self, d1, d2, msg = ...) -> None: ...
    def assertIsInstance(self, obj, cls, msg = ...) -> None: ...
    def assertIsNone(self, value, *args) -> None: ...
    def assertIsNotNone(self, value, *args) -> None: ...
    def assertListEqual(self, list1, list2, msg = ...) -> None: ...
    def assertRaises(self, excClass, callableObj = ..., *args, **kwargs) -> Optional[AssertRaises]: ...

class FailedToRaise(Exception): ...

class NullHandler(logging.Handler):
    def emit(self, record) -> None: ...

def getmembers_issubclass(object, classinfo) -> List[Tuple[str, Any]]: ...
