# (generated with --quick)

from typing import Any, Dict, Tuple, TypeVar

Environment: Any
Expression: Any
GlobalState: Any
JumpType: Any
Node: Any
SymExecWrapper: Any
copy: module
helper: Any
log: logging.Logger
logging: module

_T1 = TypeVar('_T1')
_TTaintRecord = TypeVar('_TTaintRecord', bound=TaintRecord)

class TaintRecord:
    __doc__: str
    memory: Any
    stack: Any
    states: list
    storage: Any
    def __init__(self) -> None: ...
    def add_state(self, state) -> None: ...
    def clone(self: _TTaintRecord) -> _TTaintRecord: ...
    def memory_tainted(self, index) -> bool: ...
    def stack_tainted(self, index) -> Any: ...
    def storage_tainted(self, index) -> bool: ...

class TaintResult:
    __doc__: str
    records: list
    def __init__(self) -> None: ...
    def _try_get_record(self, state) -> None: ...
    def add_records(self, records) -> None: ...
    def check(self, state, stack_index) -> Any: ...

class TaintRunner:
    __doc__: str
    stack_taint_table: Dict[str, Tuple[int, int]]
    @staticmethod
    def children(node, statespace, environment, transaction_stack_length) -> list: ...
    @staticmethod
    def execute(statespace, node, state, initial_stack = ...) -> TaintResult: ...
    @staticmethod
    def execute_node(node, last_record: _T1, state_index = ...) -> list: ...
    @staticmethod
    def execute_state(record, state) -> Any: ...
    @staticmethod
    def mutate_call(record, op) -> None: ...
    @staticmethod
    def mutate_dup(op, record) -> None: ...
    @staticmethod
    def mutate_log(record, op) -> None: ...
    @staticmethod
    def mutate_mload(record, op0) -> None: ...
    @staticmethod
    def mutate_mstore(record, op0) -> None: ...
    @staticmethod
    def mutate_push(op, record) -> None: ...
    @staticmethod
    def mutate_sload(record, op0) -> None: ...
    @staticmethod
    def mutate_sstore(record, op0) -> None: ...
    @staticmethod
    def mutate_stack(record, mutator) -> None: ...
    @staticmethod
    def mutate_swap(op, record) -> None: ...
