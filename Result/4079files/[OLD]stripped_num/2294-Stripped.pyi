# (generated with --quick)

from typing import Any, Dict, TypeVar, Union

LOGGER: logging.Logger
ModelExporter: Any
compiler: Any
inmanta: Any
logging: module

_TEntityBuilder = TypeVar('_TEntityBuilder', bound=EntityBuilder)
_TTypeBuilder = TypeVar('_TTypeBuilder', bound=TypeBuilder)

class EntityBuilder(object):
    _current: Dict[str, list]
    _entity: Dict[str, Any]
    _model: Dict[str, Dict[str, Any]]
    def attribute(self: _TEntityBuilder, name) -> _TEntityBuilder: ...
    def entity(self: _TEntityBuilder, type, idx) -> _TEntityBuilder: ...
    def get_model(self) -> Dict[str, Dict[str, Any]]: ...
    def null(self: _TEntityBuilder) -> _TEntityBuilder: ...
    def relation(self: _TEntityBuilder, name) -> _TEntityBuilder: ...
    def unknown(self: _TEntityBuilder, unknowns) -> _TEntityBuilder: ...
    def value(self: _TEntityBuilder, value) -> _TEntityBuilder: ...

class TypeBuilder(object):
    _instance: Dict[str, Union[dict, list]]
    _model: Dict[Any, Dict[str, Union[dict, list]]]
    _relation: Dict[str, Any]
    def attribute(self: _TTypeBuilder, name, type, file, lnr, multi = ..., nullable = ..., comment = ...) -> _TTypeBuilder: ...
    def entity(self: _TTypeBuilder, name, file, lnr, *parents) -> _TTypeBuilder: ...
    def get_model(self) -> Dict[Any, Dict[str, Union[dict, list]]]: ...
    def relation(self: _TTypeBuilder, name, type, file, lnr, multi, reverse = ..., comment = ...) -> _TTypeBuilder: ...
    def source_annotate(self: _TTypeBuilder, value) -> _TTypeBuilder: ...
    def target_annotate(self: _TTypeBuilder, value) -> _TTypeBuilder: ...

def test_basic_model_export(snippetcompiler) -> None: ...
def test_complex_attributes_model_export(snippetcompiler) -> None: ...
def test_null_relation_model_export(snippetcompiler) -> None: ...
def test_unknown_relation_model_export(snippetcompiler) -> None: ...
