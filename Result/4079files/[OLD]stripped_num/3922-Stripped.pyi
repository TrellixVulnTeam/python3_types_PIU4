# (generated with --quick)

import hashlib
import jinja2.environment
from typing import Any, Dict, List, Tuple, Type, TypeVar, Union

FLAGS: Any
HTML_SHELL: str
Template: Type[jinja2.environment.Template]
app: Any
collections: module
dt: module
flags: Any
functools: module
json: module
os: module
sqlite3: module

_TMoveTrieNode = TypeVar('_TMoveTrieNode', bound=MoveTrieNode)

class MoveTrieNode:
    __doc__: str
    children: List[MoveTrieNode]
    count: Any
    move: Any
    parent: Any
    def __init__(self, move, count = ..., parent = ...) -> None: ...
    def __str__(self) -> str: ...
    def add(self: _TMoveTrieNode, sequence, count) -> _TMoveTrieNode: ...
    def sequence_to(self) -> str: ...

def build_run_time_transformers(ranges, buckets = ...) -> Dict[Any, functools.partial[nothing]]: ...
def collapse_common_prefix(seq_cts, threshold = ...) -> List[Tuple[str, int]]: ...
def create_hourly_reports(hour_directory) -> None: ...
def create_top_report(top_n = ...) -> None: ...
def get_runs(db) -> list: ...
def main(_) -> None: ...
def make_wgo_diagram(sequence, count) -> str: ...
def run_time_ranges(db) -> Dict[Any, Tuple[Any, Any]]: ...
def sha(sequence) -> str: ...
def sha256(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
def top_seqs_by_run(db, topN = ...) -> Dict[Any, List[Tuple[Any, int]]]: ...
