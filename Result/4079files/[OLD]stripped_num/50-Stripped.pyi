# (generated with --quick)

import flask.globals
import flask.wrappers
from typing import Any, Callable, Iterable, Sequence, Tuple, Union

AnonymousUserMixin: Any
SocketIO: Any
current_app: flask.globals._FlaskLocalProxy
flask_login: Any
g: Any
login_manager: Any
notifications: Any
request: flask.wrappers.Request
socketio: Any

class Anonymous(Any):
    __doc__: str
    def can(self, *permission) -> bool: ...

def anonymous_required(f) -> Callable: ...
def current_url() -> str: ...
def current_user() -> Any: ...
def error_not_found(error) -> Tuple[Any, Any]: ...
def error_server(error) -> Tuple[str, int]: ...
def flask_url_for(endpoint, **values) -> Any: ...
def login_required_else(message) -> Callable[[Any], Any]: ...
def render(template, **kwargs) -> str: ...
def render_template(template_name_or_list: Union[str, Iterable[str]], **context) -> str: ...
def requires(*permissions) -> Callable[[Any], Any]: ...
def standard_error(error) -> Tuple[str, Any]: ...
def strip_subdomain(string) -> Any: ...
def url_for(*args, **kwargs) -> Any: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[Callable], Callable]: ...
