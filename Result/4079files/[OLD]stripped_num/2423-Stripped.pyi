# (generated with --quick)

from typing import Any, Generator

MarkovChain: Any
_db_factory: Any
_wordIter: Any
random: module

class DynamicMarkovChain(Any):
    db: Any
    n: Any
    sentenceSep: Any
    textSample: Any
    def _accumulateWithSeed(self, seed) -> Any: ...
    def _databaseFromSeed(self, seedwords) -> None: ...
    def _nextWord(self, lastwords) -> Any: ...
    def _relevantSentences(self, seedwords) -> Generator[Any, Any, None]: ...
    def _temporaryDatabase(self, textSample) -> None: ...
    def flushDatabase(self) -> None: ...
    def generateDatabase(self, textSample, sentenceSep = ..., n = ...) -> None: ...
    def generateStringWithSeed(self, seed) -> Any: ...
