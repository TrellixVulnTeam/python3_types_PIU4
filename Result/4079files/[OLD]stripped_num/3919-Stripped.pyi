# (generated with --quick)

from typing import Any, Dict, Generator, List

__author__: str
__date__: str
__license__: str
__revision__: str
__version__: str
itertools: module
math: module
polys: Dict[int, List[int]]

def LFSR(m) -> Generator[nothing, Any, Any]: ...
def ackermann(m) -> Generator[int, Any, Any]: ...
def ackermann_fast(m, n) -> Any: ...
def ackermann_naive(m) -> Generator[nothing, Any, Any]: ...
def ackermann_slow(m, n) -> Any: ...
def carmichael() -> Generator[int, Any, None]: ...
def composite() -> Generator[int, Any, None]: ...
def eratosthenes() -> Generator[int, Any, None]: ...
def fermat() -> Generator[int, Any, Any]: ...
def fibonacci() -> Generator[int, Any, Any]: ...
def identity() -> Generator[int, Any, Any]: ...
def log_gen() -> Generator[int, Any, Any]: ...
def mersenne() -> Generator[nothing, Any, Any]: ...
def triangular_numbers() -> Generator[int, Any, Any]: ...
