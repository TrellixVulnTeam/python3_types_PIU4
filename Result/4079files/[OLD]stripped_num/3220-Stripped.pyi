# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, List, Optional, Sized, Tuple, Type, TypeVar, Union

_Tnamedtuple-Edge-a-b = TypeVar('_Tnamedtuple-Edge-a-b', bound=`namedtuple-Edge-a-b`)
_Tnamedtuple-Node-num-attribute-value-output = TypeVar('_Tnamedtuple-Node-num-attribute-value-output', bound=`namedtuple-Node-num-attribute-value-output`)

class TreeTraverse(object):
    edges: List[`namedtuple-Edge-a-b`]
    nodes: List[`namedtuple-Node-num-attribute-value-output`]
    def get_nodes_and_edges(self, model, attribute = ..., value = ..., parent = ..., layer = ...) -> Optional[Tuple[List[`namedtuple-Node-num-attribute-value-output`], List[`namedtuple-Edge-a-b`]]]: ...

class `namedtuple-Edge-a-b`(tuple):
    __slots__ = ["a", "b"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    a: Any
    b: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Edge-a-b`], a, b) -> `_Tnamedtuple-Edge-a-b`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Edge-a-b`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Edge-a-b`: ...
    def _replace(self: `_Tnamedtuple-Edge-a-b`, **kwds) -> `_Tnamedtuple-Edge-a-b`: ...

class `namedtuple-Node-num-attribute-value-output`(tuple):
    __slots__ = ["attribute", "num", "output", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    attribute: Any
    num: Any
    output: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Node-num-attribute-value-output`], num, attribute, value, output) -> `_Tnamedtuple-Node-num-attribute-value-output`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Node-num-attribute-value-output`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Node-num-attribute-value-output`: ...
    def _replace(self: `_Tnamedtuple-Node-num-attribute-value-output`, **kwds) -> `_Tnamedtuple-Node-num-attribute-value-output`: ...

def get_bottom_padding(height, d, num_nodes, base_y, y_offset) -> Any: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
