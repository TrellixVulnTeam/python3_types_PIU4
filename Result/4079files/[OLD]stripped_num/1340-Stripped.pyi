# (generated with --quick)

from typing import Any, List, Type, Union

AVAILABLE_MATERIAL_TYPES: List[Type[Union[AbradedOpaque, AbradedTranslucent, MatteOpaque]]]
bpy: Any
mathutils: Any
psdl: Any
sys: module

class AbradedOpaque(MaterialType):
    albedo: Any
    f0: Any
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...
    @classmethod
    def get_name(cls) -> str: ...
    @classmethod
    def to_sdl(cls, b_prop_group, sdlconsole, res_name) -> Any: ...

class AbradedTranslucent(MaterialType):
    albedo: Any
    f0: Any
    ior: Any
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...
    @classmethod
    def get_name(cls) -> str: ...
    @classmethod
    def to_sdl(cls, b_prop_group, sdlconsole, res_name) -> Any: ...

class MaterialProperty:
    @classmethod
    def define_blender_props(cls, b_prop_group) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...

class MaterialType(Any):
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...
    @classmethod
    def get_description(cls) -> str: ...
    @classmethod
    def get_name(cls) -> str: ...
    @classmethod
    def to_sdl(cls, b_prop_group, sdlconsole, res_name) -> None: ...

class MatteOpaque(MaterialType):
    albedo: Any
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...
    @classmethod
    def get_name(cls) -> str: ...
    @classmethod
    def to_sdl(cls, b_prop_group, sdlconsole, res_name) -> Any: ...

class MicrofacetProperty(MaterialProperty):
    @classmethod
    def define_blender_props(cls, b_prop_group) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout, b_prop_group) -> None: ...
    @classmethod
    def get_roughness(cls, b_prop_group) -> Any: ...
    @classmethod
    def get_roughness_u(cls, b_prop_group) -> Any: ...
    @classmethod
    def get_roughness_v(cls, b_prop_group) -> Any: ...
    @classmethod
    def is_anisotropic(cls, b_prop_group) -> Any: ...

def define_blender_props() -> None: ...
def display_blender_props(b_layout, b_material) -> None: ...
def to_sdl(b_material, sdlconsole, res_name) -> Any: ...
