# (generated with --quick)

import asyncio.locks
from typing import Any, Coroutine, Optional, Tuple, TypeVar, Union

KEY_DELIMITER: str
abc: module
aioredis: Any
asyncio: module
collections: module
json: module
re: module
time: module
warnings: module

_T0 = TypeVar('_T0')

class Disk(Driver):
    __slots__ = ["data", "filename"]
    data: collections.defaultdict
    filename: Any
    def __init__(self, filename = ...) -> None: ...
    @staticmethod
    def decipher(value) -> int: ...
    def delete(self, key) -> Coroutine[Any, Any, None]: ...
    def expire(self, key, seconds) -> Coroutine[Any, Any, None]: ...
    def get(self, key) -> Coroutine[Any, Any, int]: ...
    def is_expired(self, key) -> bool: ...
    def llen(self, key) -> Coroutine[Any, Any, int]: ...
    def load(self) -> None: ...
    def lpush(self, key, value) -> Coroutine[Any, Any, None]: ...
    def rpop(self, key) -> Coroutine[Any, Any, Optional[int]]: ...
    def save(self) -> None: ...
    def set(self, key, value) -> Coroutine[Any, Any, None]: ...

class Driver(abc.ABC):
    @abstractmethod
    def delete(self, key, value) -> coroutine: ...
    @abstractmethod
    def expire(self, key, time) -> coroutine: ...
    @abstractmethod
    def get(self, key) -> coroutine: ...
    @abstractmethod
    def lpush(self, key, value) -> coroutine: ...
    @abstractmethod
    def rpop(self, key) -> coroutine: ...
    @abstractmethod
    def set(self, key, value) -> coroutine: ...

class Interface:
    __slots__ = ["driver"]
    driver: Any
    def __init__(self, driver) -> None: ...
    def delete(self, *args) -> Coroutine[Any, Any, None]: ...
    def expire(self, *args) -> Coroutine[Any, Any, None]: ...
    def get(self, *keys) -> coroutine: ...
    def get_json(self, *keys) -> coroutine: ...
    def llen(self, *keys) -> coroutine: ...
    def lpush(self, *args) -> Coroutine[Any, Any, None]: ...
    def rpop(self, *keys) -> coroutine: ...
    def set(self, *args, expire = ...) -> Coroutine[Any, Any, None]: ...
    def set_json(self, *args, expire = ...) -> Coroutine[Any, Any, None]: ...

class Redis(Driver):
    __slots__ = ["connection", "db_number", "started", "startup_lock", "url"]
    connection: Any
    db_number: Any
    started: bool
    startup_lock: asyncio.locks.Lock
    url: Any
    def __init__(self, url, number = ...) -> None: ...
    @staticmethod
    def decipher(value: _T0) -> Optional[Union[int, _T0]]: ...
    def delete(self, key) -> coroutine: ...
    def ensure_started(self) -> Coroutine[Any, Any, None]: ...
    def expire(self, key, time) -> coroutine: ...
    def get(self, key) -> coroutine: ...
    def llen(self, key) -> coroutine: ...
    def lpush(self, key, value) -> coroutine: ...
    def rpop(self, key) -> coroutine: ...
    def set(self, key, value) -> coroutine: ...

def create_disk(filename) -> Interface: ...
def create_redis(url, number = ...) -> Interface: ...
def reduce_key(keys) -> str: ...
def reduce_key_val(keys) -> Tuple[str, Any]: ...
