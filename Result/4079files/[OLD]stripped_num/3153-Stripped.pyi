# (generated with --quick)

import asyncio.futures
from typing import Any, Callable, Tuple, Union

os: module
pytest: Any
signal: module
sys: module
test_same_named_sub_service: Any
test_same_named_sub_service_without_py_ending: Any
test_sub_service: Any
test_sub_service_without_py_ending: Any
tomodachi: Any

def start_service(filename, monkeypatch = ..., wait = ...) -> Tuple[Union[Callable[[], Any], dict], asyncio.futures.Future]: ...
def test_non_named_same_named_sub_service(monkeypatch, capsys, loop) -> None: ...
def test_non_named_same_named_sub_service_without_py_ending(monkeypatch, capsys, loop) -> None: ...
def test_non_named_sub_service(monkeypatch, capsys, loop) -> None: ...
def test_non_named_sub_service_without_py_ending(monkeypatch, capsys, loop) -> None: ...
def test_sub_service_with_reserved_name(monkeypatch, capsys, loop) -> None: ...
def test_sub_service_with_reserved_name_without_py_ending(monkeypatch, capsys, loop) -> None: ...
