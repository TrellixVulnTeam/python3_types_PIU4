# (generated with --quick)

from typing import Any, Dict, List, Optional, TypeVar, Union

PhonemeList: Any
Voice: Any
levenshtein: Any
logging: module
pickle: module
random: module
weighted_choice: Any

_T0 = TypeVar('_T0')
_TLeaf = TypeVar('_TLeaf', bound=Leaf)

class Leaf:
    data: Any
    phonemes: List[str]
    text: Any
    total_leaves_count: int
    def __init__(self, string, phonemic_form) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> Any: ...
    @staticmethod
    def clean_silences(phoneme_list: _T0) -> _T0: ...
    def find(self, phoneme_list, original_string) -> Optional[Leaf]: ...
    def find_random(self: _TLeaf) -> _TLeaf: ...
    @classmethod
    def from_string(cls, string, voxpopuli_voice) -> Any: ...
    def to_dict(self) -> Any: ...

class RhymeTree(TreeNode):
    child_leaves_count: int
    children: Dict[str, Union[Leaf, TreeNode]]
    leaves: list
    voice: Any
    def __init__(self, rhyming_lang = ...) -> None: ...
    def find_rhyme(self, string) -> Any: ...
    @classmethod
    def from_pickle(cls, pickle_filepath) -> Any: ...
    @classmethod
    def from_text_file(cls, textfile_filepath, lang = ..., separator = ...) -> Any: ...
    @classmethod
    def from_word_list(cls, input_list, lang = ...) -> Any: ...
    def insert_rhyme(self, rhyme_string, data = ...) -> None: ...
    def save(self, filepath) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...

class TreeNode:
    child_leaves_count: int
    children: dict
    leaves: list
    total_leaves_count: Any
    def __getitem__(self, item) -> Union[Leaf, TreeNode]: ...
    def __init__(self) -> None: ...
    def find(self, phoneme_list, original_string) -> Any: ...
    def find_random(self) -> Any: ...
    def insert(self, leaf, current_pho_index) -> None: ...
    def to_dict(self) -> Dict[str, Union[dict, list]]: ...

def randint(a: int, b: int) -> int: ...
