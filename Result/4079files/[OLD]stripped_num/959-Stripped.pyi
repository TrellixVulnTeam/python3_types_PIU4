# (generated with --quick)

from typing import Any, Dict, Generator, List, Optional, Tuple, TypeVar, Union

PageMerge: Any
PdfReader: Any
PdfWriter: Any
math: module
os: module
paperformats: Dict[str, List[int]]
re: module
sys: module
units: Dict[str, Union[float, int]]

_T0 = TypeVar('_T0')

def add_blanks(signature, pages_per_sheet) -> list: ...
def add_divider(sheets, signature_length) -> list: ...
def calculate_margins(output_size, current_size) -> Tuple[Any, Any, Any]: ...
def calculate_scaled_sub_page_size(pages_per_sheet, papersize) -> List[int]: ...
def calculate_signature_length(page_count) -> Any: ...
def create_blank_copy(page) -> Any: ...
def create_filename(infile) -> str: ...
def cut_in_signatures(inpages, signature_length) -> Generator[Any, Any, None]: ...
def get_media_box_size(outpages) -> List[int]: ...
def impose(pages, pages_per_sheet, binding) -> Any: ...
def impose_and_merge(inpages, signature_length, pages_per_sheet, output_size, binding) -> list: ...
def is_landscape(page) -> Any: ...
def merge(pages, rotation, binding) -> Any: ...
def resize(outpages, output_size) -> list: ...
def reverse_remainder(dividend, divisor) -> Any: ...
def save_pdf(infile, outpages) -> None: ...
def set_binding(page: _T0, binding, rotation) -> _T0: ...
def validate_infile(pdf) -> Any: ...
def validate_pages_per_sheet(pages_per_sheet: _T0) -> _T0: ...
def validate_papersize(paperformat, unit) -> Optional[List[int]]: ...
def validate_signature_length(signature_length: _T0) -> _T0: ...
