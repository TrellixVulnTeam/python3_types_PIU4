# (generated with --quick)

import collections
import space_engineers.utils
from typing import Any, Callable, Iterable, List, Sized, SupportsFloat, Tuple, Type, TypeVar, Union
import xml.etree.ElementTree

Side = `namedtuple-Side-normal-name-projection-start_vertex-end_vertex`

ANGLE_45: float
BoxCorner: Type[space_engineers.utils.BoxCorner]
ElementTree: module
GL_LINES: Any
GL_LINE_STIPPLE: Any
GL_LINE_STRIP: Any
MOUNT_POINT_COLOR: Tuple[float, int, float]
MOUNT_POINT_MATERIAL: str
Matrix: Any
OrderedDict: Type[collections.OrderedDict]
Sides: List[`namedtuple-Side-normal-name-projection-start_vertex-end_vertex`]
Vector: Any
X: int
Y: int
Z: int
block_bounds: Any
bpy: Any
data: Any
flip: Type[space_engineers.utils.flip]
glBegin: Any
glColor3f: Any
glDisable: Any
glEnable: Any
glEnd: Any
glLineStipple: Any
glLineWidth: Any
glVertex3f: Any
handle_block_box: Any
is_small_block: Any
mirror: Type[space_engineers.utils.mirror]
rot: Type[space_engineers.utils.rot]
show_block_bounds: Any

_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex = TypeVar('_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex', bound=`namedtuple-Side-normal-name-projection-start_vertex-end_vertex`)

class `namedtuple-Side-normal-name-projection-start_vertex-end_vertex`(tuple):
    __slots__ = ["end_vertex", "name", "normal", "projection", "start_vertex"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    end_vertex: Any
    name: Any
    normal: Any
    projection: Any
    start_vertex: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`], normal, name, projection, start_vertex, end_vertex) -> `_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`: ...
    def _replace(self: `_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`, **kwds) -> `_Tnamedtuple-Side-normal-name-projection-start_vertex-end_vertex`: ...

def _floatstr(f) -> str: ...
def bounds(vertices) -> space_engineers.utils.`namedtuple-BoundingBox-fbl-ftl-btl-bbl-fbr-ftr-btr-bbr`: ...
def create_mount_point_skeleton() -> Any: ...
def disable_draw_callback() -> None: ...
def draw_block_box() -> None: ...
def draw_box(verts) -> None: ...
def enable_draw_callback() -> None: ...
def layer_bits(layers) -> int: ...
def layers(bitset) -> list: ...
def mount_point_color() -> Any: ...
def mount_point_definitions(mount_point_objects) -> List[Tuple[Any, Any, Any, Any, Any]]: ...
def mount_points_xml(mount_points) -> xml.etree.ElementTree.Element: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def scene() -> Any: ...
def sparse(values) -> Any: ...
def sqrt(__x: SupportsFloat) -> float: ...
def tag_view3d_for_redraw() -> None: ...
def transX(x) -> Any: ...
def transY(y) -> Any: ...
def transZ(z) -> Any: ...
