# (generated with --quick)

from typing import Any, Optional, Tuple, TypeVar, Union

AnsibleModule: Any
DOCUMENTATION: str
EXAMPLES: str
RETURN: str
json: module
os: module

_T0 = TypeVar('_T0')

class CondaCommandError(Exception):
    __doc__: str
    command: Any
    stderr: Any
    stdout: Any
    def __init__(self, command, stdout, stderr) -> None: ...

class CondaCommandJsonDescribedError(CondaCommandError):
    __doc__: str
    command: Any
    output: Any
    stderr: Any
    stdout: str
    def __init__(self, command, output, stderr) -> None: ...

class CondaExecutableNotFoundError(Exception):
    __doc__: str
    def __init__(self) -> None: ...

class CondaPackageNotFoundError(Exception):
    __doc__: str
    name: Any
    version: Any
    def __int__(self, name, version) -> None: ...

class CondaUnexpectedOutputError(Exception):
    __doc__: str
    output: Any
    stderr: Any
    def __int__(self, output, stderr) -> None: ...

def _main() -> None: ...
def _run_conda_command(module, command) -> Tuple[Any, Any]: ...
def add_channels_to_command(command, channels) -> Any: ...
def add_extras_to_command(command, extras) -> Any: ...
def check_package_installed(command_runner, conda, name, version) -> bool: ...
def find_conda(executable: _T0) -> Union[str, _T0]: ...
def find_executable(executable: str, path: Optional[str] = ...) -> Optional[str]: ...
def get_install_target(name: _T0, version) -> Union[str, _T0]: ...
def install_package(command_runner, conda, name, version = ..., dry_run = ...) -> Any: ...
def parse_conda_stdout(stdout) -> Any: ...
def run_conda_package_command(command_runner, name, version, command) -> Any: ...
def run_package_operation(conda, name, version, state, dry_run, command_runner, on_failure, on_success) -> None: ...
def uninstall_package(command_runner, conda, name, dry_run = ...) -> Any: ...
