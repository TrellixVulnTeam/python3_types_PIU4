# (generated with --quick)

import functools
from typing import Any, Callable, Optional, Type

partial: Type[functools.partial]
summarizer: Any
tf: Any
tflearn: Any

class OneStepTargetSARSA:
    _get_output: Optional[Callable[[Any, Any], Any]]
    _train_step: Optional[Callable]
    _update_target_network: Optional[Callable[[Any], Any]]
    saver: Any
    tf_graph: Any
    tf_session: Any
    def __init__(self, input_shape, output_num, optimizer = ..., network_generator = ..., q_discount = ..., loss_clipping = ...) -> None: ...
    def create_network_graph(self, input_shape, output_num, network_generator, q_discount, optimizer, loss_clipping) -> None: ...
    def get_output(self, x) -> Any: ...
    def init_tf_session(self) -> None: ...
    def load(self, path) -> None: ...
    def save(self, *args, **kwargs) -> None: ...
    def train_step(self, current_learning_rate, state, action, reward, state_tp1, action_tp1, terminal, summaries = ...) -> Any: ...
    def update_target_network(self) -> None: ...

def create_nips_network(input_tensor, output_num) -> Any: ...
