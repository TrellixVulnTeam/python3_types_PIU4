# (generated with --quick)

import requests.models
from typing import Any, Dict, Type, TypeVar

ERROR_KIND: str
HttpResponse: Type[requests.models.Response]
WARNING_KIND: str
cli: Any
flask: module
logger: Any
threads: Any
typing: module

_TResponse = TypeVar('_TResponse', bound=Response)
_TResponseMessage = TypeVar('_TResponseMessage', bound=ResponseMessage)

class Response(object):
    __doc__: str
    data: Dict[str, Any]
    ended: Any
    errors: list
    failed: Any
    http_response: requests.models.Response
    identifier: Any
    messages: list
    parent: Response
    response: Any
    returned: None
    success: bool
    thread: Any
    warnings: list
    def __init__(self, identifier = ..., failed = ...) -> None: ...
    def consume(self, other) -> Any: ...
    def debug_echo(self: _TResponse) -> _TResponse: ...
    @staticmethod
    def deserialize(serial_data) -> Response: ...
    def echo(self) -> Any: ...
    def end(self) -> Any: ...
    def fail(self, message = ..., code = ..., error = ..., **kwargs) -> Any: ...
    def flask_serialize(self) -> Any: ...
    def get_notification_log(self, start_index = ...) -> str: ...
    def get_thread_log(self) -> Any: ...
    def join(self, timeout = ...) -> bool: ...
    def log_notifications(self, start_index = ..., trace = ..., file_path = ..., append_to_file = ...) -> str: ...
    def notify(self, kind = ..., message = ..., code = ..., **kwargs) -> Any: ...
    def serialize(self) -> dict: ...
    def update(self, **kwargs) -> Any: ...
    def warn(self, message = ..., code = ..., **kwargs) -> Any: ...

class ResponseMessage(object):
    code: Any
    data: Any
    index: Any
    kind: Any
    log: Any
    message: Any
    response: Any
    def __init__(self, kind = ..., code = ..., message = ..., response = ..., index = ..., log = ..., data = ...) -> None: ...
    def console(self: _TResponseMessage, message = ..., whitespace = ..., whitespace_top = ..., whitespace_bottom = ..., indent_by = ..., trace = ..., file_path = ..., append_to_file = ..., **kwargs) -> _TResponseMessage: ...
    def console_header(self: _TResponseMessage, text, level = ..., whitespace = ..., whitespace_top = ..., whitespace_bottom = ..., trace = ..., file_path = ..., append_to_file = ..., indent_by = ...) -> _TResponseMessage: ...
    def console_raw(self: _TResponseMessage, message, trace = ..., file_path = ..., append_to_file = ...) -> _TResponseMessage: ...
    def get_response(self) -> Any: ...
    def kernel(self: _TResponseMessage, **kwargs) -> _TResponseMessage: ...
    def serialize(self) -> dict: ...
