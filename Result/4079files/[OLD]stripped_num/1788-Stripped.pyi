# (generated with --quick)

from typing import Any, Dict, Tuple

Singleton: Any
threading: module

class State(metaclass=Any):
    __doc__: str
    _restarted: list
    loading: Any
    loading_state_mutex: threading.Lock
    plugin: Dict[str, Any]
    plugin_state_mutex: threading.Lock
    restarting_state_mutex: threading.Lock
    def __init__(self) -> None: ...
    def get_plugins_restarting(self) -> list: ...
    def has_restarted(self, name) -> None: ...
    def is_loading(self) -> bool: ...
    def is_plugin_waiting_for_user_interaction(self) -> Tuple[bool, None]: ...
    def is_restarting(self, name) -> None: ...
    def loading_done(self) -> None: ...
    def plugin_requires_user_interaction(self, name) -> None: ...
    def plugin_stops_waiting_for_user_interaction(self) -> None: ...
