# (generated with --quick)

import contextlib
import enum
import json.encoder
from typing import Any, Callable, Dict, Iterator, List, Optional, Set, TextIO, Tuple, Type, TypeVar

Enum: Type[enum.Enum]
csv: module
datetime: module
dateutil: module
errno: module
json: module
logger: Logger
np: module
os: module
osp: module
pickle: module
sys: module
tabulate: Any
torch: Any

_T = TypeVar('_T')

class Logger(object):
    _header_printed: bool
    _log_tabular_only: Any
    _prefix_str: str
    _prefixes: list
    _snapshot_dir: Any
    _snapshot_gap: Any
    _snapshot_mode: Any
    _tabular: List[Tuple[str, str]]
    _tabular_fds: Dict[Any, TextIO]
    _tabular_header_written: Set[TextIO]
    _tabular_outputs: list
    _tabular_prefix_str: str
    _tabular_prefixes: list
    _text_fds: Dict[Any, TextIO]
    _text_outputs: list
    prefix: Callable[..., contextlib._GeneratorContextManager]
    table_printer: TerminalTablePrinter
    tabular_prefix: Callable[..., contextlib._GeneratorContextManager]
    def _add_output(self, file_name, arr, fds, mode = ...) -> None: ...
    def _remove_output(self, file_name, arr, fds) -> None: ...
    def add_tabular_output(self, file_name, relative_to_snapshot_dir = ...) -> None: ...
    def add_text_output(self, file_name) -> None: ...
    def dump_tabular(self, *args, **kwargs) -> None: ...
    def get_log_tabular_only(self) -> bool: ...
    def get_snapshot_dir(self) -> Any: ...
    def get_snapshot_gap(self) -> int: ...
    def get_snapshot_mode(self) -> str: ...
    def get_table_dict(self) -> Dict[nothing, nothing]: ...
    def get_table_key_set(self) -> Set[nothing]: ...
    def log(self, s, with_prefix = ..., with_timestamp = ...) -> None: ...
    def log_variant(self, log_file, variant_data) -> None: ...
    def pop_prefix(self) -> None: ...
    def pop_tabular_prefix(self) -> None: ...
    def push_prefix(self, prefix) -> None: ...
    def push_tabular_prefix(self, key) -> None: ...
    def record_dict(self, d, prefix = ...) -> None: ...
    def record_tabular(self, key, val) -> None: ...
    def record_tabular_misc_stat(self, key, values, placement = ...) -> None: ...
    def remove_tabular_output(self, file_name, relative_to_snapshot_dir = ...) -> None: ...
    def remove_text_output(self, file_name) -> None: ...
    def reset(self) -> None: ...
    def save_extra_data(self, data, file_name = ..., mode = ...) -> Any: ...
    def save_itr_params(self, itr, params) -> None: ...
    def set_log_tabular_only(self, log_tabular_only) -> None: ...
    def set_snapshot_dir(self, dir_name) -> None: ...
    def set_snapshot_gap(self, gap) -> None: ...
    def set_snapshot_mode(self, mode) -> None: ...

class MyEncoder(json.encoder.JSONEncoder): ...

class TerminalTablePrinter(object):
    headers: Optional[list]
    tabulars: List[list]
    def print_tabular(self, new_tabular) -> None: ...
    def refresh(self) -> None: ...

def contextmanager(func: Callable[..., Iterator[_T]]) -> Callable[..., contextlib._GeneratorContextManager[_T]]: ...
def mkdir_p(path) -> None: ...
