# (generated with --quick)

from typing import Any, Dict, List, SupportsFloat, Tuple, TypeVar

distances: Dict[nothing, nothing]
interleave: int
neighbours: Dict[nothing, nothing]
nodenumbers: Any
nodes: Dict[Any, Tuple[Any, Any]]
pi: float
piece1: list
piece2: list
piece2a: list
piece2b: list
piece3: list
piece3a: list
piece3b: list
piece4: list
piece5: List[int]
piece6: List[int]
piece7: List[int]
pieces: Dict[Tuple[Any, Any], Tuple[list, int]]
roadpoints: Dict[Tuple[Any, Any], bool]
ways: Dict[int, Any]

_T0 = TypeVar('_T0')

def atan2(__y: SupportsFloat, __x: SupportsFloat) -> float: ...
def cos(__x: SupportsFloat) -> float: ...
def dist(x1, y1, x2, y2) -> float: ...
def eightarc(nodenumbers, cy, angleoffset) -> Any: ...
def eightinit() -> None: ...
def eightpath(y1, y2, y3) -> None: ...
def eightpoint(cy, ang) -> Tuple[float, Any]: ...
def fillinlist(l: _T0, add) -> _T0: ...
def makepathpoints(offset, path) -> None: ...
def piece2pathpoints(p, offset) -> None: ...
def rev(l0) -> Any: ...
def sin(__x: SupportsFloat) -> float: ...
def sqrt(__x: SupportsFloat) -> float: ...
