# (generated with --quick)

import threading
from typing import Any, Generator, NoReturn, Type

Condition: Type[threading.Condition]
Event: Type[threading.Event]
ExecutorTimeout: Any
GLib: Any
Gdk: Any
Gtk: Any
Lock: Type[threading.Lock]
Tag: Any
Thread: Type[threading.Thread]
Video: Any
with_logging: Any

class Executor(threading.Thread):
    abort_flag: bool
    current_melement: Any
    daemon: bool
    l: threading.Lock
    parent: Any
    prev_export: Any
    prev_video: Any
    skip: Any
    timeout: Any
    def __init__(self, parent, status_callback, skip, abort_callback = ...) -> None: ...
    def abort(self) -> None: ...
    def execute(self) -> NoReturn: ...
    def get_frames(self, vision_enable = ...) -> Generator[tuple, Any, None]: ...
    def has_aborted(self) -> bool: ...
    def prep_gui_for_test(self) -> None: ...
    def restore_gui_after_test(self) -> None: ...
    def run(self) -> NoReturn: ...
    def status_callback(self, _1: int) -> Any: ...
    def timeout_clear(self) -> None: ...
    def timeout_set(self, m_element) -> None: ...

def get_class_from_tagtype(type_string) -> Any: ...
def get_registered_elements() -> dict: ...
def get_required_functions_of_tag(tag_name) -> Any: ...
def sleep(secs: float) -> None: ...
