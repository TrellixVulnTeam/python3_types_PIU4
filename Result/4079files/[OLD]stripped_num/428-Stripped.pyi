# (generated with --quick)

from typing import Any, Optional, SupportsFloat, Tuple, TypeVar, Union

Component: Any
log: logging.Logger
logging: module
rtl_str: Any

_T3 = TypeVar('_T3')

def ceil(__x: SupportsFloat) -> int: ...
def field_concat(reg, fields) -> Any: ...
def generate_rtl(lang, addrmap, root_sigs, internal_sigs) -> None: ...
def get_hw_mask(field) -> Tuple[Any, Optional[int]]: ...
def import_strings(lang) -> None: ...
def log2(__x: SupportsFloat) -> float: ...
def reg_data_out_sensitivity(regs) -> str: ...
def write_axi_write_reset(f, reg, field) -> None: ...
def write_axi_writes(f, regs) -> None: ...
def write_ctrl_sig_assgns(f, regs) -> None: ...
def write_field_hw_access(f, reg, field, skipped: _T3) -> Union[bool, _T3]: ...
def write_field_hw_access_hwsetclr(f, reg, field, skipped: _T3) -> Union[bool, _T3]: ...
def write_field_hw_access_we(f, reg, field, skipped: _T3) -> Union[bool, _T3]: ...
def write_field_singlepulse(f, reg, field, skipped: _T3) -> Union[bool, _T3]: ...
def write_field_sw_access(f, reg, field, skipped: _T3) -> Union[bool, _T3]: ...
def write_internal_signals(f, internal_signals) -> None: ...
def write_ports_fields(f, regs) -> None: ...
def write_ports_signals(f, signals) -> None: ...
def write_reg_data_out_when(f, regs, mem_addr_bits) -> None: ...
def write_reg_signals(f, regs) -> None: ...
def write_signal_assignments(f, regs, internal_sigs) -> None: ...
def write_sts_sig_assgns(f, regs) -> None: ...
def write_sts_sig_resets(f, regs) -> None: ...
def write_write_addr_decode(f, regs, mem_addr_bits) -> None: ...
def write_write_addr_decode_signals(f, regs) -> None: ...
