# (generated with --quick)

from typing import Any, List, NoReturn, Optional, Type

LockType: Any
RLock: Any
TIMEOUT_MAX: int
__patched__: List[str]
__threadcount: int
_lock: Any
_thread_orig: module
error: Type[RuntimeError]
greenlet: Any
greenthread: Any

def __original_stack_size__(size: int = ...) -> int: ...
def __thread_body(func, args, kwargs) -> None: ...
def _count() -> int: ...
def _set_sentinel() -> Any: ...
def allocate_lock(*a) -> Any: ...
def exit() -> NoReturn: ...
def get_ident(gr = ...) -> int: ...
def interrupt_main() -> None: ...
def stack_size(size = ...) -> Optional[int]: ...
def start_new_thread(function, args = ..., kwargs = ...) -> int: ...
