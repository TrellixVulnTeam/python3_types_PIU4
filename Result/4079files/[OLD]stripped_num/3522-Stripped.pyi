# (generated with --quick)

from typing import Any, Optional

DuelError: Any
DuelLinksInfo: Any
NoxPredefined: Any
Provider: Any
base64: module
clean_version: Any
compare_ssim: Any
concurrent: module
cv2: Any
deprecation: Any
logging: module
loop_scan: Any
mask_image: Any
np: module
os: module
subprocess: module
sys: module
tm: Any
win32gui: Any

class Nox(Any):
    NotPath: None
    NoxPath: str
    _debug: bool
    battle: Any
    current_battle: bool
    predefined: Any
    root: logging.Logger
    def __init__(self, scheduler, config, run_time) -> None: ...
    def __is_initial_screen__(self, *args, **kwargs) -> bool: ...
    def __start_app__(self) -> None: ...
    @staticmethod
    def __str__() -> str: ...
    def check_battle_is_running(self) -> None: ...
    def check_if_battle(self, img) -> bool: ...
    def click_auto_duel(self) -> None: ...
    def compare_with_back_button(self, corr = ..., info = ..., img = ...) -> Any: ...
    def compare_with_cancel_button(self, corr = ..., info = ..., img = ...) -> Any: ...
    def determine_autoduel_status(self) -> None: ...
    def is_process_running(self) -> Optional[bool]: ...
    def key_escape(self) -> None: ...
    def kill_process(self) -> None: ...
    def method_name(self) -> None: ...
    def pass_through_initial_screen(self, already_started = ...) -> None: ...
    def scan(self) -> None: ...
    def scan_for_close(self, corr = ..., info = ..., img = ...) -> Any: ...
    def scan_for_download(self, corr = ..., info = ...) -> Any: ...
    def scan_for_ok(self, corr = ..., info = ..., img = ...) -> Any: ...
    def start_process(self) -> None: ...
    def swipe(self, x1, y1, x2, y2) -> None: ...
    def swipe_right(self, time_sleep = ...) -> None: ...
    def swipe_time(self, x1, y1, x2, y2, time_amount) -> None: ...
    def take_png_screenshot(self) -> bytes: ...
    def tap(self, x, y) -> None: ...
    def wait_for(self, word, try_scanning = ...) -> None: ...
    def wait_for_notifications(self, *args, **kwargs) -> Any: ...

def __getattr__(name) -> Any: ...
