# (generated with --quick)

import abc
from typing import Any, Callable, List, Type, TypeVar

ABCMeta: Type[abc.ABCMeta]
simple_preprocess: Any

_FuncT = TypeVar('_FuncT', bound=Callable)

class AbsPreprocessor(metaclass=abc.ABCMeta):
    @abstractmethod
    def preprocess(self, line) -> Any: ...

class SimplePreprocessor(AbsPreprocessor):
    _deacc: Any
    _max_len: Any
    _min_len: Any
    def __init__(self, deacc = ..., min_len = ..., max_len = ...) -> None: ...
    def preprocess(self, line) -> Any: ...

class TeXMixedTextPreprocessor(AbsPreprocessor):
    __doc__: str
    def __init__(self) -> None: ...
    def _accept(self, token) -> bool: ...
    def _fix_token(self, token) -> Any: ...
    def _tokenize(self, line) -> List[nothing]: ...
    def preprocess(self, line) -> list: ...

def abstractmethod(callable: _FuncT) -> _FuncT: ...
def split_tex_doc(line) -> List[nothing]: ...
