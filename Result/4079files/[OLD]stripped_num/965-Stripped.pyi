# (generated with --quick)

from typing import Any, Dict, Optional

eventWorker: Any
ha: Any
json: module
log: logging.Logger
logging: module
threading: module
websocket: Any

class HAWebsocketEventHandler(object):
    __doc__: str
    authenticated: bool
    callbacks: Dict[Any, list]
    connected: bool
    daemon: bool
    lastId: int
    password: Any
    requestCallbacks: dict
    settings: Any
    url: str
    worker: Optional[threading.Thread]
    ws: Any
    def __init__(self, group = ..., target = ..., name = ..., settings = ..., kwargs = ..., verbose = ...) -> None: ...
    def _handleAuth(self, msg) -> None: ...
    def _handleEvent(self, msg) -> None: ...
    def _register(self, Id, cb) -> None: ...
    def add_listener(self, entity, callback) -> None: ...
    def after_auth(self) -> None: ...
    def call_service(self, domain, service, service_data = ...) -> None: ...
    def on_close(self) -> None: ...
    def on_error(self, error) -> None: ...
    def on_message(self, message) -> None: ...
    def on_open(self) -> None: ...
    def request(self, data, response = ...) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
