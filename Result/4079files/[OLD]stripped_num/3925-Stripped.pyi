# (generated with --quick)

import collections
from typing import Any, Callable, Iterable, Sized, Tuple, Type, TypeVar, Union

ModelParameters = `namedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`
ModelParametersMonthwise = `namedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`
ModelParametersOld = `namedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`

datetime: module
np: module
os: module
pd: Any

_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized = TypeVar('_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized', bound=`namedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`)
_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized = TypeVar('_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized', bound=`namedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`)
_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr = TypeVar('_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr', bound=`namedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`)

class `namedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`(tuple):
    __slots__ = ["datetime", "days", "depth", "dropout", "hostname", "lr", "normalized", "optimizer", "width"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str, str, str]
    datetime: Any
    days: Any
    depth: Any
    dropout: Any
    hostname: Any
    lr: Any
    normalized: Any
    optimizer: Any
    width: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`], datetime, hostname, depth, width, days, dropout, optimizer, lr, normalized) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`: ...
    def _replace(self: `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`, **kwds) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`: ...

class `namedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`(tuple):
    __slots__ = ["datetime", "depth", "dropout", "hostname", "lr", "normalized", "optimizer", "width"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str, str]
    datetime: Any
    depth: Any
    dropout: Any
    hostname: Any
    lr: Any
    normalized: Any
    optimizer: Any
    width: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`], datetime, hostname, depth, width, dropout, optimizer, lr, normalized) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`: ...
    def _replace(self: `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`, **kwds) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`: ...

class `namedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`(tuple):
    __slots__ = ["datetime", "depth", "dropout", "hostname", "lr", "month", "optimizer", "width"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str, str]
    datetime: Any
    depth: Any
    dropout: Any
    hostname: Any
    lr: Any
    month: Any
    optimizer: Any
    width: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`], datetime, hostname, depth, width, month, dropout, optimizer, lr) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`: ...
    def _replace(self: `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`, **kwds) -> `_Tnamedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`: ...

def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def parse_model_repr(repr_str) -> `namedtuple-ModelParameters-datetime-hostname-depth-width-days-dropout-optimizer-lr-normalized`: ...
def parse_model_repr_monthwise(repr_str) -> `namedtuple-ModelParameters-datetime-hostname-depth-width-month-dropout-optimizer-lr`: ...
def parse_model_repr_old(repr_str) -> `namedtuple-ModelParameters-datetime-hostname-depth-width-dropout-optimizer-lr-normalized`: ...
def parse_whole_directory(path) -> Any: ...
def parse_whole_directory_monthwise(path) -> Any: ...
def parse_whole_directory_old(path) -> Any: ...
