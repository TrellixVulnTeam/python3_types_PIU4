# (generated with --quick)

import __builtin__
import collections
from typing import Any, Callable, Iterable, List, Sized, Tuple, Type, TypeVar, Union

AccountValue = `namedtuple-AccountValue-account-tag-value-currency-modelCode`
BracketOrder = `namedtuple-BracketOrder-parent-takeProfit-stopLoss`
ConnectionStats = `namedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`
DOMLevel = `namedtuple-DOMLevel-price-size-marketMaker`
Dividends = `namedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`
FamilyCode = `namedtuple-FamilyCode-accountID-familyCodeStr`
Fill = `namedtuple-Fill-contract-execution-commissionReport-time`
HistoricalNews = `namedtuple-HistoricalNews-time-providerCode-articleId-headline`
HistoricalTick = `namedtuple-HistoricalTick-time-price-size`
HistoricalTickBidAsk = `namedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`
HistoricalTickLast = `namedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`
MktDepthData = `namedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`
NewsArticle = `namedtuple-NewsArticle-articleType-articleText`
NewsBulletin = `namedtuple-NewsBulletin-msgId-msgType-message-origExchange`
NewsTick = `namedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`
OptionChain = `namedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`
OptionComputation = `namedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`
PortfolioItem = `namedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`
Position = `namedtuple-Position-account-contract-position-avgCost`
PriceIncrement = `namedtuple-PriceIncrement-lowEdge-increment`
ScanData = `namedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`
SmartComponent = `namedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`
TagValue = `namedtuple-TagValue-tag-value`
TickByTickAllLast = `namedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`
TickByTickBidAsk = `namedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`
TickByTickMidPoint = `namedtuple-TickByTickMidPoint-time-midPoint`
TickData = `namedtuple-TickData-time-tickType-price-size`
TradeLogEntry = `namedtuple-TradeLogEntry-time-status-message`

Event: Any
UNSET_DOUBLE: Any
UNSET_INTEGER: Any
__all__: List[str]
nan: float

_TObject = TypeVar('_TObject', bound=Object)
_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode = TypeVar('_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode', bound=`namedtuple-AccountValue-account-tag-value-currency-modelCode`)
_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss = TypeVar('_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss', bound=`namedtuple-BracketOrder-parent-takeProfit-stopLoss`)
_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent = TypeVar('_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent', bound=`namedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`)
_Tnamedtuple-DOMLevel-price-size-marketMaker = TypeVar('_Tnamedtuple-DOMLevel-price-size-marketMaker', bound=`namedtuple-DOMLevel-price-size-marketMaker`)
_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount = TypeVar('_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount', bound=`namedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`)
_Tnamedtuple-FamilyCode-accountID-familyCodeStr = TypeVar('_Tnamedtuple-FamilyCode-accountID-familyCodeStr', bound=`namedtuple-FamilyCode-accountID-familyCodeStr`)
_Tnamedtuple-Fill-contract-execution-commissionReport-time = TypeVar('_Tnamedtuple-Fill-contract-execution-commissionReport-time', bound=`namedtuple-Fill-contract-execution-commissionReport-time`)
_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline = TypeVar('_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline', bound=`namedtuple-HistoricalNews-time-providerCode-articleId-headline`)
_Tnamedtuple-HistoricalTick-time-price-size = TypeVar('_Tnamedtuple-HistoricalTick-time-price-size', bound=`namedtuple-HistoricalTick-time-price-size`)
_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk = TypeVar('_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk', bound=`namedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`)
_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions = TypeVar('_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions', bound=`namedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`)
_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size = TypeVar('_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size', bound=`namedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`)
_Tnamedtuple-NewsArticle-articleType-articleText = TypeVar('_Tnamedtuple-NewsArticle-articleType-articleText', bound=`namedtuple-NewsArticle-articleType-articleText`)
_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange = TypeVar('_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange', bound=`namedtuple-NewsBulletin-msgId-msgType-message-origExchange`)
_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData = TypeVar('_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData', bound=`namedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`)
_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes = TypeVar('_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes', bound=`namedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`)
_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice = TypeVar('_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice', bound=`namedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`)
_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account = TypeVar('_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account', bound=`namedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`)
_Tnamedtuple-Position-account-contract-position-avgCost = TypeVar('_Tnamedtuple-Position-account-contract-position-avgCost', bound=`namedtuple-Position-account-contract-position-avgCost`)
_Tnamedtuple-PriceIncrement-lowEdge-increment = TypeVar('_Tnamedtuple-PriceIncrement-lowEdge-increment', bound=`namedtuple-PriceIncrement-lowEdge-increment`)
_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr = TypeVar('_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr', bound=`namedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`)
_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter = TypeVar('_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter', bound=`namedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`)
_Tnamedtuple-TagValue-tag-value = TypeVar('_Tnamedtuple-TagValue-tag-value', bound=`namedtuple-TagValue-tag-value`)
_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions = TypeVar('_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions', bound=`namedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`)
_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk = TypeVar('_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk', bound=`namedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`)
_Tnamedtuple-TickByTickMidPoint-time-midPoint = TypeVar('_Tnamedtuple-TickByTickMidPoint-time-midPoint', bound=`namedtuple-TickByTickMidPoint-time-midPoint`)
_Tnamedtuple-TickData-time-tickType-price-size = TypeVar('_Tnamedtuple-TickData-time-tickType-price-size', bound=`namedtuple-TickData-time-tickType-price-size`)
_Tnamedtuple-TradeLogEntry-time-status-message = TypeVar('_Tnamedtuple-TradeLogEntry-time-status-message', bound=`namedtuple-TradeLogEntry-time-status-message`)

class BarData(Object):
    defaults: dict

class BarDataList(BarList):
    __slots__ = ["barSizeSetting", "chartOptions", "contract", "durationStr", "endDateTime", "formatDate", "keepUpToDate", "reqId", "useRTH", "whatToShow"]
    __doc__: str
    updateEvent: Any

class BarList(list):
    __doc__: str
    events: Tuple[str]
    updateEvent: Any
    def __init__(self, *args) -> None: ...

class ComboLeg(Object):
    defaults: dict

class CommissionReport(Object):
    defaults: dict

class ContractDescription(Object):
    defaults: dict

class ContractDetails(Object):
    defaults: dict

class DeltaNeutralContract(Object):
    defaults: dict

class DepthMktDataDescription(Object):
    defaults: dict

class DynamicObject:
    def __init__(self, **kwargs) -> None: ...
    def __repr__(self) -> str: ...

class Execution(Object):
    defaults: dict

class ExecutionFilter(Object):
    defaults: dict

class FundamentalRatios(DynamicObject):
    __doc__: str

class HistogramData(Object):
    defaults: dict

class NewsProvider(Object):
    defaults: dict

class Object:
    __slots__ = ["__weakref__"]
    __doc__: str
    defaults: __builtin__.dict[nothing, nothing]
    def __eq__(self, other) -> Any: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def dict(self) -> __builtin__.dict[nothing, Any]: ...
    def diff(self, other) -> __builtin__.dict[nothing, __builtin__.tuple[Any, Any]]: ...
    def nonDefaults(self) -> __builtin__.dict[nothing, Any]: ...
    def tuple(self) -> __builtin__.tuple: ...
    def update(self: _TObject, **kwargs) -> _TObject: ...

class OrderComboLeg(Object):
    defaults: dict

class OrderState(Object):
    defaults: dict

class PnL(Object):
    defaults: dict

class PnLSingle(Object):
    defaults: dict

class RealTimeBar(Object):
    defaults: dict

class RealTimeBarList(BarList):
    __slots__ = ["barSize", "contract", "realTimeBarsOptions", "reqId", "useRTH", "whatToShow"]
    __doc__: str
    updateEvent: Any

class ScanDataList(list):
    __doc__: str
    events: Tuple[str]
    updateEvent: Any
    def __init__(self, *args) -> None: ...

class ScannerSubscription(Object):
    defaults: dict

class SoftDollarTier(Object):
    defaults: dict

class TickAttrib(Object):
    defaults: dict

class TickAttribBidAsk(Object):
    defaults: dict

class TickAttribLast(Object):
    defaults: dict

class `namedtuple-AccountValue-account-tag-value-currency-modelCode`(tuple):
    __slots__ = ["account", "currency", "modelCode", "tag", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    account: Any
    currency: Any
    modelCode: Any
    tag: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`], account, tag, value, currency, modelCode) -> `_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`: ...
    def _replace(self: `_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`, **kwds) -> `_Tnamedtuple-AccountValue-account-tag-value-currency-modelCode`: ...

class `namedtuple-BracketOrder-parent-takeProfit-stopLoss`(tuple):
    __slots__ = ["parent", "stopLoss", "takeProfit"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    parent: Any
    stopLoss: Any
    takeProfit: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`], parent, takeProfit, stopLoss) -> `_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`: ...
    def _replace(self: `_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`, **kwds) -> `_Tnamedtuple-BracketOrder-parent-takeProfit-stopLoss`: ...

class `namedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`(tuple):
    __slots__ = ["duration", "numBytesRecv", "numBytesSent", "numMsgRecv", "numMsgSent", "startTime"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    duration: Any
    numBytesRecv: Any
    numBytesSent: Any
    numMsgRecv: Any
    numMsgSent: Any
    startTime: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`], startTime, duration, numBytesRecv, numBytesSent, numMsgRecv, numMsgSent) -> `_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`: ...
    def _replace(self: `_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`, **kwds) -> `_Tnamedtuple-ConnectionStats-startTime-duration-numBytesRecv-numBytesSent-numMsgRecv-numMsgSent`: ...

class `namedtuple-DOMLevel-price-size-marketMaker`(tuple):
    __slots__ = ["marketMaker", "price", "size"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    marketMaker: Any
    price: Any
    size: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-DOMLevel-price-size-marketMaker`], price, size, marketMaker) -> `_Tnamedtuple-DOMLevel-price-size-marketMaker`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-DOMLevel-price-size-marketMaker`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-DOMLevel-price-size-marketMaker`: ...
    def _replace(self: `_Tnamedtuple-DOMLevel-price-size-marketMaker`, **kwds) -> `_Tnamedtuple-DOMLevel-price-size-marketMaker`: ...

class `namedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`(tuple):
    __slots__ = ["next12Months", "nextAmount", "nextDate", "past12Months"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    next12Months: Any
    nextAmount: Any
    nextDate: Any
    past12Months: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`], past12Months, next12Months, nextDate, nextAmount) -> `_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`: ...
    def _replace(self: `_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`, **kwds) -> `_Tnamedtuple-Dividends-past12Months-next12Months-nextDate-nextAmount`: ...

class `namedtuple-FamilyCode-accountID-familyCodeStr`(tuple):
    __slots__ = ["accountID", "familyCodeStr"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    accountID: Any
    familyCodeStr: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-FamilyCode-accountID-familyCodeStr`], accountID, familyCodeStr) -> `_Tnamedtuple-FamilyCode-accountID-familyCodeStr`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-FamilyCode-accountID-familyCodeStr`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-FamilyCode-accountID-familyCodeStr`: ...
    def _replace(self: `_Tnamedtuple-FamilyCode-accountID-familyCodeStr`, **kwds) -> `_Tnamedtuple-FamilyCode-accountID-familyCodeStr`: ...

class `namedtuple-Fill-contract-execution-commissionReport-time`(tuple):
    __slots__ = ["commissionReport", "contract", "execution", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    commissionReport: Any
    contract: Any
    execution: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Fill-contract-execution-commissionReport-time`], contract, execution, commissionReport, time) -> `_Tnamedtuple-Fill-contract-execution-commissionReport-time`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Fill-contract-execution-commissionReport-time`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Fill-contract-execution-commissionReport-time`: ...
    def _replace(self: `_Tnamedtuple-Fill-contract-execution-commissionReport-time`, **kwds) -> `_Tnamedtuple-Fill-contract-execution-commissionReport-time`: ...

class `namedtuple-HistoricalNews-time-providerCode-articleId-headline`(tuple):
    __slots__ = ["articleId", "headline", "providerCode", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    articleId: Any
    headline: Any
    providerCode: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`], time, providerCode, articleId, headline) -> `_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`: ...
    def _replace(self: `_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`, **kwds) -> `_Tnamedtuple-HistoricalNews-time-providerCode-articleId-headline`: ...

class `namedtuple-HistoricalTick-time-price-size`(tuple):
    __slots__ = ["price", "size", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    price: Any
    size: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-HistoricalTick-time-price-size`], time, price, size) -> `_Tnamedtuple-HistoricalTick-time-price-size`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-HistoricalTick-time-price-size`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-HistoricalTick-time-price-size`: ...
    def _replace(self: `_Tnamedtuple-HistoricalTick-time-price-size`, **kwds) -> `_Tnamedtuple-HistoricalTick-time-price-size`: ...

class `namedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`(tuple):
    __slots__ = ["priceAsk", "priceBid", "sizeAsk", "sizeBid", "tickAttribBidAsk", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    priceAsk: Any
    priceBid: Any
    sizeAsk: Any
    sizeBid: Any
    tickAttribBidAsk: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`], time, tickAttribBidAsk, priceBid, priceAsk, sizeBid, sizeAsk) -> `_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`: ...
    def _replace(self: `_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`, **kwds) -> `_Tnamedtuple-HistoricalTickBidAsk-time-tickAttribBidAsk-priceBid-priceAsk-sizeBid-sizeAsk`: ...

class `namedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`(tuple):
    __slots__ = ["exchange", "price", "size", "specialConditions", "tickAttribLast", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    exchange: Any
    price: Any
    size: Any
    specialConditions: Any
    tickAttribLast: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`], time, tickAttribLast, price, size, exchange, specialConditions) -> `_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`: ...
    def _replace(self: `_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`, **kwds) -> `_Tnamedtuple-HistoricalTickLast-time-tickAttribLast-price-size-exchange-specialConditions`: ...

class `namedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`(tuple):
    __slots__ = ["marketMaker", "operation", "position", "price", "side", "size", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str]
    marketMaker: Any
    operation: Any
    position: Any
    price: Any
    side: Any
    size: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`], time, position, marketMaker, operation, side, price, size) -> `_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`: ...
    def _replace(self: `_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`, **kwds) -> `_Tnamedtuple-MktDepthData-time-position-marketMaker-operation-side-price-size`: ...

class `namedtuple-NewsArticle-articleType-articleText`(tuple):
    __slots__ = ["articleText", "articleType"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    articleText: Any
    articleType: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-NewsArticle-articleType-articleText`], articleType, articleText) -> `_Tnamedtuple-NewsArticle-articleType-articleText`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-NewsArticle-articleType-articleText`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-NewsArticle-articleType-articleText`: ...
    def _replace(self: `_Tnamedtuple-NewsArticle-articleType-articleText`, **kwds) -> `_Tnamedtuple-NewsArticle-articleType-articleText`: ...

class `namedtuple-NewsBulletin-msgId-msgType-message-origExchange`(tuple):
    __slots__ = ["message", "msgId", "msgType", "origExchange"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    message: Any
    msgId: Any
    msgType: Any
    origExchange: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`], msgId, msgType, message, origExchange) -> `_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`: ...
    def _replace(self: `_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`, **kwds) -> `_Tnamedtuple-NewsBulletin-msgId-msgType-message-origExchange`: ...

class `namedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`(tuple):
    __slots__ = ["articleId", "extraData", "headline", "providerCode", "timeStamp"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    articleId: Any
    extraData: Any
    headline: Any
    providerCode: Any
    timeStamp: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`], timeStamp, providerCode, articleId, headline, extraData) -> `_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`: ...
    def _replace(self: `_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`, **kwds) -> `_Tnamedtuple-NewsTick-timeStamp-providerCode-articleId-headline-extraData`: ...

class `namedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`(tuple):
    __slots__ = ["exchange", "expirations", "multiplier", "strikes", "tradingClass", "underlyingConId"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    exchange: Any
    expirations: Any
    multiplier: Any
    strikes: Any
    tradingClass: Any
    underlyingConId: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`], exchange, underlyingConId, tradingClass, multiplier, expirations, strikes) -> `_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`: ...
    def _replace(self: `_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`, **kwds) -> `_Tnamedtuple-OptionChain-exchange-underlyingConId-tradingClass-multiplier-expirations-strikes`: ...

class `namedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`(tuple):
    __slots__ = ["delta", "gamma", "impliedVol", "optPrice", "pvDividend", "theta", "undPrice", "vega"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str, str]
    delta: Any
    gamma: Any
    impliedVol: Any
    optPrice: Any
    pvDividend: Any
    theta: Any
    undPrice: Any
    vega: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`], impliedVol, delta, optPrice, pvDividend, gamma, vega, theta, undPrice) -> `_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`: ...
    def _replace(self: `_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`, **kwds) -> `_Tnamedtuple-OptionComputation-impliedVol-delta-optPrice-pvDividend-gamma-vega-theta-undPrice`: ...

class `namedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`(tuple):
    __slots__ = ["account", "averageCost", "contract", "marketPrice", "marketValue", "position", "realizedPNL", "unrealizedPNL"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str, str]
    account: Any
    averageCost: Any
    contract: Any
    marketPrice: Any
    marketValue: Any
    position: Any
    realizedPNL: Any
    unrealizedPNL: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`], contract, position, marketPrice, marketValue, averageCost, unrealizedPNL, realizedPNL, account) -> `_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`: ...
    def _replace(self: `_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`, **kwds) -> `_Tnamedtuple-PortfolioItem-contract-position-marketPrice-marketValue-averageCost-unrealizedPNL-realizedPNL-account`: ...

class `namedtuple-Position-account-contract-position-avgCost`(tuple):
    __slots__ = ["account", "avgCost", "contract", "position"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    account: Any
    avgCost: Any
    contract: Any
    position: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Position-account-contract-position-avgCost`], account, contract, position, avgCost) -> `_Tnamedtuple-Position-account-contract-position-avgCost`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Position-account-contract-position-avgCost`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Position-account-contract-position-avgCost`: ...
    def _replace(self: `_Tnamedtuple-Position-account-contract-position-avgCost`, **kwds) -> `_Tnamedtuple-Position-account-contract-position-avgCost`: ...

class `namedtuple-PriceIncrement-lowEdge-increment`(tuple):
    __slots__ = ["increment", "lowEdge"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    increment: Any
    lowEdge: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-PriceIncrement-lowEdge-increment`], lowEdge, increment) -> `_Tnamedtuple-PriceIncrement-lowEdge-increment`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-PriceIncrement-lowEdge-increment`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-PriceIncrement-lowEdge-increment`: ...
    def _replace(self: `_Tnamedtuple-PriceIncrement-lowEdge-increment`, **kwds) -> `_Tnamedtuple-PriceIncrement-lowEdge-increment`: ...

class `namedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`(tuple):
    __slots__ = ["benchmark", "contractDetails", "distance", "legsStr", "projection", "rank"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    benchmark: Any
    contractDetails: Any
    distance: Any
    legsStr: Any
    projection: Any
    rank: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`], rank, contractDetails, distance, benchmark, projection, legsStr) -> `_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`: ...
    def _replace(self: `_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`, **kwds) -> `_Tnamedtuple-ScanData-rank-contractDetails-distance-benchmark-projection-legsStr`: ...

class `namedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`(tuple):
    __slots__ = ["bitNumber", "exchange", "exchangeLetter"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    bitNumber: Any
    exchange: Any
    exchangeLetter: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`], bitNumber, exchange, exchangeLetter) -> `_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`: ...
    def _replace(self: `_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`, **kwds) -> `_Tnamedtuple-SmartComponent-bitNumber-exchange-exchangeLetter`: ...

class `namedtuple-TagValue-tag-value`(tuple):
    __slots__ = ["tag", "value"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    tag: Any
    value: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TagValue-tag-value`], tag, value) -> `_Tnamedtuple-TagValue-tag-value`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TagValue-tag-value`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TagValue-tag-value`: ...
    def _replace(self: `_Tnamedtuple-TagValue-tag-value`, **kwds) -> `_Tnamedtuple-TagValue-tag-value`: ...

class `namedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`(tuple):
    __slots__ = ["exchange", "price", "size", "specialConditions", "tickAttribLast", "tickType", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str, str]
    exchange: Any
    price: Any
    size: Any
    specialConditions: Any
    tickAttribLast: Any
    tickType: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`], tickType, time, price, size, tickAttribLast, exchange, specialConditions) -> `_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`: ...
    def _replace(self: `_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`, **kwds) -> `_Tnamedtuple-TickByTickAllLast-tickType-time-price-size-tickAttribLast-exchange-specialConditions`: ...

class `namedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`(tuple):
    __slots__ = ["askPrice", "askSize", "bidPrice", "bidSize", "tickAttribBidAsk", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    askPrice: Any
    askSize: Any
    bidPrice: Any
    bidSize: Any
    tickAttribBidAsk: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`], time, bidPrice, askPrice, bidSize, askSize, tickAttribBidAsk) -> `_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`: ...
    def _replace(self: `_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`, **kwds) -> `_Tnamedtuple-TickByTickBidAsk-time-bidPrice-askPrice-bidSize-askSize-tickAttribBidAsk`: ...

class `namedtuple-TickByTickMidPoint-time-midPoint`(tuple):
    __slots__ = ["midPoint", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    midPoint: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TickByTickMidPoint-time-midPoint`], time, midPoint) -> `_Tnamedtuple-TickByTickMidPoint-time-midPoint`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TickByTickMidPoint-time-midPoint`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TickByTickMidPoint-time-midPoint`: ...
    def _replace(self: `_Tnamedtuple-TickByTickMidPoint-time-midPoint`, **kwds) -> `_Tnamedtuple-TickByTickMidPoint-time-midPoint`: ...

class `namedtuple-TickData-time-tickType-price-size`(tuple):
    __slots__ = ["price", "size", "tickType", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    price: Any
    size: Any
    tickType: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TickData-time-tickType-price-size`], time, tickType, price, size) -> `_Tnamedtuple-TickData-time-tickType-price-size`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TickData-time-tickType-price-size`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TickData-time-tickType-price-size`: ...
    def _replace(self: `_Tnamedtuple-TickData-time-tickType-price-size`, **kwds) -> `_Tnamedtuple-TickData-time-tickType-price-size`: ...

class `namedtuple-TradeLogEntry-time-status-message`(tuple):
    __slots__ = ["message", "status", "time"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    message: Any
    status: Any
    time: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-TradeLogEntry-time-status-message`], time, status, message) -> `_Tnamedtuple-TradeLogEntry-time-status-message`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-TradeLogEntry-time-status-message`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-TradeLogEntry-time-status-message`: ...
    def _replace(self: `_Tnamedtuple-TradeLogEntry-time-status-message`, **kwds) -> `_Tnamedtuple-TradeLogEntry-time-status-message`: ...

def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
