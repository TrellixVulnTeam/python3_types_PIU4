# (generated with --quick)

from typing import Any, Callable, Dict, Generator, List, Tuple, TypeVar

ASSERTIONS: Dict[str, Any]
ESCAPED_CHARS: Dict[str, Any]
LOOKAHEAD_ASSERTIONS: Dict[str, Any]
SHORTHANDS: Dict[str, Any]
SUB_PARSERS: Dict[Any, Callable]
SYMBOLS: dict
Symbols: Any
__all__: List[str]
nodes: Any

_T1 = TypeVar('_T1')

def _peek(iterator, eof: _T1 = ...) -> Generator[Tuple[Any, Any], Any, Any]: ...
def fill_groups(expression) -> Tuple[int, Dict[Any, int]]: ...
def greediness(expression) -> Generator[Any, Any, None]: ...
def join_atoms(expression) -> Generator[Any, Any, None]: ...
def parse(expression) -> Generator[Any, Any, None]: ...
def parse_group_tag(expression, *, next_char, **kwargs) -> Generator[Any, Any, None]: ...
def parse_repetition_range(expression, **kwargs) -> Generator[Any, Any, None]: ...
def parse_set(expression, **kwargs) -> Generator[Any, Any, None]: ...
