# (generated with --quick)

import __builtin__
from typing import Any, Callable, Dict, List, Set

Contexts: Set[str]
command: Any
commandexecutor: Any
ctx: Any
exceptions: Any
keyAttrs: Dict[str, Callable[[Any], Any]]
mitmproxy: Any
navkeys: List[str]
os: module
requiredKeyAttrs: Set[str]
ruamel: Any
signals: Any
typing: module

class Binding:
    command: Any
    contexts: list
    help: Any
    key: Any
    def __init__(self, key, command, contexts, help) -> None: ...
    def keyspec(self) -> Any: ...
    def sortkey(self) -> Any: ...

class KeyBindingError(Exception): ...

class Keymap:
    bindings: Any
    executor: Any
    keys: Dict[str, dict]
    def __init__(self, master) -> None: ...
    def _check_contexts(self, contexts) -> None: ...
    def add(self, key, command, contexts, help = ...) -> None: ...
    def bind(self, binding) -> None: ...
    def get(self, context, key) -> Any: ...
    def handle(self, context, key) -> Any: ...
    def handle_only(self, context, key) -> Any: ...
    def list(self, context) -> __builtin__.list: ...
    def remove(self, key, contexts) -> None: ...
    def unbind(self, binding) -> None: ...

class KeymapConfig:
    defaultFile: str
    keymap_load_path: Any
    def load_path(self, km, p) -> None: ...
    def parse(self, text) -> Any: ...
    def running(self) -> None: ...
