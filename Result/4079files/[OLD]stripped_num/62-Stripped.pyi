# (generated with --quick)

import collections
from typing import Any, List, Tuple, Type, Union

OrderedDict: Type[collections.OrderedDict]
logging: module
os: module
subprocess: module
yaml: Any
zynthian_controller: Any
zynthian_engine: Any

class zynthian_engine_csound(Any):
    _ctrl_screens: List[List[Union[list, str]]]
    _ctrls: List[List[Union[int, str]]]
    bank_dirs: List[Tuple[str, Any]]
    base_command: str
    command: str
    jackname: str
    name: str
    nickname: str
    nogui: bool
    preset: Any
    preset_config: Any
    type: str
    def __init__(self, zyngui = ...) -> None: ...
    def cmp_presets(self, preset1, preset2) -> bool: ...
    def get_bank_list(self, layer = ...) -> Any: ...
    def get_controllers_dict(self, layer) -> Any: ...
    def get_fixed_preset_filepath(self, preset_dir) -> Any: ...
    def get_preset_filepath(self, preset_dir) -> Any: ...
    def get_preset_list(self, bank) -> Any: ...
    def load_preset_config(self, preset_dir) -> bool: ...
    def set_bank(self, layer, bank) -> bool: ...
    def set_preset(self, layer, preset, preload = ...) -> bool: ...

def isdir(path: Union[_PathLike, bytes, str]) -> bool: ...
def isfile(path: Union[_PathLike, bytes, str]) -> bool: ...
@overload
def join(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def join(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def sleep(secs: float) -> None: ...
