# (generated with --quick)

from typing import Any, Dict, Optional, Set, Tuple
import xml.etree.ElementTree

Asset: Any
ET: module
MetadataProcessor: Any
Processor: Any
UnsupportedFormatError: Any
XML_NS: dict
_FONT_SIZE_PT: int
_INCH_TO_MM: float
_PT_PER_INCH: float
_PX_PER_INCH: int
_X_HEIGHT: float
io: module
operator: Any

class SVGMetadataProcessor(Any):
    __doc__: str
    formats: Set[str]
    def __init__(self) -> None: ...
    def combine(self, file, metadata) -> io.BytesIO: ...
    def read(self, file) -> Dict[str, Dict[str, str]]: ...
    def strip(self, file) -> io.BytesIO: ...

class SVGProcessor(Any):
    __doc__: str
    shrink: Any
    @staticmethod
    def _SVGProcessor__remove_elements(root, qname, keep_func) -> None: ...
    @staticmethod
    def _SVGProcessor__remove_xml_whitespace(elem) -> None: ...
    def __init__(self) -> None: ...
    def can_read(self, file) -> bool: ...
    def read(self, file) -> Any: ...

def _parse_svg(file) -> Tuple[xml.etree.ElementTree.ElementTree, xml.etree.ElementTree.Element]: ...
def _register_xml_namespaces() -> None: ...
def _write_svg(tree) -> io.BytesIO: ...
def svg_length_to_px(length) -> Optional[float]: ...
