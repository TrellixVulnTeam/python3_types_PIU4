# (generated with --quick)

from typing import Any, List, Optional, Pattern, Tuple

TYPESHED_HOME: str
TYPESHED_SUBDIRS: List[str]
UNSET: Any
argparse: module
itertools: module
os: module
pytype_config: module
pytype_io: module
re: module
subprocess: module
traceback: module

class PathMatcher:
    matcher: Optional[Pattern[str]]
    def __init__(self, patterns) -> None: ...
    def search(self, path) -> Any: ...

def _get_module_name(filename) -> str: ...
def _get_relative(filename) -> Any: ...
def _is_version(path, version) -> bool: ...
def can_run(exe, *, args) -> bool: ...
def check_python_exes_runnable(*, python27_exe_arg, python36_exe_arg) -> None: ...
def check_subdirs_discoverable(subdir_paths) -> None: ...
def create_parser() -> argparse.ArgumentParser: ...
def determine_files_to_test(*, typeshed_location, subdir_paths) -> List[Tuple[Any, int]]: ...
def load_blacklist(typeshed_location) -> List[str]: ...
def main() -> None: ...
def run_all_tests(*, files_to_test, typeshed_location, python27_exe, python36_exe, print_stderr, dry_run) -> None: ...
def run_pytype(*, filename, python_version, python_exe, typeshed_location) -> Optional[str]: ...
