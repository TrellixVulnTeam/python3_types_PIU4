# (generated with --quick)

from typing import Any, NoReturn

Exp: module
Stm: module
Tok: Any

class Break(BaseException): ...

class Environment(object):
    parent: Any
    values: dict
    def __getitem__(self, key) -> Any: ...
    def __init__(self, parent = ...) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def declare(self, key, value) -> None: ...
    def getAt(self, distance, name) -> Any: ...
    def setAt(self, distance, name, val) -> None: ...

class Function(object):
    body: Any
    closure: Any
    params: Any
    def __init__(self, params, closure, body) -> None: ...
    def call(self, intpr, args) -> Any: ...

class Interpreter(object):
    context: Any
    globals: Environment
    locals: dict
    def contextualExecute(self, stmts, ctx) -> None: ...
    def enterScope(self) -> None: ...
    def evaluate(self, exp) -> Any: ...
    def execute(self, stm) -> None: ...
    def exitScope(self) -> None: ...
    def interpret(self, ast) -> None: ...
    def lookUpVariable(self, name, exp) -> Any: ...
    def resolve(self, exp, depth) -> None: ...
    def visitExpAssign(self, exp) -> Any: ...
    def visitExpBinary(self, exp) -> Any: ...
    def visitExpCall(self, exp) -> Any: ...
    def visitExpIdent(self, exp) -> Any: ...
    def visitExpLiteral(self, exp) -> Any: ...
    def visitExpUnary(self, exp) -> Any: ...
    def visitStmBlock(self, stm) -> None: ...
    def visitStmBreak(self, stm) -> NoReturn: ...
    def visitStmExp(self, stm) -> None: ...
    def visitStmFunDecl(self, stm) -> None: ...
    def visitStmIf(self, stm) -> None: ...
    def visitStmPrint(self, stm) -> None: ...
    def visitStmReturn(self, stm) -> NoReturn: ...
    def visitStmVarDecl(self, stm) -> None: ...
    def visitStmWhile(self, stm) -> None: ...

class Return(BaseException):
    val: Any
    def __init__(self, val) -> None: ...

class RuntimeError(BaseException):
    lineno: Any
    msg: Any
    def __init__(self, lineno, msg) -> None: ...

def are_compat(op, left, right) -> bool: ...
def is_num(val) -> bool: ...
def is_truthy(val) -> bool: ...
def stringify(val) -> str: ...
