# (generated with --quick)

import configparser
from typing import Any, Dict, List, Type, Union

ConfigParser: Type[configparser.ConfigParser]
MANDATORY_FIELDS: Dict[str, List[str]]
ParsingError: Type[configparser.ParsingError]
Singleton: Any
logging: module

class Config(metaclass=Any):
    _config: Any
    _config_was_set: bool
    logger: logging.Logger
    def __getitem__(self, item) -> Any: ...
    def __init__(self) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    @staticmethod
    def default_config() -> Dict[str, Dict[str, Union[float, int, str, List[nothing]]]]: ...
    def is_simulation(self) -> Any: ...
    def load_file(self, filename) -> None: ...
    def load_parameters(self, cli_args) -> None: ...
    def read_config_file(self, filename) -> Dict[str, Dict[str, str]]: ...
    def update_content(self) -> None: ...
    def update_ports(self) -> None: ...
    def validate_user_input(self) -> None: ...
