# (generated with --quick)

import click.core
import collections
import sqlite3.dbapi2
import types
from typing import Any, Callable, Generator, Iterable, Optional, Sized, Tuple, Type, TypeVar, Union

CHAT_FILENAME_FMT: str
CHAT_FMT: str
COL_SQL: str
DEFAULT_CHAT_ID: str
EXT: str
GeneratorType: Type[types.GeneratorType]
MAX_NAME_LEN: int
MSG_FMT: str
MSG_SQL: str
chats_to_files: click.core.Command
click: module
datetime: Type[datetime.datetime]
defaultdict: Type[collections.defaultdict]
ex: ImportError
format_msg: Any

_TChat = TypeVar('_TChat', bound=Chat)
_Tnamedtuple-Chat-users-msgs-id = TypeVar('_Tnamedtuple-Chat-users-msgs-id', bound=`namedtuple-Chat-users-msgs-id`)
_Tnamedtuple-Message-timestamp-user-msg = TypeVar('_Tnamedtuple-Message-timestamp-user-msg', bound=`namedtuple-Message-timestamp-user-msg`)

class Chat(`namedtuple-Chat-users-msgs-id`):
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __new__(cls: Type[_TChat], msgs, id = ...) -> _TChat: ...
    def save(self, filename = ..., max_length = ...) -> Any: ...

class Message(`namedtuple-Message-timestamp-user-msg`):
    formatted_msg: Any

class `namedtuple-Chat-users-msgs-id`(tuple):
    __slots__ = ["id", "msgs", "users"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    id: Any
    msgs: Any
    users: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Chat-users-msgs-id`], users, msgs, id) -> `_Tnamedtuple-Chat-users-msgs-id`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Chat-users-msgs-id`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Chat-users-msgs-id`: ...
    def _replace(self: `_Tnamedtuple-Chat-users-msgs-id`, **kwds) -> `_Tnamedtuple-Chat-users-msgs-id`: ...

class `namedtuple-Message-timestamp-user-msg`(tuple):
    __slots__ = ["msg", "timestamp", "user"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    msg: Any
    timestamp: Any
    user: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-Message-timestamp-user-msg`], timestamp, user, msg) -> `_Tnamedtuple-Message-timestamp-user-msg`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-Message-timestamp-user-msg`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-Message-timestamp-user-msg`: ...
    def _replace(self: `_Tnamedtuple-Message-timestamp-user-msg`, **kwds) -> `_Tnamedtuple-Message-timestamp-user-msg`: ...

def chdir(path: Union[_PathLike, bytes, int, str]) -> None: ...
def connect(database: Union[bytes, str], timeout: float = ..., detect_types: int = ..., isolation_level: Optional[str] = ..., check_same_thread: bool = ..., factory: Optional[Type[sqlite3.dbapi2.Connection]] = ..., cached_statements: int = ..., uri: bool = ...) -> sqlite3.dbapi2.Connection: ...
def gen_rows(path) -> Generator[Any, Any, None]: ...
def gen_skype_chats(path) -> Generator[Chat, Any, None]: ...
def get_skype_map(path) -> collections.defaultdict: ...
def getcwd() -> str: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
