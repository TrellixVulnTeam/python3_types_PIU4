# (generated with --quick)

import __builtin__
from typing import Any, Dict, List, Tuple, Type, TypeVar

ALGO_ECDSA_SHA256: str
ALGO_RSA_SHA1: str
ALGO_RSA_SHA256: str
ALGO_RSA_SHA384: str
ALGO_RSA_SHA512: str
ASN1_TYPES: Dict[str, int]
PREFIX_RSA_SHA256: bytearray
PREFIX_RSA_SHA384: bytearray
PREFIX_RSA_SHA512: bytearray
_logger: Any
bh2u: Any
ca_keyID: Any
ca_list: Any
ca_path: str
certifi: module
datetime: Type[datetime.datetime]
ecdsa: Any
get_logger: Any
hashlib: module
load_certificates: Any
profiler: Any
time: module
util: Any

_T0 = TypeVar('_T0')

class ASN1_Node(bytes):
    def decode_time(self, ii) -> time.struct_time: ...
    def first_child(self, node) -> Tuple[Any, Any, Any]: ...
    def get_all(self, node) -> bytes: ...
    def get_children(self, node) -> list: ...
    def get_dict(self, node) -> Dict[str, bytes]: ...
    def get_node(self, ix: _T0) -> Tuple[_T0, Any, Any]: ...
    def get_sequence(self) -> List[nothing]: ...
    def get_value(self, node) -> bytes: ...
    def get_value_of_type(self, node, asn1_type) -> bytes: ...
    def is_child_of(node1: ASN1_Node, node2) -> Any: ...
    def next_node(self, node) -> Tuple[Any, Any, Any]: ...
    def root(self) -> Tuple[int, int, Any]: ...

class CertificateError(Exception): ...

class X509(object):
    AKI: Any
    CA: bool
    SKI: Any
    bytes: bytearray
    cert_sig_algo: Any
    data: Any
    ec_public_key: Any
    exponent: Any
    issuer: Any
    modulus: Any
    notAfter: Any
    notBefore: Any
    public_key_algo: Any
    serial_number: Any
    sig_algo: Any
    signature: Any
    subject: Any
    def __init__(self, b) -> None: ...
    def check_ca(self) -> bool: ...
    def check_date(self) -> None: ...
    def getFingerprint(self) -> __builtin__.bytes: ...
    def get_common_name(self) -> Any: ...
    def get_issuer_keyID(self) -> Any: ...
    def get_keyID(self) -> Any: ...
    def get_signature(self) -> Tuple[str, __builtin__.bytes, __builtin__.bytes]: ...

def bitstr_to_bytestr(s) -> Any: ...
def bytestr_to_int(s) -> int: ...
def decode_OID(s) -> str: ...
def encode_OID(oid) -> str: ...
