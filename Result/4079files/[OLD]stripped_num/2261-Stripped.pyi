# (generated with --quick)

from typing import Any, Callable, Dict, Generator, List, Tuple

Batch = Tuple[Any, Any, int]
SequenceData = Tuple[List[int], List[int], List[dict]]

ALPHABET_SIZE: int
_logger: logging.Logger
glob: module
logging: module
np: module
os: module

class ProgressBar:
    __doc__: str
    _header_message: Any
    _header_printed: bool
    _size_of_bar_in_chars: Any
    _steps_to_finish: Any
    p: Any
    def _ProgressBar__print_header(self) -> None: ...
    def _ProgressBar__start_progress(self, steps_to_finish) -> Callable[[], Any]: ...
    def __init__(self, steps_to_finish, size_of_bar_in_chars = ..., header_message = ...) -> None: ...
    def step(self, reset = ...) -> None: ...

def _convert_from_alphabet(ch) -> Any: ...
def _convert_to_alphabet(ch, avoid_tab_and_lf = ...) -> str: ...
def _convert_to_alphabet_impl(ch, avoid_tab_and_lf = ...) -> Any: ...
def _find_file(char_index, file_index) -> Any: ...
def decode_to_text(chars, avoid_tab_and_lf = ...) -> str: ...
def encode_text(text) -> list: ...
def print_learning_learned_comparison(X, Y, losses, file_index, batch_loss, batch_accuracy, epoch_size, index, epoch) -> None: ...
def read_data_files(glob_pattern, validation = ...) -> Tuple[list, list, List[Dict[str, Any]]]: ...
def rnn_minibatch_generator(data, batch_size, sequence_length, num_epochs) -> Generator[Tuple[Any, Any, int], Any, None]: ...
