# (generated with --quick)

from typing import Any, Dict, Iterator, List, Set, TypeVar

abc: module
collections: module
datetime: module
requests: Any

_T0 = TypeVar('_T0')

class MemoryRequestsStorage(RequestStorage):
    _all_requests: set
    _requests_by_id: dict
    _requests_by_result_id: collections.defaultdict
    _result_counter: int
    _results_by_id: Dict[int, Any]
    def __init__(self) -> None: ...
    def _create_result(self, request) -> int: ...
    def _get_item_by_deadline_proximity(self, container, deadline, time_proximity) -> set: ...
    def _remove_request_by_id(self, request_id) -> None: ...
    def _update_result_deadline(self, result_id) -> None: ...
    def get_activity_requests(self, activity = ...) -> List[nothing]: ...
    def get_requests_by_deadline_proximity(self, deadline, time_buffer_in_seconds) -> Set[nothing]: ...
    def get_requests_of_result(self, result_id) -> Any: ...
    def get_result(self, result_id) -> Any: ...
    def get_results_by_deadline_proximity(self, deadline, time_proximity) -> Iterator: ...
    def remove_activity_request(self, request_id, person_id) -> None: ...
    def resolve_requests(self, requests_ids) -> Any: ...
    def store_request(self, request: _T0) -> _T0: ...
    def wipe_database(self) -> None: ...

class RequestStorage(abc.ABC):
    @abstractmethod
    def __init__(self) -> Any: ...
    def _find_fitting_result_id(self, results) -> Any: ...
    @abstractmethod
    def _update_result_deadline(self, result_id) -> Any: ...
    def _update_result_status(self, result: _T0, concerned_requests) -> _T0: ...
    @abstractmethod
    def get_activity_requests(self, activity = ...) -> Any: ...
    @abstractmethod
    def get_requests_by_deadline_proximity(self, deadline, time_buffer_in_seconds) -> Any: ...
    @abstractmethod
    def get_requests_of_result(self, result_id) -> Any: ...
    @abstractmethod
    def get_result(self, result_id) -> Any: ...
    @abstractmethod
    def get_results_by_deadline_proximity(self, deadline, time_proximity) -> Any: ...
    @abstractmethod
    def remove_activity_request(self, request_id, person_id) -> Any: ...
    @abstractmethod
    def resolve_requests(self, requests) -> Any: ...
    @abstractmethod
    def store_request(self, request) -> Any: ...
    @abstractmethod
    def wipe_database(self) -> Any: ...
