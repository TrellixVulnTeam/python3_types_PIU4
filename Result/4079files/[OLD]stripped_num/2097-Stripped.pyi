# (generated with --quick)

import bireus.client.download_service
import bireus.client.repository
import bireus.server.repository_manager
import bireus.shared.repository
import pathlib
import tests.mocks.mock_download_service
from typing import Any, Type

CheckoutError: Type[bireus.client.repository.CheckoutError]
ClientRepository: Type[bireus.client.repository.ClientRepository]
DownloadError: Type[bireus.client.download_service.DownloadError]
MockDownloadService: Type[tests.mocks.mock_download_service.MockDownloadService]
Path: Type[pathlib.Path]
ProtocolException: Type[bireus.shared.repository.ProtocolException]
RepositoryManager: Type[bireus.server.repository_manager.RepositoryManager]
ch: logging.StreamHandler
client_path: pathlib.Path
create_test_server_data: Any
filecmp: module
formatter: logging.Formatter
json: module
logging: module
networkx: module
os: module
prepare_server: Any
pytest: Any
root: logging.Logger
server_path: pathlib.Path
shutil: module
sys: module
test_url: str
zlib: module

def assert_file_equals(file_or_folder_A, file_or_folder_B, file_name = ...) -> None: ...
def assert_zip_file_equals(file_or_folder_A, file_or_folder_B, file_name = ...) -> None: ...
def change_dir(path) -> None: ...
def compare_files(file1, file2) -> bool: ...
def copy_file(source, dest) -> None: ...
def copy_folder(source, dest) -> None: ...
def crc32_from_file(filepath) -> str: ...
def get_latest_version(mocker, downloader) -> bireus.client.repository.ClientRepository: ...
def make_archive(basename, archive_format, root_dir) -> str: ...
def move_file(src, dst) -> None: ...
def remove_folder(path) -> None: ...
def test_checkout_version_crc_mismatch_before_patching(mocker, prepare_server) -> None: ...
def test_checkout_version_success(mocker, prepare_server) -> None: ...
def test_checkout_version_twice_success(mocker, prepare_server) -> None: ...
def test_checkout_version_unknown(mocker, prepare_server) -> None: ...
def test_get_from_url_folder_exists() -> None: ...
def test_get_from_url_http_error() -> None: ...
def test_get_from_url_success(mocker, prepare_server) -> None: ...
def test_protocol_exception(tmpdir) -> None: ...
def unpack_archive(filename, extract_dir, archive_format = ...) -> None: ...
