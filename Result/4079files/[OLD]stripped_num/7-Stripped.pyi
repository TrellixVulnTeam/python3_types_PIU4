# (generated with --quick)

import Error
import __builtin__
import baseGate
import baseQubit
from typing import Any, Dict, Type

BaseQubit: Type[baseQubit.BaseQubit]
Bit: Type[Bit.Bit]
CodeError: Type[Error.CodeError]
EnvironmentError: Type[Error.EnvironmentError]
ExecuteModeError: Type[Error.ExecuteModeError]
Gate: Type[baseGate.Gate]
GateNameError: Type[Error.GateNameError]
IBMError: Type[Error.IBMError]
IDRepeatError: Type[Error.IDRepeatError]
NoCloning: Type[Error.NoCloning]
Noise: Type[baseGate.Noise]
NotNormal: Type[Error.NotNormal]
Qubit: Type[Qubit.Qubit]
Qubits: Type[Qubit.Qubits]
SplitGate: Type[Gate.SplitGate]
allowGate: Dict[str, int]
cmath: module
copy: module
elementGate: Dict[str, str]
interactCfg: Any
math: module
np: module
os: module
random: module
re: module
sys: module

class DMO:
    DMOql: Any
    DMOvl: Any
    split: Gate.SplitGate
    def CNOT(self, q1, q2) -> Any: ...
    def H(self, q) -> Any: ...
    def Operator(self, gateName, tq, cq = ..., angle = ...) -> Any: ...
    def Ry(self, phi, q) -> Any: ...
    def Rz(self, phi, q) -> Any: ...
    def S(self, q) -> Any: ...
    def Sd(self, q) -> Any: ...
    def T(self, q) -> Any: ...
    def Td(self, q) -> Any: ...
    def X(self, q) -> Any: ...
    def Y(self, q) -> Any: ...
    def Z(self, q) -> Any: ...
    def _DMO__fullGName(self, gn, vl, ql) -> str: ...
    def _DMO__setFullGName(self, cgn, gn) -> Any: ...
    def __init__(self, ql, vl) -> None: ...
    def get_curl_info(self) -> list: ...

class MO(DMO):
    MOql: Any
    MOvl: Any
    bool: __builtin__.bool
    header: str
    def MO(self, ql, vl) -> list: ...
    def Operator(self, gateName, tq, cq = ..., angle = ...) -> None: ...
    def recordGate(self, gate, ql) -> None: ...

class QWMO(DMO):
    angle: Any
    def __init__(self, ql, vl, angle) -> None: ...
    def end(self) -> bool: ...

def CNOT(q1, q2, record = ..., forceQuit = ...) -> Any: ...
def ControlledZ(q1, q2, record = ..., forceQuit = ...) -> Any: ...
def H(q, record = ..., forceQuit = ...) -> Any: ...
def I(q, record = ..., forceQuit = ...) -> Any: ...
def M(q, result = ...) -> Any: ...
def Rx(phi, q, record = ..., forceQuit = ...) -> Any: ...
def Ry(theta, q, record = ..., forceQuit = ...) -> Any: ...
def Rz(phi, q, record = ..., forceQuit = ...) -> Any: ...
def S(q, record = ..., forceQuit = ...) -> Any: ...
def Sd(q, record = ..., forceQuit = ...) -> Any: ...
def T(q, record = ..., forceQuit = ...) -> Any: ...
def Td(q, record = ..., forceQuit = ...) -> Any: ...
def Toffoli(q1, q2, q3) -> Any: ...
def X(q, record = ..., forceQuit = ...) -> Any: ...
def Y(q, record = ..., forceQuit = ...) -> Any: ...
def Z(q, record = ..., forceQuit = ...) -> Any: ...
def __getattr__(name) -> Any: ...
def checkEnvironment() -> Any: ...
def get_curl_info() -> list: ...
