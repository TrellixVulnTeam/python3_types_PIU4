# (generated with --quick)

import collections
from typing import Any, Callable, Generator, Iterable, Iterator, Sized, Tuple, Type, TypeVar, Union

IntegrationTestcase = `namedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`

inspect: module
json: module
os: module
pytest: Any
runner: Any
socket: module
subprocess: module
time: module
yaml: module

AnyStr = TypeVar('AnyStr', str, bytes)
_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip = TypeVar('_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip', bound=`namedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`)

class ActualJenkinsRunner(IntegrationTestRunner):
    container_id: Any
    image_name: Any
    def __init__(self, image_name) -> None: ...
    def _run_test_without_cleanup(self, tmpdir, config) -> Tuple[bool, Any]: ...
    def check_docker_output(self, args) -> str: ...
    def do_retry(self, func) -> Any: ...
    def run_test(self, tmpdir, config) -> Any: ...

class DirectRunner(IntegrationTestRunner):
    def run_test(self, tmpdir, config) -> Tuple[bool, Any]: ...

class IntegrationTestRunner:
    def run_test_command(self, command) -> Tuple[bool, Any]: ...

class JJBSubcommandRunner(IntegrationTestRunner):
    def run_test(self, tmpdir, config) -> Tuple[bool, Any]: ...

class `namedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`(tuple):
    __slots__ = ["config", "expect_success", "expected_output", "jobs_yaml", "runners_to_skip", "test_name"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    config: Any
    expect_success: Any
    expected_output: Any
    jobs_yaml: Any
    runners_to_skip: Any
    test_name: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`], test_name, jobs_yaml, expected_output, expect_success, config, runners_to_skip) -> `_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`: ...
    def _replace(self: `_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`, **kwds) -> `_Tnamedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`: ...

def _generate_jjb_config(url = ..., password = ...) -> str: ...
def _get_case_item(key, case_dict, defaults, required = ...) -> Any: ...
def _parse_case(case_dict, defaults) -> `namedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`: ...
def _parse_testcases(filenames) -> Generator[`namedtuple-IntegrationTestcase-test_name-jobs_yaml-expected_output-expect_success-config-runners_to_skip`, Any, None]: ...
def get_available_port() -> Any: ...
def iglob(pathname: AnyStr, *, recursive: bool = ...) -> Iterator[AnyStr]: ...
def namedtuple(typename: str, field_names: Union[str, Iterable[str]], *, verbose: bool = ..., rename: bool = ...) -> type: ...
def pytest_generate_tests(metafunc) -> None: ...
def test_integration(runner, tmpdir, integration_testcase) -> None: ...
