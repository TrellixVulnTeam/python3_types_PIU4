# (generated with --quick)

import enum
from typing import Any, Dict, Iterable, Mapping, Optional, Sequence, Type, Union

Enum: Type[enum.Enum]
StrUtils: Any
json: module
logger: Any

class OutputType(enum.Enum):
    BINARY: int
    JSON: int
    PLAIN_TEXT: int
    VERBOSE: int

def _get_table(functions_info) -> str: ...
def _parse_asynchronous_invocation_response(response, output_type, function_name) -> None: ...
def _parse_base64_response_values(value) -> None: ...
def _parse_error_invocation_response(response, function_name) -> None: ...
def _parse_lambda_function_info(function_info) -> Dict[str, Any]: ...
def _parse_payload(value) -> None: ...
def _parse_requestresponse_invocation_response(**kwargs) -> None: ...
def _print_generic_response(response, output_type, aws_output, text_message = ..., json_output = ..., verbose_output = ..., output_file = ...) -> None: ...
def parse_delete_api_response(response, api_id, output_type) -> None: ...
def parse_delete_function_response(response, function_name, output_type) -> None: ...
def parse_delete_log_response(response, log_group_name, output_type) -> None: ...
def parse_http_response(response, function_name, asynch, output_type, output_file) -> None: ...
def parse_invocation_response(**kwargs) -> None: ...
def parse_lambda_function_creation_response(response, function_name, access_key, output_type) -> None: ...
def parse_log_group_creation_response(response, log_group_name, output_type) -> None: ...
def parse_ls_response(lambda_functions, output_type) -> None: ...
def tabulate(tabular_data: Union[Iterable[Iterable], Mapping[str, Iterable]], headers: Union[str, Sequence[str]] = ..., tablefmt: Union[str, tabulate.TableFormat] = ..., floatfmt: Union[str, Iterable[str]] = ..., numalign: Optional[str] = ..., stralign: Optional[str] = ..., missingval: Union[str, Iterable[str]] = ..., showindex: Union[bool, Iterable] = ..., disable_numparse: Union[bool, Iterable[int]] = ..., colalign: Optional[Iterable[Optional[str]]] = ...) -> str: ...
