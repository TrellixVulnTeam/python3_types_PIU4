# (generated with --quick)

from typing import Any, Coroutine, Generator, Type

asyncio: Any
type_coro: Type[coroutine]

class Barrier:
    _args: Any
    _count: Any
    _down: Any
    _participants: Any
    def __await__(self) -> Generator[nothing, Any, None]: ...
    def __init__(self, participants, func = ..., args = ...) -> None: ...
    def __iter__(self) -> Generator[nothing, Any, None]: ...
    def _at_limit(self) -> Any: ...
    def _func(self) -> Any: ...
    def _reset(self, down) -> None: ...
    def _update(self) -> None: ...

class BoundedSemaphore(Semaphore):
    _count: Any
    _initial_value: Any

class Event:
    _data: Any
    _flag: bool
    def __await__(self) -> Generator[nothing, Any, Any]: ...
    def __init__(self) -> None: ...
    def __iter__(self) -> Generator[nothing, Any, Any]: ...
    def clear(self) -> None: ...
    def is_set(self) -> bool: ...
    def set(self, data = ...) -> None: ...
    def value(self) -> Any: ...

class Lock:
    _locked: bool
    def __aenter__(self) -> Coroutine[Any, Any, None]: ...
    def __aexit__(self, *args) -> Coroutine[Any, Any, None]: ...
    def __init__(self) -> None: ...
    def acquire(self) -> Coroutine[Any, Any, None]: ...
    def locked(self) -> bool: ...
    def release(self) -> None: ...

class Semaphore:
    _count: Any
    def __aenter__(self) -> Coroutine[Any, Any, None]: ...
    def __aexit__(self, *args) -> Coroutine[Any, Any, None]: ...
    def __init__(self, value = ...) -> None: ...
    def acquire(self) -> Coroutine[Any, Any, None]: ...
    def release(self) -> None: ...

def _g() -> Coroutine[Any, Any, None]: ...
def launch(func, tup_args) -> None: ...
