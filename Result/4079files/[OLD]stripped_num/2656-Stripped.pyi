# (generated with --quick)

from typing import Any, Generator, Optional, TypeVar

ErrorNodeImpl: Any
INVALID_INTERVAL: Any
ParseTree: Any
ParseTreeListener: Any
RuleContext: Any
TerminalNode: Any
TerminalNodeImpl: Any
Token: Any

_T0 = TypeVar('_T0')

class InterpreterRuleContext(ParserRuleContext):
    children: None
    exception: None
    ruleIndex: Any
    start: None
    stop: None
    def __init__(self, parent, invokingStateNumber, ruleIndex) -> None: ...

class ParserRuleContext(Any):
    children: Optional[list]
    exception: None
    invokingState: Any
    parentCtx: Any
    start: Any
    stop: Any
    def __init__(self, parent = ..., invokingStateNumber = ...) -> None: ...
    def addChild(self, child: _T0) -> _T0: ...
    def addErrorNode(self, badToken) -> Any: ...
    def addTokenNode(self, token) -> Any: ...
    def copyFrom(self, ctx) -> None: ...
    def enterRule(self, listener) -> None: ...
    def exitRule(self, listener) -> None: ...
    def getChild(self, i, ttype = ...) -> Any: ...
    def getChildCount(self) -> int: ...
    def getChildren(self, predicate = ...) -> Generator[Any, Any, None]: ...
    def getSourceInterval(self) -> Any: ...
    def getToken(self, ttype, i) -> Any: ...
    def getTokens(self, ttype) -> list: ...
    def getTypedRuleContext(self, ctxType, i) -> Any: ...
    def getTypedRuleContexts(self, ctxType) -> list: ...
    def removeLastChild(self) -> None: ...
