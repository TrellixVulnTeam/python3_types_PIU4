# (generated with --quick)

from typing import Any, Dict, List, NoReturn, TypeVar

CellExecutionError: Any
ExecutePreprocessor: Any
addnodes: Any
itertools: module
nbformat: Any
nodes: module
os: module
posixpath: module
roles: Any
writers: Any

_T0 = TypeVar('_T0')

class NBTranslator(Any):
    app: Any
    config: Any
    docpath: Any
    indent: int
    nb: Any
    paragraph_prefix: str
    section_level: int
    def __init__(self, document, app, docpath) -> None: ...
    def add_codecell(self, code) -> None: ...
    def depart_Text(self, node) -> None: ...
    def depart_download_reference(self, node) -> None: ...
    def depart_list_item(self, node) -> None: ...
    def depart_literal(self, node) -> None: ...
    def depart_note(self, node) -> None: ...
    def depart_paragraph(self, node) -> None: ...
    def depart_reference(self, node) -> None: ...
    def depart_section(self, node) -> None: ...
    def depart_title(self, node) -> None: ...
    def rstrip_markdown(self, chars = ...) -> None: ...
    def unknown_departure(self, node) -> None: ...
    def unknown_visit(self, node) -> None: ...
    def visit_Text(self, node) -> None: ...
    def visit_displaymath(self, node) -> NoReturn: ...
    def visit_doctest_block(self, node) -> NoReturn: ...
    def visit_download_reference(self, node) -> None: ...
    def visit_list_item(self, node) -> None: ...
    def visit_literal(self, node) -> None: ...
    def visit_literal_block(self, node) -> NoReturn: ...
    def visit_math(self, node) -> NoReturn: ...
    def visit_note(self, node) -> None: ...
    def visit_paragraph(self, node) -> None: ...
    def visit_reference(self, node) -> None: ...
    def visit_section(self, node) -> None: ...
    def visit_title(self, node) -> None: ...
    def write_code(self, code) -> None: ...
    def write_markdown(self, text) -> None: ...

class NBWriter(Any):
    __doc__: str
    app: Any
    docpath: Any
    output: Any
    def __init__(self, app, docpath) -> None: ...
    def translate(self) -> None: ...

class NotebookExportRole(Any):
    __doc__: str
    def process_link(self, env, refnode, has_explicit_title, title, target) -> Any: ...
    def result_nodes(self, document, env, node, is_ref) -> Any: ...

def _finilize_markdown_cells(nb: _T0) -> _T0: ...
def _make_empty_file(abspath) -> None: ...
def _split_doctest(code) -> List[str]: ...
def cleanup_notebooks(app, _) -> None: ...
def export_notebooks(app, document, docname) -> None: ...
def remove_notebooks_from_deps(app, _) -> None: ...
def setup(app) -> Dict[str, str]: ...
