from typing import Any
from werkzeug.routing import PathConverter

def app() -> None: ...
def sanic_server(loop: Any, app: Any, test_server: Any): ...
def client(loop: Any, app: Any, test_client: Any): ...
def websocket_client(loop: Any, app: Any, test_client: Any): ...
def mock_service() -> None: ...
def sentry_calls(): ...
def sentry_url(sentry_mock: Any): ...
def sentry_mock(mock_service: Any, sentry_calls: Any): ...
async def test_simple(app: Any, client: Any, sentry_url: Any, sentry_calls: Any): ...
async def test_exception(app: Any, client: Any, sentry_calls: Any, sentry_url: Any, params: Any) -> None: ...
async def test_warning(app: Any, client: Any, sentry_calls: Any, sentry_url: Any): ...
async def test_warning_not_sent(app: Any, client: Any, sentry_calls: Any, sentry_url: Any): ...
async def test_error_handler(app: Any, client: Any, sentry_calls: Any, sentry_url: Any): ...
async def test_exception_in_error_handler(app: Any, client: Any, sentry_calls: Any, sentry_url: Any) -> None: ...
async def test_websocket(app: Any, websocket_client: Any, sentry_calls: Any, sentry_url: Any) -> None: ...
async def test_websocket_exception(app: Any, websocket_client: Any, sentry_calls: Any, sentry_url: Any) -> None: ...

class EverythingConverter(PathConverter):
    regex: str = ...

class Service:
    host: Any = ...
    port: Any = ...
    app: Any = ...
    srv: Any = ...
    server_thread: Any = ...
    def __init__(self, host: Any, port: Any) -> None: ...
    def run(self) -> None: ...
    @property
    def url(self): ...
    def __repr__(self): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
