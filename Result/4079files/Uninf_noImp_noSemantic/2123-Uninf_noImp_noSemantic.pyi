from django.db import models
from typing import Any

class TradingStrategyProfile(models.Model):
    name: Any = ...
    note: Any = ...
    account: Any = ...
    created: Any = ...
    updated: Any = ...

class FixedStrategyProfile(TradingStrategyProfile):
    buy: Any = ...
    sell: Any = ...
    class Meta:
        db_table: str = ...
    def __str__(self): ...

class RelativeStrategyProfile(TradingStrategyProfile):
    buy: Any = ...
    sell: Any = ...
    class Meta:
        db_table: str = ...
    def __str__(self): ...
    def save(self, *args: Any, **kwargs: Any): ...

class SimpleMovingAverage(models.Model):
    period: Any = ...
    class Meta:
        db_table: str = ...
    def __str__(self): ...

class ExponentialMovingAverage(models.Model):
    period: Any = ...
    class Meta:
        db_table: str = ...
    def __str__(self): ...

class IndicatorParameter(models.Model):
    name: Any = ...
    parameter: Any = ...

class Strategy(TradingStrategyProfile):
    indicator: Any = ...
    class Meta:
        db_table: str = ...
    def __str__(self): ...

class Ticker(models.Model):
    symbol: Any = ...
    ticker_id: Any = ...
    last: Any = ...
    lowest_ask: Any = ...
    highest_bid: Any = ...
    percent_change: Any = ...
    base_volume: Any = ...
    quote_volume: Any = ...
    is_frozen: Any = ...
    high_24_hour: Any = ...
    low_24_hour: Any = ...
    class Meta:
        ordering: Any = ...
        get_latest_by: str = ...
        db_table: str = ...
    def __str__(self): ...

class Balance(models.Model):
    created: Any = ...
    account: Any = ...
    available: Any = ...
    on_orders: Any = ...
    btc_value: Any = ...
    class Meta:
        get_latest_by: str = ...
        ordering: Any = ...
        db_table: str = ...

class Order(models.Model):
    type: Any = ...
    order_number: Any = ...
    amount: Any = ...
    price: Any = ...
    date: Any = ...
    created: Any = ...
    updated: Any = ...
    user_account: Any = ...
    ticker: Any = ...
    status: Any = ...
    class Meta:
        ordering: Any = ...
        get_latest_by: str = ...
        db_table: str = ...
    def __str__(self): ...

def save_user_account_data(sender: Any, request: Any, user: Any, **kwargs: Any) -> None: ...
