import collections
from typing import Any

def _is_descriptor(obj: Any): ...

class EnumMeta(type):
    @classmethod
    def __prepare__(metacls: Any, cls: Any, bases: Any): ...
    def __new__(metacls: Any, cls: Any, bases: Any, classdict: collections.OrderedDict) -> Any: ...
    def __call__(cls: Any, value: Any) -> Enum: ...
    def __getitem__(cls: Any, name: str) -> Enum: ...
    def __iter__(cls) -> Any: ...
    def __reversed__(cls): ...
    def __len__(cls): ...

class Enum(metaclass=EnumMeta):
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __hash__(self) -> Any: ...
    def __format__(self, format_spec: Any): ...
    def __reduce_ex__(self, proto: Any): ...
