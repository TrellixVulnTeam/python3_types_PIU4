from typing import Any, Optional, Tuple

class Polygon:
    @staticmethod
    def approximatedCircle(radius: Any): ...
    _points: Any = ...
    def __init__(self, points: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __repr__(self): ...
    def isValid(self) -> bool: ...
    def getPoints(self): ...
    def project(self, normal: Any) -> Tuple[float, float]: ...
    def translate(self, x: Any=..., y: Any=...) -> Polygon: ...
    def mirror(self, point_on_axis: Any, axis_direction: Any) -> Polygon: ...
    def intersectionConvexHulls(self, other: Polygon) -> Polygon: ...
    def unionConvexHulls(self, other: Polygon) -> Polygon: ...
    def intersectsPolygon(self, other: Polygon) -> Optional[Tuple[float, float]]: ...
    def getConvexHull(self) -> Polygon: ...
    def getMinkowskiSum(self, other: Polygon) -> Polygon: ...
    def getMinkowskiHull(self, other: Polygon) -> Polygon: ...
    def isInside(self, point: Any) -> bool: ...
    def _isRightTurn(self, p: Any, q: Any, r: Any): ...

__all__: Any
