from asphalt.serialization.api import CustomizableSerializer
from asphalt.serialization.object_codec import DefaultCustomTypeCodec
from msgpack import ExtType as ExtType, packb as packb, unpackb as unpackb
from typing import Any, Dict, Optional, Tuple, Union

class MsgpackTypeCodec(DefaultCustomTypeCodec):
    type_code: Any = ...
    wrap_callback: Any = ...
    unwrap_callback: Any = ...
    def __init__(self, type_code: Optional[int]=..., **kwargs: Any) -> None: ...
    serializer: Any = ...
    def register_object_decoder_hook(self, serializer: MsgpackSerializer) -> None: ...
    def register_object_encoder_hook(self, serializer: MsgpackSerializer) -> None: ...
    def ext_hook(self, code: int, data: bytes) -> Any: ...
    def wrap_state_ext_type(self, typename: str, state: Any) -> Any: ...
    def unwrap_state_ext_type(self, wrapped_state: bytes) -> Union[Tuple[str, Any], Tuple[None, None]]: ...

class MsgpackSerializer(CustomizableSerializer):
    __slots__: Any = ...
    packer_options: Any = ...
    unpacker_options: Any = ...
    def __init__(self, packer_options: Dict[str, Any]=..., unpacker_options: Dict[str, Any]=..., custom_type_codec: Union[MsgpackTypeCodec, str]=...) -> None: ...
    def serialize(self, obj: Any) -> bytes: ...
    def deserialize(self, payload: bytes) -> Any: ...
    @property
    def mimetype(self): ...
