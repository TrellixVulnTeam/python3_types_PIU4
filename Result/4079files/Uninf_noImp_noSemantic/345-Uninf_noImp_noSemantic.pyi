import unittest
from typing import Any

class TestTest(unittest.TestCase):
    class_test: Any = ...
    method_test: Any = ...
    def setUp(self) -> None: ...
    def test_no_method_normalization(self) -> None: ...
    def test_enclosing(self) -> None: ...
    def test_render_test_spec(self) -> None: ...

class TestTestRegistry(unittest.TestCase):
    def test_empty(self) -> None: ...
    def test_get_owning_target(self) -> None: ...
    def _get_sample_test_registry(self): ...
    def test_match_test_specs_fqcn(self) -> None: ...
    def test_match_test_specs_fqcn_with_methodname(self) -> None: ...
    def test_match_test_specs_non_fqcn(self) -> None: ...
    def test_match_test_specs_non_fqcn_no_match(self) -> None: ...
    def _assert_index(self, expected: Any, actual: Any): ...
    def test_index_nominal(self): ...
    def test_index_empty(self) -> None: ...
    def test_index_no_indexers(self) -> None: ...

class TestParseFailedTargets(unittest.TestCase):
    @staticmethod
    def _raise_handler(e: Any) -> None: ...
    class CollectHandler:
        _errors: Any = ...
        def __init__(self) -> None: ...
        def __call__(self, e: Any) -> None: ...
        @property
        def errors(self): ...
    def test_parse_failed_targets_no_files(self) -> None: ...
    def test_parse_failed_targets_nominal(self) -> None: ...
    def test_parse_failed_targets_error_raise(self) -> None: ...
    def test_parse_failed_targets_error_continue(self) -> None: ...
