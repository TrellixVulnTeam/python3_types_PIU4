from typing import Any, List

class ParserError(Exception):
    lineno: Any = ...
    msg: Any = ...
    def __init__(self, lineno: Any, msg: Any) -> None: ...

class Parser:
    lex: Any = ...
    path: Any = ...
    prev_tok: Any = ...
    this_tok: Any = ...
    loop_depth: int = ...
    fun_depth: int = ...
    def __init__(self) -> None: ...
    def parse(self, text: Any): ...
    def program(self): ...
    def declaration(self): ...
    def var_decl(self): ...
    def fun_decl(self): ...
    def statement(self): ...
    def block(self): ...
    def if_cond(self): ...
    def while_cond(self): ...
    def for_cond(self): ...
    def break_stm(self): ...
    def return_stm(self): ...
    def print_stm(self): ...
    def exp_stm(self): ...
    def expression(self): ...
    def assignment(self): ...
    def concat(self): ...
    def logic_or(self): ...
    def logic_and(self): ...
    def equality(self): ...
    def ordering(self): ...
    def addition(self): ...
    def multiplication(self): ...
    def unary(self): ...
    def call(self): ...
    def primary(self): ...
    def tok_next(self): ...
    def tok_matches(self, kind: Any): ...
    def tok_consume(self, kind: Any, message: Any) -> None: ...
    def tok_is(self, kind_arr: List) -> bool: ...
    def tok_was(self, kind: Any): ...
