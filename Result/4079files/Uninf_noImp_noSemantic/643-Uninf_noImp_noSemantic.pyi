from collections import namedtuple
from core import fragments as fragments
from core.assets import get_assets as get_assets
from core.views import app_config as app_config
from django import template
from typing import Any, Optional

Link = namedtuple('Link', 'text url')
register: Any

def field(form_field: Any, **kwargs: Any): ...
def field_checkbox(form_field: Any, **kwargs: Any): ...
def get(d: Any, *args: Any): ...
def random_item(_list: Any): ...
def filename(value: Any, include_ext: bool = ...): ...
def endswith(value: str, search: Any) -> Any: ...
def startswith(value: str, search: Any) -> Any: ...
def nolinebreaks(value: Any): ...
def link_to(text: Any, url: Any): ...
def html2text(html: Any, preset: str = ...): ...
def get_parameters(context: Any, **kwargs: Any): ...
def include_assets(stage: Any): ...
def link(context: Any, model: Any, title: Optional[Any] = ...): ...
def time(time: Any, all_day: bool = ..., suffix: str = ...): ...
def pagination(context: Any, label: Any): ...
def breadcrumb(context: Any, *args: Any): ...
def menu(context: Any, active: Optional[Any] = ..., entity: Optional[Any] = ...): ...
def ref(entity: Any): ...
def full_url(path: Any): ...
def render_app_config(): ...
def include_fragments(context: Any, fragment_group: Any): ...
def bleach(text: Any, disable_tags: Any = ..., except_for: Any = ...): ...
def markdown(text: Any, heading_baselevel: int = ..., filter_tags: bool = ..., truncate: bool = ..., disable_tags: str = ..., plain_preview: bool = ..., preset: Optional[Any] = ..., plain: bool = ...): ...
def dropdown(parser: Any, token: Any): ...

class DropdownNode(template.Node):
    name: Any = ...
    label: Any = ...
    nodelist: Any = ...
    def __init__(self, name: Any, label: Any, nodelist: Any) -> None: ...
    def render(self, context: Any): ...

def connect(val1: Any, val2: Any): ...
def cuttrailing(s1: Any, s2: Any): ...
def limit(indexable: Any, count: Any): ...
def override(override: Any, overridden: Any): ...
def url_for_user(model: Any, user: Any): ...
def include_features(context: Any, template_name: Any): ...
def parse_token_args(args: Any, filterval: Any = ...): ...
def _setup_macros_dict(parser: Any) -> None: ...

class DefineMacroNode(template.Node):
    name: Any = ...
    nodelist: Any = ...
    def __init__(self, name: Any, nodelist: Any, args: Any) -> None: ...
    def render(self, context: Any): ...

def do_macro(parser: Any, token: Any): ...

class LoadMacrosNode(template.Node):
    def render(self, context: Any): ...

def do_loadmacros(parser: Any, token: Any): ...

class UseMacroNode(template.Node):
    macro: Any = ...
    fe_args: Any = ...
    fe_kwargs: Any = ...
    def __init__(self, macro: Any, fe_args: Any, fe_kwargs: Any) -> None: ...
    def render(self, context: Any): ...

def do_usemacro(parser: Any, token: Any): ...
