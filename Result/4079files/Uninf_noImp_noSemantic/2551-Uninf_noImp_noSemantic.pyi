import socket
from nassl.ssl_client import BaseSslClient, OpenSslFileTypeEnum, OpenSslVerifyEnum, OpenSslVersionEnum
from typing import Any, List, Optional

class LegacySslClient(BaseSslClient):
    _NASSL_MODULE: Any = ...
    do_handshake: Any = ...
    def __init__(self, underlying_socket: Optional[socket.socket]=..., ssl_version: OpenSslVersionEnum=..., ssl_verify: OpenSslVerifyEnum=..., ssl_verify_locations: Optional[str]=..., client_certchain_file: Optional[str]=..., client_key_file: Optional[str]=..., client_key_type: OpenSslFileTypeEnum=..., client_key_password: str=..., ignore_client_authentication_requests: bool=...) -> None: ...
    def get_secure_renegotiation_support(self) -> bool: ...
    def get_current_compression_method(self) -> Optional[str]: ...
    @staticmethod
    def get_available_compression_methods() -> List[str]: ...
    def do_renegotiate(self) -> None: ...
    _SSL_MODE_SEND_FALLBACK_SCSV: int = ...
    def enable_fallback_scsv(self) -> None: ...
    _is_handshake_completed: bool = ...
    def do_ssl2_iis_handshake(self) -> None: ...
