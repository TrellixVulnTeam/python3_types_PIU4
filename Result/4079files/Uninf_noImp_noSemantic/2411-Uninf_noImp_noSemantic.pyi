from aiocache.serializers import BaseSerializer
from marshmallow import Schema
from typing import Any, Optional

class RandomModel:
    MY_CONSTANT: str = ...
    int_type: Any = ...
    str_type: Any = ...
    dict_type: Any = ...
    list_type: Any = ...
    def __init__(self, int_type: Optional[Any] = ..., str_type: Optional[Any] = ..., dict_type: Optional[Any] = ..., list_type: Optional[Any] = ...) -> None: ...
    def __eq__(self, obj: Any) -> Any: ...

class MarshmallowSerializer(Schema, BaseSerializer):
    int_type: Any = ...
    str_type: Any = ...
    dict_type: Any = ...
    list_type: Any = ...
    encoding: str = ...
    def dumps(self, *args: Any, **kwargs: Any): ...
    def loads(self, *args: Any, **kwargs: Any): ...
    def build_my_type(self, data: Any): ...
    class Meta:
        strict: bool = ...

cache: Any

async def serializer() -> None: ...
def test_serializer() -> None: ...
