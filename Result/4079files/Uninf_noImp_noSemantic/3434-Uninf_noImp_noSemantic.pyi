from syscalls import *
from enum import Enum
from typing import Any, Optional

def try_unmount_all(l: Any): ...
def require_root(fn: Any): ...
def translate(idx: Any, mappings: Any): ...
def child(pipe1: Any, pipe2: Any, cmd: Any, root_path: Any, flags: Any, pid: Any, user: Any, uid_map: Any, gid_map: Any, hostname: Any, env: Any) -> None: ...
def exec_in_new_process(fn: Any): ...
def add_to_cgroups(pid: Any, specs: Any): ...
def copy(fd1: Any, fd2: Any) -> None: ...
def link(parent_fd: Any, child_fd: Any) -> None: ...
def bindfs_mount(root_path: Any, spec: Any, uid: Any, gid: Any): ...
def bind_mount(root_path: Any, spec: Any): ...
def mount(fstype: Any, source: Any, target: Any, flags: int = ..., mount_options: Any = ...): ...

class ContainerStatus(Enum):
    STOPPED: int = ...
    RUNNING: int = ...
    ERROR: int = ...

class Container:
    flags: int = ...
    pid_namespace: Any = ...
    user_namespace: Any = ...
    hostname: Any = ...
    env: Any = ...
    mountpoints: Any = ...
    status: Any = ...
    cgroup_specs: Any = ...
    t_uid: int = ...
    t_gid: int = ...
    child_pid: int = ...
    cgroup_paths: Any = ...
    custom_mounts: Any = ...
    def __init__(self, cmd: Any, root_path: Any, cgroup: bool = ..., ipc: bool = ..., mount: bool = ..., pid: bool = ..., net: bool = ..., uts: bool = ..., user: bool = ..., uid_map: Optional[Any] = ..., gid_map: Optional[Any] = ..., hostname: str = ..., env: Any = ..., cgroup_specs: Any = ..., custom_mounts: Any = ...) -> None: ...
    def apply_cgroups(self): ...
    def start(self) -> None: ...
    def do_mount(self, processor: Optional[Any] = ...) -> None: ...
    def do_umount(self) -> None: ...
    def cleanup(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
