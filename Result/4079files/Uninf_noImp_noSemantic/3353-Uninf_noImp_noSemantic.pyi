from sklearn import ensemble
from typing import Any, Optional

__author__: str

def is_transformer(cls): ...
def is_predictor(cls): ...
def make_transformer(cls): ...
def make_predictor(cls): ...

class KMeansSplitter:
    kmeans: Any = ...
    sorted_outputs: Any = ...
    weight_idx: Any = ...
    def __init__(self, k: Any) -> None: ...
    def fit(self, x: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    def transform(self, x: Any): ...

class ConstantModel:
    cls: Any = ...
    def __init__(self, cls: Any) -> None: ...
    def fit(self, x: Any, y: Any): ...
    def predict(self, x: Any): ...

class Aggregator:
    def aggregate(self, x: Any, y: Any) -> None: ...

class Voter(Aggregator):
    def fit(self, x: Any, y: Any): ...
    def union_aggregate(self, x: Any, y: Any): ...
    def aggregate(self, x: Any, y: Any): ...

class Workflow:
    dag: Any = ...
    sample_weight: Any = ...
    classes_: Any = ...
    def __init__(self, dag: Optional[Any] = ...) -> None: ...
    models: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    def predict(self, X: Any): ...
    def transform(self, X: Any): ...
    def get_params(self, deep: bool = ...): ...
    def set_params(self, **params: Any) -> None: ...

class Stacker(Aggregator):
    sub_dags: Any = ...
    initial_dag: Any = ...
    def __init__(self, sub_dags: Optional[Any] = ..., initial_dag: Optional[Any] = ...) -> None: ...
    train: Any = ...
    def fit(self, X: Any, y: Any, sample_weight: Optional[Any] = ...): ...
    def aggregate(self, X: Any, y: Any): ...

class Booster(ensemble.AdaBoostClassifier):
    sub_dags: Any = ...
    current_sub_dag: int = ...
    def __init__(self, sub_dags: Any = ...) -> None: ...
    def _make_estimator(self, append: bool = ..., random_state: int = ...): ...
