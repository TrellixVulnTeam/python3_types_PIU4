import abc
from .streams import KinesisRecord
from datetime import datetime as datetime
from typing import Any, List, Optional, Tuple

class Bucket(abc.ABC):
    @abc.abstractmethod
    def flush(self) -> None: ...
    @abc.abstractmethod
    def get(self, force: bool=...) -> Tuple[List[Any], Optional[str], Optional[datetime]]: ...
    @abc.abstractmethod
    def add(self, record: KinesisRecord) -> None: ...

class InMemoryBucket(Bucket):
    __data: Any = ...
    __count: int = ...
    __size_limit: Any = ...
    __count_limit: Any = ...
    def __init__(self, size_limit: int, count_limit: int) -> None: ...
    def flush(self) -> None: ...
    def get(self, force: bool=...) -> Tuple[List[Any], Optional[str], Optional[datetime]]: ...
    def add(self, record: KinesisRecord) -> None: ...
    def __get(self): ...
