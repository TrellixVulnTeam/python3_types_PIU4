from typing import Any, Optional

class PluginManager:
    _classes_to_register: Any = ...
    _registered_classes: Any = ...
    _property_groups_to_register: Any = ...
    _registered_properties: Any = ...
    _file_plugins: Any = ...
    _bools_to_register: Any = ...
    _registered_bools: Any = ...
    PluginTypes: Any = ...
    _bl_icons_dict: Any = ...
    _icons_to_register: Any = ...
    _property_fields: Any = ...
    @staticmethod
    def register_property_group(base: Optional[Any] = ...): ...
    @staticmethod
    def register_class(*args: Any): ...
    @classmethod
    def register_property_groups(cls, property_group: Any, btype: Any) -> None: ...
    @classmethod
    def register_plugin(cls, label: Any, operators: Any, draw_function: Optional[Any] = ..., type_: Any = ...) -> None: ...
    @classmethod
    def get_property(cls, property: Any): ...
    @classmethod
    def getFilePlugins(cls, type_: Any = ...): ...
    @classmethod
    def register_collapsible(cls, property_name: Any) -> None: ...
    @classmethod
    def load_icon(cls: Any, id: str, filename: str) -> Any: ...
    @classmethod
    def get_icon(cls: Any, id: str) -> Any: ...
    @classmethod
    def clear(cls) -> None: ...
    @classmethod
    def get_property(cls, obj: Any, prop: Any) -> None: ...
    @classmethod
    def register(cls) -> None: ...
    @classmethod
    def unregister(cls) -> None: ...
