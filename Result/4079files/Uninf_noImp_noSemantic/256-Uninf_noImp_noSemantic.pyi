from madam.core import Asset, MetadataProcessor, Processor
from typing import Any, Callable, IO, Iterable, Mapping, Tuple
from xml.etree import ElementTree as ET

_INCH_TO_MM: Any
_PX_PER_INCH: int
_PT_PER_INCH: Any
_FONT_SIZE_PT: int
_X_HEIGHT: float

def svg_length_to_px(length: str) -> float: ...

XML_NS: Any

def _register_xml_namespaces() -> None: ...
def _parse_svg(file: IO) -> Tuple[ET.ElementTree, ET.Element]: ...
def _write_svg(tree: ET.ElementTree) -> IO: ...

class SVGProcessor(Processor):
    def __init__(self) -> None: ...
    def can_read(self, file: IO) -> bool: ...
    def read(self, file: IO) -> Asset: ...
    @staticmethod
    def __remove_xml_whitespace(elem: ET.Element) -> None: ...
    @staticmethod
    def __remove_elements(root: ET.Element, qname: str, keep_func: Callable[[ET.Element], bool]) -> None: ...
    def shrink(self, asset: Asset) -> Asset: ...

class SVGMetadataProcessor(MetadataProcessor):
    def __init__(self) -> None: ...
    @property
    def formats(self) -> Iterable[str]: ...
    def read(self, file: IO) -> Mapping[str, Mapping]: ...
    def strip(self, file: IO) -> IO: ...
    def combine(self, file: IO, metadata: Mapping[str, Mapping]) -> IO: ...
