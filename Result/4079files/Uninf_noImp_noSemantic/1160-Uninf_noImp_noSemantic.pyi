import wb_main_window
import wb_table_view
import wb_tracked_qwidget
from PyQt5 import QtCore
from typing import Any

def U_(s: str) -> str: ...

class WbAnnotateView(wb_main_window.WbMainWindow, wb_tracked_qwidget.WbTrackedModeless):
    app: Any = ...
    debugLog: Any = ...
    current_commit_selections: Any = ...
    current_file_selection: Any = ...
    current_annotations: Any = ...
    ui_component: Any = ...
    annotate_model: Any = ...
    annotate_table: Any = ...
    commit_message: Any = ...
    v_message_layout: Any = ...
    v_message_widget: Any = ...
    v_split: Any = ...
    def __init__(self, app: Any, ui_component: Any, title: Any) -> None: ...
    def completeInit(self) -> None: ...
    def setupMenuBar(self, mb: Any) -> None: ...
    def __setupTableContextMenu(self) -> None: ...
    def setupToolBar(self) -> None: ...
    def isScmTypeActive(self, scm_type: Any): ...
    def showAnnotationForFile(self, all_annotation_nodes: Any, all_commit_log_nodes: Any) -> None: ...
    def selectionChangedAnnotation(self) -> None: ...

class WbAnnotateTableView(wb_table_view.WbTableView):
    main_window: Any = ...
    debugLog: Any = ...
    def __init__(self, main_window: Any) -> None: ...
    def selectionChanged(self, selected: Any, deselected: Any) -> None: ...

class WbAnnotateModel(QtCore.QAbstractTableModel):
    col_revision: int = ...
    col_author: int = ...
    col_date: int = ...
    col_line_num: int = ...
    col_line_text: int = ...
    column_titles: Any = ...
    app: Any = ...
    debugLog: Any = ...
    all_annotation_nodes: Any = ...
    all_commit_log_nodes: Any = ...
    fixed_font: Any = ...
    def __init__(self, app: Any) -> None: ...
    def loadAnnotationForFile(self, all_annotation_nodes: Any, all_commit_log_nodes: Any) -> None: ...
    def rowCount(self, parent: Any): ...
    def columnCount(self, parent: Any): ...
    def headerData(self, section: Any, orientation: Any, role: Any): ...
    def annotationNode(self, row: Any): ...
    def annotationLogNode(self, rev_num: Any): ...
    def data(self, index: Any, role: Any): ...
