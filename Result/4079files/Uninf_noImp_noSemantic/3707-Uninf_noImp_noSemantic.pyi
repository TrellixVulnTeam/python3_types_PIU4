from abc import ABC, abstractmethod
from typing import Any, List, Tuple

class ModelResource(ABC):
    model: Any = ...
    schema: Any = ...
    filters: Any = ...
    max_limit: int = ...
    default_limit: int = ...
    exclude_related_resource: Tuple[str] = ...
    order_by: List[str] = ...
    only: Tuple[str] = ...
    exclude: Tuple[str] = ...
    include: Tuple[str] = ...
    optional: Tuple[str] = ...
    page: int = ...
    auth_required: bool = ...
    export: bool = ...
    max_export_limit: int = ...
    roles_accepted: Tuple[str] = ...
    roles_required: Tuple[str] = ...
    obj_only: Any = ...
    obj_exclude: Any = ...
    obj_optional: Any = ...
    limit: Any = ...
    def __init__(self) -> None: ...
    def apply_filters(self, queryset: Any, **kwargs: Any): ...
    def apply_ordering(self, queryset: Any, order_by: Any): ...
    def patch_resource(self, obj: Any): ...
    def update_resource(self): ...
    def save_resource(self): ...
    @abstractmethod
    def has_read_permission(self, qs: Any) -> None: ...
    @abstractmethod
    def has_change_permission(self, obj: Any) -> bool: ...
    @abstractmethod
    def has_delete_permission(self, obj: Any) -> bool: ...
    @abstractmethod
    def has_add_permission(self, obj: Any) -> bool: ...

class AssociationModelResource(ABC):
    model: Any = ...
    schema: Any = ...
    filters: Any = ...
    max_limit: int = ...
    default_limit: int = ...
    exclude_related_resource: Tuple[str] = ...
    order_by: List[str] = ...
    only: Tuple[str] = ...
    exclude: Tuple[str] = ...
    include: Tuple[str] = ...
    optional: Tuple[str] = ...
    page: int = ...
    auth_required: bool = ...
    roles_accepted: Tuple[str] = ...
    roles_required: Tuple[str] = ...
    obj_only: Any = ...
    obj_exclude: Any = ...
    obj_optional: Any = ...
    limit: Any = ...
    def __init__(self) -> None: ...
    def apply_filters(self, queryset: Any, **kwargs: Any): ...
    def apply_ordering(self, queryset: Any, order_by: Any): ...
    def add_relation(self, data: Any) -> None: ...
    def update_relation(self, data: Any) -> None: ...
    def remove_relation(self, data: Any) -> None: ...
    @abstractmethod
    def has_read_permission(self, qs: Any): ...
    @abstractmethod
    def has_change_permission(self, obj: Any, data: Any) -> bool: ...
    @abstractmethod
    def has_delete_permission(self, obj: Any, data: Any) -> bool: ...
    @abstractmethod
    def has_add_permission(self, obj: Any, data: Any) -> bool: ...
