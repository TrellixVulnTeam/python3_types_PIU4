from psycopg2 import extensions as extensions
from sqlalchemy import engine
from sqlalchemy.orm import session as sqla_session
from typing import Any

class AutocommitDatabase:
    engine: Any = ...
    session_factory: Any = ...
    _transaction_connections: Any = ...
    def __init__(self) -> None: ...
    def configure(self, database_url: Any, **kwargs: Any) -> None: ...
    def configure_engine(self, database_url: Any, **kwargs: Any) -> None: ...
    def create_connection_with_bound_session(self): ...
    def _handle_after_transaction_begin(self, session: Any, transaction: Any, connection: Any) -> None: ...
    def _should_disable_autocommit(self, transaction: Any, connection: engine.Connection) -> Any: ...
    def disable_autocommit(self, transaction: Any, connection: engine.Connection) -> Any: ...
    def _handle_after_transaction_end(self, session: Any, transaction: Any) -> None: ...
    def _should_reenable_autocommit(self, transaction: Any): ...
    def reenable_autocommit(self, transaction: Any) -> None: ...
    def _get_dbapi_connection(self, connection: engine.Connection) -> extensions.connection: ...

class Session(sqla_session.Session):
    fake_root_transaction: Any = ...
    def __init__(self, *args: Any, fake_root_transaction: bool = ..., **kwargs: Any) -> None: ...
    def commit(self) -> None: ...
    def begin(self, *args: Any, nested: bool = ..., **kwargs: Any): ...
    def _should_fake_transaction(self): ...
    transaction: Any = ...
    def _create_faked_root_transaction(self) -> None: ...
    def revert_faked_transaction_if_needed(self) -> None: ...
    @property
    def _has_only_root_transaction(self): ...
    @property
    def _in_transaction(self): ...
