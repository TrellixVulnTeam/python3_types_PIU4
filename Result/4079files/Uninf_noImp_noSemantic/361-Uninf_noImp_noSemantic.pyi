import typing
from typing import Any

IDENT: int
NEG: int
CONJ: int

class Eldag:
    edges: Any = ...
    ia: Any = ...
    symms: Any = ...
    colours: Any = ...
    def __init__(self) -> None: ...
    def add_node(self, edges: typing.Iterable[int], symm: Any, colour: Any) -> int: ...
    @property
    def int_colour(self): ...
    def canon(self): ...

_SUM: int
_EXPR: int
_FACTOR: int

def canon_factors(sums: Any, factors: Any, symms: Any): ...
def _build_eldag(sums: Any, factors: Any, symms: Any): ...

class _Placeholders(dict):
    def __missing__(self, key: Any): ...

_placeholders: Any

def _proc_indices(indices: Any, dumms: Any, eldag: Any): ...
def _find_perm(orig: Any, dest: Any): ...
