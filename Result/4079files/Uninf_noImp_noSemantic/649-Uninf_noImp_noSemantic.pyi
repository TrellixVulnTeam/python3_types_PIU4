from time import sleep as sleep
from typing import Any

class RequestTypes:
    PRODUCE: int = ...
    FETCH: int = ...
    MULTIFETCH: int = ...
    MULTIPRODUCE: int = ...
    OFFSETS: int = ...

PRODUCE_TYPE: Any
FETCH_TYPE: Any
MULTIFETCH_TYPE: Any
MULTIPRODUCE_TYPE: Any
OFFSETS_TYPE: Any

def encode_message(message: Any): ...
def encode_produce_request(topic: Any, partition: Any, messages: Any): ...

class Producer:
    connection: Any = ...
    def __init__(self, host: str = ..., port: int = ...) -> None: ...
    def close(self) -> None: ...
    def send(self, topic: Any, messages: Any, partition: int = ...) -> None: ...

class OffsetRequest:
    topic: Any = ...
    partition: Any = ...
    time: Any = ...
    maxnumoffsets: Any = ...
    def __init__(self, topic: Any, partition: int = ..., time: int = ..., maxnumoffsets: int = ...) -> None: ...
    def tobytes(self): ...

class FetchRequest:
    topic: Any = ...
    partition: Any = ...
    offset: Any = ...
    maxsize: Any = ...
    def __init__(self, topic: Any, partition: int = ..., offset: int = ..., maxsize: Any = ...) -> None: ...
    def tobytes(self): ...

class Consumer:
    connection: Any = ...
    def __init__(self, host: str = ..., port: int = ...) -> None: ...
    def close(self) -> None: ...
    def getoffsetsbefore(self, topic: Any, partition: int = ..., time: int = ..., maxnumoffsets: int = ...): ...
    def fetch(self, topic: Any, partition: Any, offset: Any, maxsize: Any = ...): ...
