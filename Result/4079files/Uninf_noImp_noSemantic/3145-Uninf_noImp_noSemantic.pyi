from .abs_base import AbsCommand
from typing import Any

class NewCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class PdkCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class FileSourceCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class SeleniumCommand(AbsCommand):
    name: str = ...
    def execute(self, arg: Any, *args: Any) -> None: ...

class SessionCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class DeleteCommand(AbsCommand):
    name: str = ...
    def execute(self, arg: Any, *args: Any) -> None: ...
    @staticmethod
    def get_ids(): ...
    @staticmethod
    def create_msg(arg: Any): ...
    @staticmethod
    def delete_from_db(ids: Any) -> None: ...
    @staticmethod
    def delete_from_wykop(ids: Any) -> None: ...

class HtmlCommand(AbsCommand):
    name: str = ...
    def execute(self, arg: Any, *args: Any) -> None: ...

class SaveCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class CommentsCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class NsfwCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class SkipCommand(AbsCommand):
    name: str = ...
    def execute(self, arg: Any, *args: Any) -> None: ...

class ScrapeCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class IdsCommand(AbsCommand):
    name: str = ...
    def execute(self, *args: Any) -> None: ...

class UpdateCommand(AbsCommand):
    name: str = ...
    msg_err: str = ...
    master_zip_url: Any = ...
    selenium_drivers_path: Any = ...
    save_file: Any = ...
    base_dir: Any = ...
    def __init__(self) -> None: ...
    def execute(self, arg: Any, *args: Any) -> None: ...
    def choose(self): ...
    def save_and_unpack(self) -> None: ...
    def delete_selenium_driver_files(self) -> None: ...
