from collections import namedtuple
from enum import Enum
from typing import Any

api_url: str
api_key: str
requests_sent: int
ripple_url: str
ripple_pattern: Any
mode_names: Any

def set_api_key(s: str) -> Any: ...

class GameMode(Enum):
    Standard: int = ...
    Taiko: int = ...
    Catch: int = ...
    Mania: int = ...
    @classmethod
    def get_mode(cls: Any, mode: str) -> Any: ...

class Mods(Enum):
    NF: int = ...
    EZ: int = ...
    TD: int = ...
    HD: int = ...
    HR: int = ...
    SD: int = ...
    DT: int = ...
    RX: int = ...
    HT: int = ...
    NC: int = ...
    FL: int = ...
    AU: int = ...
    SO: int = ...
    AP: int = ...
    PF: int = ...
    Key4: int = ...
    Key5: int = ...
    Key6: int = ...
    Key7: int = ...
    Key8: int = ...
    FI: int = ...
    RD: int = ...
    Cinema: int = ...
    Key9: int = ...
    KeyCoop: int = ...
    Key1: int = ...
    Key3: int = ...
    Key2: int = ...
    ScoreV2: int = ...
    LastMod: int = ...
    KeyMod: Any = ...
    FreeModAllowed: Any = ...
    ScoreIncreaseMods: Any = ...
    def __new__(cls, num: Any): ...
    @classmethod
    def list_mods(cls: Any, bitwise: int) -> Any: ...
    @classmethod
    def format_mods(cls, mods: Any): ...

def def_section(api_name: str, first_element: bool=...) -> Any: ...

get_beatmaps: Any
get_user: Any
get_scores: Any
get_user_best: Any
get_user_recent: Any
get_match: Any
get_replay: Any
beatmap_url_pattern_v1: Any
beatmap_url_pattern_v2: Any

BeatmapURLInfo = namedtuple('BeatmapURLInfo', 'beatmapset_id beatmap_id gamemode')

def parse_beatmap_url(url: str) -> Any: ...
async def beatmap_from_url(url: str, mode: GameMode=..., *, return_type: str=...) -> Any: ...
async def beatmapset_from_url(url: str) -> Any: ...
def lookup_beatmap(beatmaps: list, **lookup: Any) -> Any: ...
def rank_from_events(events: dict, beatmap_id: str) -> Any: ...
