from gi.repository import Ide
from typing import Any

DEV_MODE: Any

class GoService(Ide.Object):
    _client: Any = ...
    _has_started: bool = ...
    _supervisor: Any = ...
    @classmethod
    def from_context(klass: Any, context: Any): ...
    def client(self): ...
    @client.setter
    def client(self, value: Any) -> None: ...
    def do_stop(self) -> None: ...
    def _which_go_lanserver(self): ...
    def _ensure_started(self) -> None: ...
    def _ls_spawned(self, supervisor: Any, subprocess: Any) -> None: ...
    def _create_launcher(self): ...
    @classmethod
    def bind_client(klass: Any, provider: Any) -> None: ...

class GoSymbolResolver(Ide.LspSymbolResolver, Ide.SymbolResolver):
    def do_load(self) -> None: ...

class GoHoverProvider(Ide.LspHoverProvider):
    def do_prepare(self) -> None: ...

class GoCompletionProvider(Ide.LspCompletionProvider, Ide.CompletionProvider):
    def do_load(self, context: Any) -> None: ...
