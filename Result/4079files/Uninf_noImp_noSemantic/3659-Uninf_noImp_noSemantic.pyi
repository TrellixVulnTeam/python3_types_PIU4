import pure_interface
import unittest
from typing import Any, Optional

class I1(pure_interface.PureInterface):
    foo: Any = ...
    def bar(self) -> None: ...

class I2(pure_interface.PureInterface):
    bar: Any = ...
    def foo(self) -> None: ...

class Thing1(pure_interface.Concrete, I1):
    foo: str = ...
    def __init__(self) -> None: ...
    def bar(self) -> None: ...

class Thing2(pure_interface.Concrete, I2):
    bar: str = ...
    def __init__(self) -> None: ...
    def foo(self) -> None: ...

def some_func(x: Any, y: Any) -> None: ...
def other_func(a: Any, b: Optional[Any] = ...) -> None: ...

class TestAdaptArgsPy2(unittest.TestCase):
    def test_adapt_args_works(self) -> None: ...
    def test_adapt_optional_args_works_with_none(self) -> None: ...
    def test_adapt_optional_args_works(self) -> None: ...
    def test_no_annotations_warning(self) -> None: ...
    def test_error_raised_if_arg_not_subclass(self) -> None: ...
    def test_type_error_raised_if_positional_arg_not_func(self) -> None: ...
    def test_type_error_raised_if_multiple_positional_args(self) -> None: ...
    def test_type_error_raised_if_mixed_args(self) -> None: ...
    def test_wrong_args_type_raises(self) -> None: ...
