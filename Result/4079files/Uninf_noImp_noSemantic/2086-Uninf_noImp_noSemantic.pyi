from typing import Any, Optional

PCB_VERSION: int
CONTROL_PORT: Any
T_CLOCK: Any
T_DOUT: Any
T_DIN: Any
T_IRQ: Any
T_GETX: Any
T_GETY: Any
T_GETZ1: Any
T_GETZ2: Any
X_LOW: Any
Y_HIGH: Any

class TOUCH:
    DEFAULT_CAL: Any = ...
    pin_clock: Any = ...
    pin_d_out: Any = ...
    pin_d_in: Any = ...
    pin_irq: Any = ...
    ready: bool = ...
    touched: bool = ...
    x: int = ...
    y: int = ...
    buf_length: int = ...
    asynchronous: bool = ...
    def __init__(self, controller: str = ..., asyn: bool = ..., *, confidence: int = ..., margin: int = ..., delay: int = ..., calibration: Optional[Any] = ...) -> None: ...
    buff: Any = ...
    delay: Any = ...
    margin: Any = ...
    calibration: Any = ...
    def touch_parameter(self, confidence: int = ..., margin: int = ..., delay: int = ..., calibration: Optional[Any] = ...) -> None: ...
    def get_touch(self, initial: bool = ..., wait: bool = ..., raw: bool = ..., timeout: Optional[Any] = ...): ...
    async def _main_thread(self) -> None: ...
    def get_touch_async(self): ...
    def do_normalize(self, touch: Any): ...
    def raw_touch(self): ...
    @staticmethod
    def touch_talk(cmd: int, bits: int, port: int) -> int: ...
