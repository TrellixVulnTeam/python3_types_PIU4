from random import Random
from typing import Any

class NistBeaconValue:
    _xml_template: str = ...
    _KEY_FREQUENCY: str = ...
    _KEY_OUTPUT_VALUE: str = ...
    _KEY_PREVIOUS_OUTPUT_VALUE: str = ...
    _KEY_SEED_VALUE: str = ...
    _KEY_SIGNATURE_VALUE: str = ...
    _KEY_STATUS_CODE: str = ...
    _KEY_TIMESTAMP: str = ...
    _KEY_VERSION: str = ...
    _version: Any = ...
    _frequency: Any = ...
    _timestamp: Any = ...
    _seed_value: Any = ...
    _previous_output_value: Any = ...
    _signature_value: Any = ...
    _output_value: Any = ...
    _status_code: Any = ...
    _json: Any = ...
    _xml: Any = ...
    _valid_signature: Any = ...
    _pseudo_random: Any = ...
    def __init__(self, version: str, frequency: int, timestamp: int, seed_value: str, previous_output_value: str, signature_value: str, output_value: str, status_code: str) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @property
    def frequency(self) -> int: ...
    @property
    def json(self) -> str: ...
    @property
    def output_value(self) -> str: ...
    @property
    def previous_output_value(self) -> str: ...
    @property
    def pseudo_random(self) -> Random: ...
    @property
    def seed_value(self) -> str: ...
    @property
    def signature_value(self) -> str: ...
    @property
    def status_code(self) -> str: ...
    @property
    def timestamp(self) -> int: ...
    @property
    def valid_signature(self) -> bool: ...
    @property
    def version(self) -> str: ...
    @property
    def xml(self) -> str: ...
    @classmethod
    def from_json(cls: Any, input_json: str) -> NistBeaconValue: ...
    @classmethod
    def from_xml(cls: Any, input_xml: str) -> NistBeaconValue: ...
