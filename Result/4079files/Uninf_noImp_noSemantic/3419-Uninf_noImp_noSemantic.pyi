import tftpy
from fs import errors as errors
from typing import Any

logger: Any

class TFTPState(tftpy.TftpStates.TftpState):
    def __int__(self, context: Any) -> None: ...
    def handle(self, pkt: Any, raddress: Any, rport: Any) -> None: ...

class TFTPServerState(TFTPState):
    vfs: Any = ...
    data_fs: Any = ...
    full_path: Any = ...
    def handle(self, pkt: Any, raddress: Any, rport: Any) -> None: ...
    def serverInitial(self, pkt: Any, raddress: Any, rport: Any): ...

class TFTPStateServerRecvRRQ(TFTPServerState):
    def handle(self, pkt: Any, raddress: Any, rport: Any): ...

class TFTPStateServerRecvWRQ(TFTPServerState):
    def make_subdirs(self) -> None: ...
    def handle(self, pkt: Any, raddress: Any, rport: Any): ...

class TFTPStateServerStart(TFTPState):
    def handle(self, pkt: Any, raddress: Any, rport: Any): ...

class TFTPContextServer(tftpy.TftpContexts.TftpContextServer):
    file_path: Any = ...
    _already_uploaded: bool = ...
    state: Any = ...
    log: Any = ...
    root: Any = ...
    sock: Any = ...
    data_fs_fileobj: Any = ...
    vfs: Any = ...
    data_fs: Any = ...
    def __int__(self, host: Any, port: Any, timeout: Any, root: Any, dyn_file_func: Any, upload_open: Any) -> None: ...
    last_update: Any = ...
    def start(self, buffer: Any) -> None: ...
    def end(self) -> None: ...
