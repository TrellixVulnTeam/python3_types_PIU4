import collections
import subprocess
from typing import Any

class MakeRunner:
    tmpdir: Any = ...
    make_exe: Any = ...
    script_count: int = ...
    valid_exit_codes: Any = ...
    def __init__(self, tmpdir: Any, make_exe: str = ..., valid_exit_codes: Any = ...) -> None: ...
    def write_script(self, script: Any): ...
    def format_error(self, script: Any, res: Any) -> str: ...
    def run(self, script: Any, target: Any=...) -> subprocess.CompletedProcess: ...

class InspectableMakeRunner(MakeRunner):
    script_prefix: str = ...
    script_suffix: str = ...
    class CompletedProcessWithVars(subprocess.CompletedProcess, collections.MutableMapping):
        def __getitem__(self, key: Any): ...
    def write_script(self, script: Any) -> str: ...
    def parse_output(self, output: Any) -> None: ...
    def parse_var_line(self, line: Any): ...
    def run(self, script: Any, target: Any=...) -> CompletedProcessWithVars: ...

class ToolkitTestRunner(InspectableMakeRunner):
    script_prefix: str = ...
    def __init__(self, *args: Any, toolkit_path: Any, **kwargs: Any) -> None: ...
    def write_script(self, script: Any): ...
    def run(self, *args: Any, **kwargs: Any): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
