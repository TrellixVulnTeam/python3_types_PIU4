import aiohttp
from asyncio.events import AbstractEventLoop
from collections import namedtuple
from typing import Any, Dict, Sequence, Tuple

PositionType = Tuple[float, float]
MetricSpecItemType = Tuple[str, str, str]
MetricsSpecGroupType = Sequence[MetricSpecItemType]
logger: Any
AircraftKeys: Any

Dump1090Resources = namedtuple('Dump1090Resources', ['base', 'receiver', 'stats', 'aircraft'])

Position = namedtuple('Position', ['latitude', 'longitude'])

def build_resources(base_url: str) -> Dump1090Resources: ...
async def fetch(url: str, session: aiohttp.ClientSession, timeout: float=..., loop: AbstractEventLoop=...) -> Dict[Any, Any]: ...
def haversine_distance(pos1: Position, pos2: Position, radius: float=...) -> float: ...

class Dump1090Exporter:
    dump1090urls: Any = ...
    loop: Any = ...
    host: Any = ...
    port: Any = ...
    session: Any = ...
    aircraft_interval: Any = ...
    stats_interval: Any = ...
    stats_time_periods: Any = ...
    origin: Any = ...
    fetch_timeout: Any = ...
    svr: Any = ...
    stats_task: Any = ...
    aircraft_task: Any = ...
    def __init__(self, url: str, host: str=..., port: int=..., aircraft_interval: int=..., stats_interval: int=..., time_periods: Sequence[str]=..., origin: PositionType=..., fetch_timeout: float=..., loop: AbstractEventLoop=...) -> None: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    metrics: Any = ...
    def initialise_metrics(self) -> None: ...
    def _create_gauge_metric(self, label: Any, doc: Any): ...
    async def updater_stats(self) -> None: ...
    async def updater_aircraft(self) -> None: ...
    def process_stats(self, stats: dict, time_periods: Sequence[str]=...) -> None: ...
    def process_aircraft(self, aircraft: dict, threshold: int=...) -> None: ...
