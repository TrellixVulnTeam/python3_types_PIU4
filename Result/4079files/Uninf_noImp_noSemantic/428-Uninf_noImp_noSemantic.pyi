from typing import Any

log: Any

def import_strings(lang: Any) -> None: ...
def write_ports_fields(f: Any, regs: Any) -> None: ...
def write_ports_signals(f: Any, signals: Any) -> None: ...
def write_reg_signals(f: Any, regs: Any) -> None: ...
def write_write_addr_decode_signals(f: Any, regs: Any) -> None: ...
def write_internal_signals(f: Any, internal_signals: Any) -> None: ...
def write_signal_assignments(f: Any, regs: Any, internal_sigs: Any) -> None: ...
def write_write_addr_decode(f: Any, regs: Any, mem_addr_bits: Any) -> None: ...
def write_axi_write_reset(f: Any, reg: Any, field: Any) -> None: ...
def get_hw_mask(field: Any): ...
def write_field_hw_access_we(f: Any, reg: Any, field: Any, skipped: Any): ...
def write_field_hw_access_hwsetclr(f: Any, reg: Any, field: Any, skipped: Any): ...
def write_field_sw_access(f: Any, reg: Any, field: Any, skipped: Any): ...
def write_field_hw_access(f: Any, reg: Any, field: Any, skipped: Any): ...
def write_field_singlepulse(f: Any, reg: Any, field: Any, skipped: Any): ...
def write_axi_writes(f: Any, regs: Any) -> None: ...
def reg_data_out_sensitivity(regs: Any): ...
def field_concat(reg: Any, fields: Any): ...
def write_reg_data_out_when(f: Any, regs: Any, mem_addr_bits: Any): ...
def write_ctrl_sig_assgns(f: Any, regs: Any) -> None: ...
def write_sts_sig_resets(f: Any, regs: Any) -> None: ...
def write_sts_sig_assgns(f: Any, regs: Any) -> None: ...
def generate_rtl(lang: Any, addrmap: Any, root_sigs: Any, internal_sigs: Any) -> None: ...
