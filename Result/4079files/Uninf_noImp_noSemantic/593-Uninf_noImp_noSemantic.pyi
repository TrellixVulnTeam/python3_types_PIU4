import requests
from collections import namedtuple
from typing import Any, List, Optional

BASE_URL: str
PAUSE: float

EsearchResult = namedtuple('EsearchResult', 'ids count webenv query_key')

EpostResult = namedtuple('EpostResult', 'webenv query_key')

EsummaryResult = namedtuple('EsummaryResult', 'id accn create_date update_date')

EfetchPackage = namedtuple('EfetchPackage', 'accn xml')

ElinkResult = namedtuple('EpostResult', 'dbfrom dbto webenv query_key')

def esearch(database: Any, query: Any, userhistory: Any=..., webenv: Any=..., query_key: Any=..., retstart: Any=..., retmax: Any=..., api_key: Any=..., email: Any=..., **kwargs: Any) -> Optional[EsearchResult]: ...
def epost(database: Any, ids: List[str], webenv: Any=..., api_key: Any=..., email: Any=..., **kwargs: Any) -> Optional[EpostResult]: ...
def elink(db: str, dbfrom: str, ids: Any=..., webenv: Any=..., query_key: Any=..., api_key: Any=..., email: Any=..., **kwargs: Any) -> Optional[ElinkResult]: ...
def esummary(database: str, ids: Any=..., webenv: Any=..., query_key: Any=..., count: Any=..., retstart: Any=..., retmax: Any=..., api_key: Any=..., email: Any=..., **kwargs: Any) -> Optional[List[EsummaryResult]]: ...
def efetch(database: Any, ids: Any=..., webenv: Any=..., query_key: Any=..., count: Any=..., retstart: Any=..., retmax: Any=..., rettype: Any=..., retmode: Any=..., api_key: Any=..., email: Any=..., **kwargs: Any) -> str: ...
def check_userhistory(userhistory: Any, url: Any): ...
def check_webenv(webenv: Any, url: Any): ...
def check_query_key(query_key: Any, url: Any): ...
def check_retstart(retstart: Any, url: Any): ...
def check_retmax(retmax: Any, url: Any): ...
def check_api_key(api_key: Any, url: Any): ...
def check_email(email: Any, url: Any): ...
def parse_epost(xml: str) -> EpostResult: ...
def parse_esummary(xml: str) -> List[EsummaryResult]: ...
def entrez_sets_of_results(url: Any, retstart: Any=..., retmax: Any=..., count: Any=...) -> Optional[List[requests.Response]]: ...
def entrez_try_get_multiple_times(url: Any, num_tries: Any=...) -> Optional[requests.Response]: ...
def entrez_try_put_multiple_times(url: str, url_params: str, num_tries: Any=...) -> Optional[requests.Response]: ...
