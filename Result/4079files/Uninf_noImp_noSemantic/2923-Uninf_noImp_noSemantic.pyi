from typing import Any, List, Optional, Set

class PathItem:
    seq: str
    nodes: List[Allele]
    phasesets: Set[int]
    antiphasesets: Set[int]

EMPTY_PATH: Any
TRIM_MIN: Any
TRIM_MARGIN: Any

class OverlapError(ValueError): ...

def trim_seq(seq: Any): ...
def trim_ref(ref: Any, start: Any, stop: Any): ...

class Allele:
    __slots__: Any = ...

class RefAllele(Allele):
    __slots__: Any = ...
    phase: Any = ...
    index: int = ...
    locus: Any = ...
    start: Any = ...
    stop: Any = ...
    ref: Any = ...
    def __init__(self, locus: Any, start: Any, stop: Any, ref: Any) -> None: ...
    @property
    def seq(self): ...
    def __len__(self): ...
    def __repr__(self): ...

class HomAltAllele(Allele):
    __slots__: Any = ...
    phase: Any = ...
    locus: Any = ...
    index: Any = ...
    start: Any = ...
    stop: Any = ...
    seq: Any = ...
    def __init__(self, locus: Any, index: Any, start: Any, stop: Any, seq: Any) -> None: ...
    def __len__(self): ...
    def __repr__(self): ...

class NocallAllele(Allele):
    __slots__: Any = ...
    phase: Any = ...
    index: Any = ...
    locus: Any = ...
    start: Any = ...
    stop: Any = ...
    def __init__(self, locus: Any, start: Any, stop: Any) -> None: ...
    def __len__(self): ...
    @property
    def seq(self): ...
    def __repr__(self): ...

class HetAltAllele(Allele):
    __slots__: Any = ...
    locus: Any = ...
    index: Any = ...
    start: Any = ...
    stop: Any = ...
    seq: Any = ...
    phase: Any = ...
    def __init__(self, locus: Any, index: Any, start: Any, stop: Any, seq: Any, phase: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __repr__(self): ...

def is_valid_geno(zygosity_constraints: Any, path_nodes: Any): ...
def generate_graph(ref: Any, start: Any, stop: Any, loci: Any, debug: bool = ...): ...
def _make_alleles(ref: Any, locus: Any, zygosity_constraints: Any) -> None: ...
def generate_paths(graph: Any, feasible_paths: Optional[Any] = ..., debug: bool = ...): ...
def extend_paths(inpaths: Any, alleles: Any) -> None: ...
def _apply_phase_constrants(alleles: Any, phasesets: Any, antiphasesets: Any): ...
def _update_phasesets(phasesets: Any, phaseset: Any): ...
def _update_antiphasesets(antiphasesets: Any, add_phasesets: Any, phaseset: Any): ...
def prune_paths(paths: Any, feasible_paths: Any) -> None: ...
def intersect_paths(paths1: Any, paths2: Any): ...
def generate_genotypes_with_paths(paths: Any, zygosity_constraints: Any, ploidy: int = ...) -> None: ...
def generate_genotypes(paths: Any, zygosity_constraints: Any, debug: bool = ...): ...
