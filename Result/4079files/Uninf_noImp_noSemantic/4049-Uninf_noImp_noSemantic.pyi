from typing import Any, Dict, Optional, Tuple

class DatasetInfo:
    bounds: Any = ...
    mag_scales: Any = ...
    exp_name: Any = ...
    cube_edge: int = ...
    def __init__(self, exp_name: Any, bounds: Any, mag_scales: Any) -> None: ...

def _cube_bound_space(lo: Any, hi: Any, cube_edge: Any): ...
def _iter_cubes(size_px: Any, offset_px: Any, cube_edge: Any) -> None: ...
def _get_extension(channel: Any): ...
def _maybe_decompress_cube_data(data_str: Any, channel: Any): ...
def _get_pth_to_cube(src: Any, cube: Any, exp_name: Any, mag_scale: Any, channel: Any): ...
def _get_raw_filesystem_cube(src: Any, pth: Any, **kw: Any): ...
def _get_http_cube(src: Any, pth: Any, **kw: Any): ...
def _get_kzip_cube(src: Any, pth: Any, **kw: Any): ...
def _get_cube(src: Any, cube: Any, exp_name: Any, mag_scale: Any, channel: Any, cube_edge: Any, **kw: Any): ...
def np_matrix_from_knossos(pth: Any, ds_info: Any, size: Any, offset: Any, channel: str = ..., mag_scale: int = ..., to_dtype: str = ..., thread_count: int = ..., auth: Optional[Any] = ..., http_retries: int = ...): ...
def oldstyle_knossos_mag_range(mag_1: Tuple[float, float, float], mag_count: int) -> Dict[int, Tuple[float, float, float]]: ...
def main() -> None: ...
