import typing
from typing import Any

def _get_name(itm: Any): ...
def cut_traceback(tb: Any, func_name: Any): ...
def safecall() -> None: ...

class Loader:
    master: Any = ...
    def __init__(self, master: Any) -> None: ...
    def add_option(self, name: str, typespec: type, default: typing.Any, help: str, choices: typing.Optional[typing.Sequence[str]]=...) -> None: ...
    def add_command(self, path: str, func: typing.Callable) -> None: ...

def traverse(chain: Any) -> None: ...

class AddonManager:
    lookup: Any = ...
    chain: Any = ...
    master: Any = ...
    def __init__(self, master: Any) -> None: ...
    def _configure_all(self, options: Any, updated: Any) -> None: ...
    def clear(self) -> None: ...
    def get(self, name: Any): ...
    def register(self, addon: Any): ...
    def add(self, *addons: Any) -> None: ...
    def remove(self, addon: Any) -> None: ...
    def __len__(self): ...
    def __str__(self): ...
    def __contains__(self, item: Any): ...
    async def handle_lifecycle(self, name: Any, message: Any) -> None: ...
    def invoke_addon(self, addon: Any, name: Any, *args: Any, **kwargs: Any) -> None: ...
    def trigger(self, name: Any, *args: Any, **kwargs: Any) -> None: ...
