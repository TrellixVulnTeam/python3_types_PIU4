import asyncio
from typing import Any, Callable, List, Optional

log: Any
rflink_log: Any
TIMEOUT: Any

class ProtocolBase(asyncio.Protocol):
    transport: asyncio.Transport = ...
    loop: Any = ...
    packet: str = ...
    buffer: str = ...
    disconnect_callback: Any = ...
    def __init__(self, loop: Any=..., disconnect_callback: Any=...) -> None: ...
    def connection_made(self, transport: Any) -> None: ...
    def data_received(self, data: Any) -> None: ...
    def handle_lines(self) -> None: ...
    def handle_raw_packet(self, raw_packet: bytes) -> None: ...
    def send_raw_packet(self, packet: str) -> Any: ...
    def log_all(self, file: Any) -> None: ...
    def connection_lost(self, exc: Any) -> None: ...

class PacketHandling(ProtocolBase):
    packet_callback: Any = ...
    def __init__(self, *args: Any, packet_callback: Callable=..., **kwargs: Any) -> None: ...
    _last_ack: Any = ...
    def handle_raw_packet(self, raw_packet: Any) -> None: ...
    def handle_packet(self, packet: Any) -> None: ...
    def send_packet(self, fields: Any) -> None: ...
    def send_command(self, device_id: Any, action: Any) -> None: ...

class CommandSerialization(ProtocolBase):
    packet_callback: Any = ...
    _command_ack: Any = ...
    _ready_to_send: Any = ...
    def __init__(self, *args: Any, packet_callback: Callable=..., **kwargs: Any) -> None: ...
    @asyncio.coroutine
    def send_command_ack(self, device_id: Any, action: Any): ...

class EventHandling(PacketHandling):
    event_callback: Any = ...
    packet_callback: Any = ...
    ignore: Any = ...
    def __init__(self, *args: Any, event_callback: Callable=..., ignore: List[str]=..., **kwargs: Any) -> None: ...
    def _handle_packet(self, packet: Any) -> None: ...
    def handle_event(self, event: Any) -> None: ...
    def handle_packet(self, packet: Any) -> None: ...
    def ignore_event(self, event_id: Any): ...

class RflinkProtocol(CommandSerialization, EventHandling): ...

class InverterProtocol(RflinkProtocol):
    def handle_event(self, event: Any) -> None: ...

class RepeaterProtocol(RflinkProtocol):
    def handle_event(self, packet: Any) -> None: ...

def create_rflink_connection(port: Optional[Any] = ..., host: Optional[Any] = ..., baud: int = ..., protocol: Any = ..., packet_callback: Optional[Any] = ..., event_callback: Optional[Any] = ..., disconnect_callback: Optional[Any] = ..., ignore: Optional[Any] = ..., loop: Optional[Any] = ...): ...
