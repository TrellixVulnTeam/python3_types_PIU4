from gi.repository import GObject as GObject, Gconnect, Peas as Peas
from typing import Any

def packet_to_dict(pkt: Gconnect.NetworkProtocolPacket) -> dict: ...
def dict_to_packet(head: str, d: dict) -> Gconnect.NetworkProtocolPacket: ...
def prepare_logger(name: Any): ...

class SimpleProxy:
    proxy: Any = ...
    name: Any = ...
    logger: Any = ...
    def __init__(self, proxy: Any) -> None: ...
    def formatted_receive(self, body: Any) -> None: ...
    def formatted_request(self, d: Any) -> None: ...
    def receive(self, sender: Any, pkt: Gconnect.NetworkProtocolPacket) -> Any: ...
    def disconnect(self) -> None: ...

class DbusProxy(SimpleProxy):
    dbus_published: bool = ...
    interface_info: Any = ...
    def __init__(self, proxy: Any) -> None: ...
    def dbus_interface(self): ...
    def get_dbus_method(self, name: Any): ...
    def introspection_xml(self) -> None: ...
    def emit_dbus_signal(self, name: Any, variant_type: Any, variant_value: Any) -> None: ...
    def publish(self, sender: Any) -> None: ...
    def disconnect(self) -> None: ...
