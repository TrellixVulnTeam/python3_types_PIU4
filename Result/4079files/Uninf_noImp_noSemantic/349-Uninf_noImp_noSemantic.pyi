import json
from typing import Any, Optional

class TerminalTablePrinter:
    headers: Any = ...
    tabulars: Any = ...
    def __init__(self) -> None: ...
    def print_tabular(self, new_tabular: Any) -> None: ...
    def refresh(self) -> None: ...

class MyEncoder(json.JSONEncoder):
    def default(self, o: Any): ...

def mkdir_p(path: Any) -> None: ...

class Logger:
    _prefixes: Any = ...
    _prefix_str: str = ...
    _tabular_prefixes: Any = ...
    _tabular_prefix_str: str = ...
    _tabular: Any = ...
    _text_outputs: Any = ...
    _tabular_outputs: Any = ...
    _text_fds: Any = ...
    _tabular_fds: Any = ...
    _tabular_header_written: Any = ...
    _snapshot_dir: Any = ...
    _snapshot_mode: str = ...
    _snapshot_gap: int = ...
    _log_tabular_only: bool = ...
    _header_printed: bool = ...
    table_printer: Any = ...
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def _add_output(self, file_name: Any, arr: Any, fds: Any, mode: str = ...) -> None: ...
    def _remove_output(self, file_name: Any, arr: Any, fds: Any) -> None: ...
    def push_prefix(self, prefix: Any) -> None: ...
    def add_text_output(self, file_name: Any) -> None: ...
    def remove_text_output(self, file_name: Any) -> None: ...
    def add_tabular_output(self, file_name: Any, relative_to_snapshot_dir: bool = ...) -> None: ...
    def remove_tabular_output(self, file_name: Any, relative_to_snapshot_dir: bool = ...) -> None: ...
    def set_snapshot_dir(self, dir_name: Any) -> None: ...
    def get_snapshot_dir(self): ...
    def get_snapshot_mode(self): ...
    def set_snapshot_mode(self, mode: Any) -> None: ...
    def get_snapshot_gap(self): ...
    def set_snapshot_gap(self, gap: Any) -> None: ...
    def set_log_tabular_only(self, log_tabular_only: Any) -> None: ...
    def get_log_tabular_only(self): ...
    def log(self, s: Any, with_prefix: bool = ..., with_timestamp: bool = ...) -> None: ...
    def record_tabular(self, key: Any, val: Any) -> None: ...
    def record_dict(self, d: Any, prefix: Optional[Any] = ...) -> None: ...
    def push_tabular_prefix(self, key: Any) -> None: ...
    def pop_tabular_prefix(self) -> None: ...
    def save_extra_data(self, data: Any, file_name: str = ..., mode: str = ...): ...
    def get_table_dict(self): ...
    def get_table_key_set(self): ...
    def prefix(self, key: Any) -> None: ...
    def tabular_prefix(self, key: Any) -> None: ...
    def log_variant(self, log_file: Any, variant_data: Any) -> None: ...
    def record_tabular_misc_stat(self, key: Any, values: Any, placement: str = ...) -> None: ...
    def dump_tabular(self, *args: Any, **kwargs: Any) -> None: ...
    def pop_prefix(self) -> None: ...
    def save_itr_params(self, itr: Any, params: Any) -> None: ...

logger: Any
