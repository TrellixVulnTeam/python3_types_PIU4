from pyprinter import Printer
from typing import Any, Optional, Tuple, TypeVar, Union

_FileSizeType = TypeVar('_FileSizeType', bound='FileSize')

class FileSize:
    MULTIPLIERS: Any = ...
    SIZE_COLORS: Any = ...
    size: Any = ...
    def __init__(self, size: Union[int, float, str, bytes, _FileSizeType]) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def _unit_info(self) -> Tuple[str, int]: ...
    @property
    def bytes(self) -> int: ...
    @property
    def kilo_bytes(self) -> int: ...
    @property
    def mega_bytes(self) -> int: ...
    @staticmethod
    def get_file_size_string(size_bytes: int) -> str: ...
    def __add__(self, file_size: Union[int, float, _FileSizeType]) -> _FileSizeType: ...
    def __sub__(self, file_size: Union[int, float, _FileSizeType]) -> _FileSizeType: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __mul__(self, amount: Union[int, float]) -> _FileSizeType: ...
    def __truediv__(self, amount: Union[int, float]) -> _FileSizeType: ...
    def __floordiv__(self, amount: Union[int, float]) -> _FileSizeType: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def pretty_print(self, printer: Optional[Printer]=..., min_width: int=..., min_unit_width: int=...) -> Any: ...
