from base import Controller as BaseController, View as BaseView
from datasources import Controller as DatasourceController, Datasource
from network import AutoencoderController, Network
from tools.train import TrainingController
from typing import Any, Optional

class View(BaseView):
    def __init__(self, toolbox: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def networks(self): ...
    @property
    def datasources(self): ...

class Controller(View, BaseController):
    def __init__(self, toolbox: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def autoencoder_controller(self) -> AutoencoderController: ...
    @property
    def training_controller(self) -> TrainingController: ...
    @property
    def activation_controller(self) -> BaseController: ...
    @property
    def maximization_engine(self) -> BaseController: ...
    def add_network(self, network: Network) -> None: ...
    def remove_network(self, network: Network) -> None: ...
    def set_network(self, network: Network) -> Any: ...
    def hack_new_model(self): ...
    def hack_new_model2(self): ...
    def hack_new_alexnet(self) -> None: ...
    @property
    def datasource_controller(self) -> DatasourceController: ...
    def add_datasource(self, datasource: Datasource) -> None: ...
    def remove_network(self, datasource: Datasource) -> None: ...
    def set_datasource(self, datasource: Datasource) -> Any: ...
    def get_inputs(self, dtype: Any = ..., flat: bool = ..., test: bool = ...): ...
    def get_labels(self, dtype: Any = ..., one_hot: bool = ..., test: bool = ...): ...
    def get_data_shape(self): ...
    def set_input_from_file(self, filename: str, label: Any=..., description: str=...) -> Any: ...
