from abc import abstractmethod
from numpy import ndarray
from typing import Any, List

class GraphemeEncodingBase:
    allowed_characters: Any = ...
    allowed_character_count: Any = ...
    grapheme_set_size: Any = ...
    graphemes_by_character: Any = ...
    def __init__(self, allowed_characters: List[chr], special_grapheme_count: int) -> None: ...
    def encode_character(self, label_char: chr) -> int: ...
    @abstractmethod
    def encode(self, label: str) -> List[int]: ...
    def encode_label_batch(self, labels: List[str]) -> Any: ...
    def decode_graphemes(self, graphemes: List[int], merge_repeated: bool=...) -> str: ...
    def decode_prediction_batch(self, prediction_batch: ndarray, prediction_lengths: List[int]) -> List[str]: ...
    def decode_grapheme_batch(self, grapheme_batch: ndarray, prediction_lengths: List[int], merge_repeated: bool=...) -> List[str]: ...
    @abstractmethod
    def decode_grapheme(self, grapheme: int, previous_grapheme: int) -> str: ...

class AsgGraphemeEncoding(GraphemeEncodingBase):
    asg_twice: Any = ...
    asg_thrice: Any = ...
    def __init__(self, allowed_characters: List[chr]) -> None: ...
    def encode(self, label: str) -> List[int]: ...
    def decode_grapheme(self, grapheme: int, previous_grapheme: int) -> str: ...

class CtcGraphemeEncoding(GraphemeEncodingBase):
    ctc_blank: Any = ...
    def __init__(self, allowed_characters: List[chr]) -> None: ...
    def encode(self, label: str) -> List[int]: ...
    def decode_grapheme(self, grapheme: int, previous_grapheme: int) -> str: ...
