import numpy as np
from .. import types
from ..models.model_denoising_calling import CopyNumberCallingConfig, DenoisingCallingWorkspace, DenoisingModelConfig, InitialModelParametersSupplier
from .inference_task_base import Caller, CallerUpdateSummary, HybridInferenceParameters, HybridInferenceTask
from typing import Any, Callable

_logger: Any

class HMMCopyNumberCaller(Caller):
    hybrid_inference_params: Any = ...
    copy_number_basic_caller: Any = ...
    shared_workspace: Any = ...
    log_q_c_stc_snapshot: Any = ...
    def __init__(self, calling_config: CopyNumberCallingConfig, hybrid_inference_params: HybridInferenceParameters, shared_workspace: DenoisingCallingWorkspace, temperature: types.TensorSharedVariable) -> None: ...
    def snapshot(self) -> None: ...
    def call(self) -> HMMCopyNumberCallerUpdateSummary: ...
    def finalize(self) -> None: ...
    def update_auxiliary_vars(self) -> None: ...

class HMMCopyNumberCallerUpdateSummary(CallerUpdateSummary):
    copy_number_update_s: Any = ...
    copy_number_log_likelihoods_s: Any = ...
    copy_number_update_reduced: Any = ...
    def __init__(self, copy_number_update_s: np.ndarray, copy_number_log_likelihoods_s: np.ndarray, reducer: Callable[[np.ndarray], float]) -> None: ...
    def __repr__(self): ...
    def reduce_to_scalar(self) -> float: ...

class CaseDenoisingCallingTask(HybridInferenceTask):
    temperature: Any = ...
    def __init__(self, denoising_config: DenoisingModelConfig, calling_config: CopyNumberCallingConfig, hybrid_inference_params: HybridInferenceParameters, shared_workspace: DenoisingCallingWorkspace, initial_param_supplier: InitialModelParametersSupplier, input_model_path: str) -> None: ...
    def disengage(self) -> None: ...
