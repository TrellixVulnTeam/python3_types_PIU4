from chainer import Chain, Variable
from rtype import State
from typing import Any, Dict, List, Tuple

class RNN(Chain):
    embed_dim: Any = ...
    n_units: Any = ...
    h_units: Any = ...
    gpu: Any = ...
    def __init__(self, embed_dim: int, n_units: int=..., h_units: int=..., gpu: int=...) -> None: ...
    def forward_one(self, word: Variable, state: State, dropout: bool=..., train: bool=...) -> Tuple[Variable, State]: ...
    def forward(self, words: List[Variable], state: State, dropout: bool=..., train: bool=...) -> Tuple[List[Variable], State]: ...
    def __call__(self, words: List[Variable], state: State, dropout: bool=..., train: bool=...) -> Any: ...

class Classifier(Chain):
    def __init__(self, predictor: Any) -> None: ...
    def loss(self, words: [int], state: State, dropout: bool=..., train: bool=...) -> Variable: ...
    def __call__(self, words: int, state: State=..., dropout: bool=..., train: bool=...) -> Tuple[Variable, Dict[str, Variable], Variable]: ...
