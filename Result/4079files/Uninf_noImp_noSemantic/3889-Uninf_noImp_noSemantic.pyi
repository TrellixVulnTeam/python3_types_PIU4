from typing import Any, Optional

py3: bool
force: bool
silent: bool
indent: str
stub_open_mode: str
stub_descr: Any
_implicit_globals: Any
_tpvar_is_class: Any

def _print(line: Any) -> None: ...
def _typestring(_types: Any, argspecs: Any, slf_or_clsm: bool = ..., assumed_globals: Optional[Any] = ...): ...
def _typecomment(_types: Any, argspec: Any, slf_or_clsm: bool = ..., assumed_globals: Optional[Any] = ...): ...
def typecomment(func: Any, argspec: Optional[Any] = ..., slf_or_clsm: bool = ..., assumed_globals: Optional[Any] = ...): ...
def signature(func: Any): ...
def annotated_signature(func: Any, argspec: Optional[Any] = ..., slf_or_clsm: bool = ..., assumed_globals: Optional[Any] = ...): ...
def _write_func(func: Any, lines: Any, inc: int = ..., decorators: Optional[Any] = ..., slf_or_clsm: bool = ..., assumed_globals: Optional[Any] = ...) -> None: ...
def _write_property(prop: Any, lines: Any, inc: int = ..., decorators: Optional[Any] = ..., assumed_globals: Optional[Any] = ...) -> None: ...
def _write_TypeVar(tpv: Any, lines: Any, inc: int = ...) -> None: ...
def _write_class(clss: Any, lines: Any, inc: int = ..., assumed_globals: Optional[Any] = ..., implicit_globals: Optional[Any] = ..., assumed_typevars: Optional[Any] = ...): ...
def _func_get_line(func: Any): ...
def _class_get_line(clss: Any): ...
def convert(in_file: Any, out_file: Optional[Any] = ...): ...
def err_no_in_file() -> None: ...
def print_usage() -> None: ...
def main() -> None: ...
