import cerberus
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from typing import Any, Dict, Mapping, Optional, Tuple, Type, Union

Trigger = Union[CronTrigger, DateTrigger, IntervalTrigger]
CRON_TRIGGER_FIELDS_COUNT: Any
NAME_INTERVAL_MAP: Any
log: Any

class JobConfigValidator(cerberus.Validator):
    @staticmethod
    def _fill_args(value: str, length: int, filling: str) -> Tuple[str, ...]: ...
    def _normalize_coerce_cron(self, value: str) -> Tuple[Type, Tuple[str, ...]]: ...
    def _normalize_coerce_date(self, value: str) -> Tuple[Type, Tuple[str]]: ...
    def _normalize_coerce_interval(self, value: str) -> Tuple[Type, Optional[Tuple[int, int, int, int, int]]]: ...
    def _normalize_coerce_timeunits(self, value: str) -> Optional[int]: ...
    def _validator_trigger(self, field: Any, value: Any) -> None: ...

job_def_validator: Any

def labels(*args: Any, **kwargs: Any) -> Tuple[str, str, Mapping[str, Dict]]: ...
def _parse_labels(container_id: str) -> Tuple[str, str, Mapping[str, Dict]]: ...
def _parse_options(_labels: Dict[str, str]) -> Tuple[str, Optional[str]]: ...
def _parse_flags(options: Optional[str]) -> str: ...
def _parse_service_id(_labels: Dict[str, str]) -> str: ...
def _image_definition_labels_of_container(container_id: str) -> Dict[str, str]: ...
def _parse_job_definitions(_labels: Mapping[str, str]) -> Dict[str, Dict]: ...

__all__: Any
