from pyraklib.protocol import *
from pyraklib.protocol.DataPackets import *
from typing import Any

def microtime(get_as_float: bool = ...): ...

class SessionManager:
    packetPool: Any = ...
    server: Any = ...
    socket: Any = ...
    receiveBytes: int = ...
    sendBytes: int = ...
    sessions: Any = ...
    name: str = ...
    packetLimit: int = ...
    shutdown: bool = ...
    ticks: int = ...
    lastMeasure: Any = ...
    block: Any = ...
    ipSec: Any = ...
    portChecking: bool = ...
    serverId: Any = ...
    def __init__(self, server: Any, socket: Any) -> None: ...
    def run(self) -> None: ...
    def tickProcessor(self) -> None: ...
    def tick(self) -> None: ...
    def getPort(self): ...
    def receivePacket(self): ...
    def sendPacket(self, packet: Any, dest: Any, port: Any) -> None: ...
    def streamEncapsulated(self, session: Any, packet: Any, flags: Any = ...) -> None: ...
    def streamRaw(self, address: Any, port: Any, payload: Any) -> None: ...
    def streamClose(self, identifier: Any, reason: Any) -> None: ...
    def streamInvalid(self, identifier: Any) -> None: ...
    def streamOpen(self, session: Any) -> None: ...
    def streamACK(self, identifier: Any, identifierACK: Any) -> None: ...
    def streamOption(self, name: Any, value: Any) -> None: ...
    def receiveStream(self): ...
    def blockAddress(self, address: Any, timeout: int = ...) -> None: ...
    def getSession(self, ip: Any, port: Any): ...
    def removeSession(self, session: Any, reason: str = ...) -> None: ...
    def openSession(self, session: Any) -> None: ...
    def notifyACK(self, session: Any, identifierACK: Any) -> None: ...
    def getID(self): ...
    def registerPacket(self, id: Any, clazz: Any) -> None: ...
    def getPacketFromPool(self, id: Any): ...
    def registerPackets(self) -> None: ...
