import _socket
from typing import Any, Optional

socket_orig: Any
AF_INET: Any
AF_UNIX: Any
SOCK_STREAM: Any
SOL_SOCKET: Any
SO_ERROR: Any
O_NONBLOCK: Any
s_error: Any
s_timeout: Any
s_dup: Any
s_getdefaulttimeout: Any
s_getaddrinfo: Any
cancel_wait_ex: Any
SocketIO: Any

class socket(_socket.socket):
    __slots__: Any = ...
    _io_refs: int = ...
    _closed: bool = ...
    timeout: Any = ...
    def __init__(self, family: Any = ..., type: Any = ..., proto: int = ..., fileno: Optional[Any] = ...) -> None: ...
    def _trampoline(self, fd: Any, evtype: Any, timeout: Optional[Any] = ..., timeout_exc: Optional[Any] = ...): ...
    @property
    def type(self): ...
    def dup(self): ...
    def accept(self): ...
    def _real_close(self, _ss: Any = ...) -> None: ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def detach(self): ...
    def connect(self, address: Any): ...
    def connect_ex(self, address: Any): ...
    def recv(self, *args: Any): ...
    def recvfrom(self, *args: Any): ...
    def recvfrom_into(self, *args: Any): ...
    def recv_into(self, *args: Any): ...
    def send(self, data: Any, flags: int = ...): ...
    def sendall(self, data: Any, flags: int = ...) -> None: ...
    def sendto(self, *args: Any): ...
    def setblocking(self, flag: Any) -> None: ...
    def settimeout(self, t: Any) -> None: ...
    def gettimeout(self): ...
    def makefile(self, mode: str = ..., buffering: Optional[Any] = ..., *, encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...): ...
    def _socket_accept(self): ...
    def _socket_connect(self, address: Any): ...
    def _socket_checkerr(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
    def __repr__(self): ...
    def __getstate__(self) -> None: ...
    def _decref_socketios(self) -> None: ...
SocketType = socket

def fromfd(fd: Any, family: Any, type: Any, proto: int = ...): ...
def fromshare(info: Any): ...
def socketpair(family: Optional[Any] = ..., type: Any = ..., proto: int = ...): ...
