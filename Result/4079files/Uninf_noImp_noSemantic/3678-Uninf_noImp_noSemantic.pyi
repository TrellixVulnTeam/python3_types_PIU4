import factory
from ..models import Article
from typing import Any, Optional

faker: Any

class OrganisationFactory(factory.django.DjangoModelFactory):
    name: Any = ...
    class Meta:
        model: str = ...

class PublisherFactory(factory.django.DjangoModelFactory):
    name: Any = ...
    class Meta:
        model: str = ...

class CollectionFactory(factory.django.DjangoModelFactory):
    code: Any = ...
    name: Any = ...
    localidentifier: Any = ...
    class Meta:
        model: str = ...
        django_get_or_create: Any = ...

class DisciplineFactory(factory.django.DjangoModelFactory):
    code: Any = ...
    name: Any = ...
    class Meta:
        model: str = ...
        django_get_or_create: Any = ...

class JournalFactory(factory.django.DjangoModelFactory):
    @classmethod
    def create_with_issue(cls, *args: Any, **kwargs: Any): ...
    collection: Any = ...
    type: Any = ...
    code: Any = ...
    name: Any = ...
    localidentifier: Any = ...
    redirect_to_external_url: bool = ...
    last_publication_year: Any = ...
    class Meta:
        model: str = ...
    class Params:
        type_code: Any = ...
    def publishers(self, create: Any, extracted: Any, **kwargs: Any) -> None: ...
    def members(self, create: Any, extracted: Any, **kwargs: Any) -> None: ...
    def disciplines(self, create: Any, extracted: Any, **kwargs: Any) -> None: ...
    def post(obj: Any, create: Any, extracted: Any, **kwargs: Any) -> None: ...

class JournalTypeFactory(factory.django.DjangoModelFactory):
    name: Any = ...
    code: Any = ...
    class Meta:
        model: str = ...
        django_get_or_create: Any = ...

class JournalInformationFactory(factory.django.DjangoModelFactory):
    journal: Any = ...
    class Meta:
        model: str = ...

class IssueFactory(factory.django.DjangoModelFactory):
    @classmethod
    def create_published_after(cls, other_issue: Any, *args: Any, **kwargs: Any): ...
    journal: Any = ...
    localidentifier: Any = ...
    date_published: Any = ...
    year: Any = ...
    is_published: bool = ...
    class Meta:
        model: str = ...
    def post(obj: Any, create: Any, extracted: Any, **kwargs: Any) -> None: ...
    def add_to_fedora_journal(obj: Any, create: Any, extracted: Any, **kwargs: Any) -> None: ...

class EmbargoedIssueFactory(IssueFactory):
    date_published: Any = ...
    year: Any = ...
    journal: Any = ...

class NonEmbargoedIssueFactory(IssueFactory):
    date_published: Any = ...
    year: Any = ...
    journal: Any = ...

class ArticleRef(Article):
    issue: Any = ...
    localidentifier: Any = ...
    def __init__(self, issue: Any, localidentifier: Any, from_fixture: Optional[Any] = ..., title: Optional[Any] = ..., type: Optional[Any] = ..., section_titles: Optional[Any] = ..., publication_allowed: bool = ..., authors: Optional[Any] = ..., add_to_fedora_issue: bool = ..., with_pdf: bool = ..., external_pdf_url: Optional[Any] = ..., solr_attrs: Optional[Any] = ...) -> None: ...
    def _should_use_cache(self): ...

class ArticleFactory(factory.Factory):
    issue: Any = ...
    localidentifier: Any = ...
    class Meta:
        model: Any = ...
    def with_pdf(obj: Any, create: Any, extracted: Any, **kwargs: Any) -> None: ...

class OpenAccessArticleFactory(ArticleFactory):
    issue: Any = ...

class EmbargoedArticleFactory(ArticleFactory):
    issue: Any = ...

class NonEmbargoedArticleFactory(ArticleFactory):
    issue: Any = ...

class LegacyOrganisationProfileFactory(factory.django.DjangoModelFactory):
    organisation: Any = ...
    account_id: Any = ...
    class Meta:
        model: str = ...

class ThesisRepositoryFactory(factory.django.DjangoModelFactory):
    code: Any = ...
    name: Any = ...
    solr_name: Any = ...
    class Meta:
        model: str = ...
        django_get_or_create: Any = ...

class ThesisFactory(factory.Factory):
    id: Any = ...
    title: Any = ...
    type: str = ...
    authors: Any = ...
    year: Any = ...
    date_added: Any = ...
    repository: Any = ...
    collection: Any = ...
    url: Any = ...
    class Meta:
        model: Any = ...

class SolrDocumentFactory(factory.Factory):
    id: Any = ...
    title: Any = ...
    type: str = ...
    authors: Any = ...
    class Meta:
        model: Any = ...
