from arcade import Color
from typing import Any, Optional

class WindowStack:
    stack: Any = ...
    def __init__(self) -> None: ...
    def is_visible(self): ...
    def draw(self) -> None: ...
    def switch_focus(self, relative: int = ...) -> None: ...
    def do_action(self) -> None: ...
    def on_key_escape(self) -> None: ...
    def on_text(self, text: Any) -> None: ...
    def on_text_motion(self, motion: Any) -> None: ...
    def on_mouse_motion(self, x: Any, y: Any) -> None: ...
    def on_mouse_press(self, x: Any, y: Any, button: Any) -> None: ...

class Window:
    window_stack: Any = ...
    border_size: int = ...
    title: Any = ...
    title_label: Any = ...
    title_step_size: Any = ...
    def __init__(self, window_stack: Any, title: Optional[Any] = ...) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def get_size(self) -> None: ...
    def draw(self): ...
    def draw_background(self) -> None: ...
    def draw_title(self): ...
    def do_action(self) -> None: ...
    def switch_focus(self, relative: int = ...) -> None: ...
    def on_key_escape(self) -> None: ...
    def on_text(self, text: Any) -> None: ...
    def on_text_motion(self, motion: Any) -> None: ...
    def on_mouse_motion(self, x: Any, y: Any) -> None: ...
    def on_mouse_press(self, x: Any, y: Any, button: Any) -> None: ...

class Menu(Window):
    selected_action_index: Any = ...
    actions: Any = ...
    labels: Any = ...
    label_location_map: Any = ...
    label_width: Any = ...
    label_height: Any = ...
    label_step_size: int = ...
    def __init__(self, actions: Any, initial_selected_action_index: int = ..., **kwargs: Any) -> None: ...
    def get_size(self): ...
    def draw(self) -> None: ...
    def switch_focus(self, relative: int = ...) -> None: ...
    def do_action(self) -> None: ...
    def _find_label_for_location(self, x: Any, y: Any): ...
    def on_mouse_motion(self, x: Any, y: Any) -> None: ...
    def on_mouse_press(self, x: Any, y: Any, button: Any) -> None: ...

class ChoiceMenu(Menu):
    cancel_choice_idx: Any = ...
    def __init__(self, choices: Any, title: Any, initial_choice_idx: int = ..., cancel_choice_idx: Optional[Any] = ..., **kwargs: Any): ...
    def on_key_escape(self) -> None: ...

class ConfirmActionMenu(ChoiceMenu):
    def __init__(self, title: Any, action: Any, **kwargs: Any) -> None: ...

class MessageBox(ChoiceMenu):
    def __init__(self, title: Any, action: Optional[Any] = ..., **kwargs: Any) -> None: ...

class Rectangle:
    vertex_list: Any = ...
    def __init__(self, x1: Any, y1: Any, x2: Any, y2: Any, batch: Any) -> None: ...

class TextInput(Window):
    callback: Any = ...
    batch: Any = ...
    text_width: Any = ...
    document: Any = ...
    text_height: Any = ...
    layout: Any = ...
    caret: Any = ...
    rectangle: Any = ...
    def __init__(self, callback: Any, **kwargs: Any) -> None: ...
    def _draw_start_pos(self, x: Any, y: Any) -> None: ...
    def draw(self) -> None: ...
    def do_action(self) -> None: ...
    def on_key_escape(self) -> None: ...
    def get_size(self): ...
    def on_text(self, text: Any) -> None: ...
    def on_text_motion(self, motion: Any) -> None: ...

class HelpMenu(MessageBox):
    def __init__(self, **kwargs: Any) -> None: ...

def create_html_text(text: str, color: Color, width: int=..., anchor_x: Any=..., anchor_y: Any=..., font_size: float=..., font_name: Any=..., bold: bool=..., italic: bool=...) -> Any: ...
