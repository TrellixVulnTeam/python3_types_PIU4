from . import util as util
from typing import Any

_logger: Any
ALGO_RSA_SHA1: str
ALGO_RSA_SHA256: str
ALGO_RSA_SHA384: str
ALGO_RSA_SHA512: str
ALGO_ECDSA_SHA256: str
PREFIX_RSA_SHA256: Any
PREFIX_RSA_SHA384: Any
PREFIX_RSA_SHA512: Any
ASN1_TYPES: Any

class CertificateError(Exception): ...

def bitstr_to_bytestr(s: Any): ...
def bytestr_to_int(s: Any): ...
def decode_OID(s: Any): ...
def encode_OID(oid: Any): ...

class ASN1_Node(bytes):
    def get_node(self, ix: Any): ...
    def root(self): ...
    def next_node(self, node: Any): ...
    def first_child(self, node: Any): ...
    def is_child_of(node1: Any, node2: Any): ...
    def get_all(self, node: Any): ...
    def get_value_of_type(self, node: Any, asn1_type: Any): ...
    def get_value(self, node: Any): ...
    def get_children(self, node: Any): ...
    def get_sequence(self): ...
    def get_dict(self, node: Any): ...
    def decode_time(self, ii: Any): ...

class X509:
    bytes: Any = ...
    data: Any = ...
    serial_number: Any = ...
    sig_algo: Any = ...
    issuer: Any = ...
    notBefore: Any = ...
    notAfter: Any = ...
    subject: Any = ...
    public_key_algo: Any = ...
    modulus: Any = ...
    exponent: Any = ...
    ec_public_key: Any = ...
    CA: bool = ...
    AKI: Any = ...
    SKI: Any = ...
    cert_sig_algo: Any = ...
    signature: Any = ...
    def __init__(self, b: Any) -> None: ...
    def get_keyID(self): ...
    def get_issuer_keyID(self): ...
    def get_common_name(self): ...
    def get_signature(self): ...
    def check_ca(self): ...
    def check_date(self) -> None: ...
    def getFingerprint(self): ...

def load_certificates(ca_path: Any): ...
