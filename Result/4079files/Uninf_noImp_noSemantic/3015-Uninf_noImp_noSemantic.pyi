import typing as ty
from . import common
from typing import Any

__author__: str
__copyright__: str

class AbstractMetricCollector:
    conf: Any = ...
    def __init__(self, conf: Any) -> None: ...
    def write(self) -> None: ...
    def put_input(self, ctx: common.Context, result: common.Result=..., status: str=...) -> Any: ...
    def put_loading_summary(self, total_duration: float=...) -> Any: ...
    def put_output(self, output: str, process_time: float, status: str) -> Any: ...
    def put_output_summary(self, inputs: int, files: int, total_duration: float) -> Any: ...
    def put_total(self, total_duration: float=...) -> Any: ...

class MetricsSimple(AbstractMetricCollector):
    _stats: Any = ...
    _lock: Any = ...
    def __init__(self, conf: Any) -> None: ...
    def write(self) -> None: ...
    def put_input(self, ctx: common.Context, result: common.Result=..., status: ty.Union[str, property]=...) -> Any: ...
    def put_loading_summary(self, total_duration: float=...) -> Any: ...
    def put_output(self, output: str, process_time: float, status: str) -> Any: ...
    def put_output_summary(self, inputs: int, files: int, total_duration: float) -> Any: ...
    def put_total(self, total_duration: float=...) -> Any: ...

class MetricsProm(AbstractMetricCollector):
    _inp_loading_time: Any = ...
    _inp_by_status: Any = ...
    _total_processing_time: Any = ...
    _total_loading_duration: Any = ...
    _total_output_time: Any = ...
    _outp_src_inp: Any = ...
    _outp_src_files: Any = ...
    _outp_process_time: Any = ...
    _outp_status: Any = ...
    def __init__(self, conf: Any) -> None: ...
    def write(self) -> None: ...
    def put_input(self, ctx: common.Context, result: common.Result=..., status: ty.Union[str, property]=...) -> Any: ...
    def put_loading_summary(self, total_duration: float=...) -> Any: ...
    def put_output(self, output: str, process_time: float, status: str) -> Any: ...
    def put_output_summary(self, inputs: int, files: int, total_duration: float) -> Any: ...
    def put_total(self, total_duration: float=...) -> Any: ...

COLLECTOR: Any

def configure(conf: Any) -> None: ...
