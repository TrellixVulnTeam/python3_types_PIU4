import couchbaseConstants
import pump
from typing import Any, Dict, Optional, Tuple

def number_try_parse(s: Any): ...

class CSVSource(pump.Source):
    done: bool = ...
    r: Any = ...
    def __init__(self, opts: Any, spec: Any, source_bucket: Any, source_node: Any, source_map: Any, sink_map: Any, ctl: Any, cur: Any) -> None: ...
    @staticmethod
    def can_handle(opts: Any, spec: str) -> bool: ...
    @staticmethod
    def check(opts: Any, spec: str) -> Tuple[couchbaseConstants.PUMP_ERROR, Dict[str, Any]]: ...
    @staticmethod
    def provide_design(opts: Any, source_spec: Any, source_bucket: Any, source_map: Any) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[str]]: ...
    fields: Any = ...
    def provide_batch(self) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[pump.Batch]]: ...

class CSVSink(pump.Sink):
    CSV_SCHEME: str = ...
    CSV_JSON_SCHEME: str = ...
    csvfile: Any = ...
    writer: Any = ...
    fields: Any = ...
    def __init__(self, opts: Any, spec: Any, source_bucket: Any, source_node: Any, source_map: Any, sink_map: Any, ctl: Any, cur: Any) -> None: ...
    def bucket_name(self) -> str: ...
    def node_name(self) -> str: ...
    @staticmethod
    def can_handle(opts: Any, spec: str) -> bool: ...
    @staticmethod
    def check(opts: Any, spec: Any, source_map: Any) -> Tuple[couchbaseConstants.PUMP_ERROR, Any]: ...
    @staticmethod
    def consume_design(opts: Any, sink_spec: Any, sink_map: Any, source_bucket: Any, source_map: Any, source_design: Any) -> couchbaseConstants.PUMP_ERROR: ...
    def consume_batch_async(self, batch: pump.Batch) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[pump.SinkBatchFuture]]: ...
    def close(self) -> None: ...
    def get_csvfile(self, base: str) -> str: ...
    def convert_meta(self, meta: Any) -> int: ...
