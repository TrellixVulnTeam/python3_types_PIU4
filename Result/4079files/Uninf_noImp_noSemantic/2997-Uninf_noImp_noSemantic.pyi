import abc
import typing
from typing import Any

__all__: Any

class BaseDecorator(metaclass=abc.ABCMeta):
    __func: Any = ...
    def __init__(self, func: typing.Optional[typing.Callable[..., typing.Any]]=...) -> None: ...
    @property
    def _func(self) -> typing.Optional[typing.Callable[..., typing.Any]]: ...
    @abc.abstractmethod
    def _get_function_wrapper(self, func: typing.Callable[..., typing.Any]) -> typing.Callable[..., typing.Any]: ...
    def __call__(self, *args: typing.Union[typing.Callable[..., typing.Any], typing.Any], **kwargs: typing.Any) -> typing.Any: ...
    def __repr__(self) -> str: ...
