import enum
from typing import Any, Callable, Dict, Optional, Type

_NO_DEFAULT: Any
VariableName: Any
VariableValue: Any
Source: Any
TransformCallable: Any

class Autoload(enum.Enum):
    CLASS: str = ...
    OBJECT: str = ...
    NEVER: str = ...

def _generate_environ_name(attr_name: str, prefix: Optional[str]=...) -> VariableName: ...

class _Options:
    prefix: Optional[str] = ...
    autoload: Autoload = ...
    source: Source = ...
    transform: TransformCallable = ...
    wanted_type: Type = ...
    variable_name: Callable[[str, Optional[str]], VariableName] = ...
    @classmethod
    def from_dict(cls: Any, options_dict: Dict) -> _Options: ...

class Variable:
    variable_name: Optional[VariableName] = ...
    default: Any = ...
    transform: Optional[TransformCallable] = ...
    source: Optional[Source] = ...
    wanted_type: Type = ...
    def set_defaults(self, variable_name: VariableName, transform: TransformCallable, source: Source, wanted_type: Type) -> Any: ...
    def get(self) -> VariableValue: ...

class Config:
    _options: _Options
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def load(cls: Config, target_obj: Optional[object]=...) -> Any: ...

class AutoConfig(Config):
    def __init_subclass__(cls: Any, prefix: Optional[str]=..., **kwargs: Any) -> Any: ...
