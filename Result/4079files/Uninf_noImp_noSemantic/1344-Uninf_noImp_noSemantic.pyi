from ssl import _create_unverified_context as _create_unverified_context
from typing import Any, Optional

HAS_SSLCONTEXT: bool
default_log_handler: Any
__logger: Any

def checkauth(fn: Any): ...
def dojson(fn: Any): ...

class ZabbixAPIException(Exception): ...
class Already_Exists(ZabbixAPIException): ...
class InvalidProtoError(ZabbixAPIException): ...
class APITimeout(ZabbixAPIException): ...

class ZabbixAPI:
    __username__: str = ...
    __password__: str = ...
    auth: str = ...
    url: str = ...
    params: Any = ...
    method: Any = ...
    proto: str = ...
    httpuser: Any = ...
    httppasswd: Any = ...
    timeout: int = ...
    validate_certs: Any = ...
    server: Any = ...
    kwargs: Any = ...
    id: int = ...
    r_query: Any = ...
    def __init__(self, server: str = ..., user: Any = ..., passwd: Any = ..., log_level: Any = ..., timeout: int = ..., r_query_len: int = ..., validate_certs: bool = ..., **kwargs: Any) -> None: ...
    logger: Any = ...
    def _setuplogging(self) -> None: ...
    def set_log_level(self, level: Any) -> None: ...
    def recent_query(self): ...
    def debug(self, level: Any, var: str = ..., msg: Optional[Any] = ...) -> None: ...
    def json_obj(self, method: Any, params: Any = ..., auth: bool = ...): ...
    def login(self, user: str = ..., password: str = ..., save: bool = ...) -> None: ...
    def test_login(self): ...
    def do_request(self, json_obj: Any): ...
    def logged_in(self): ...
    def api_version(self, **options: Any): ...
    def __checkauth__(self) -> None: ...
    def __getattr__(self, name: Any): ...

class ZabbixAPISubClass(ZabbixAPI):
    parent: Any = ...
    data: Any = ...
    def __init__(self, parent: Any, data: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __checkauth__(self) -> None: ...
    def do_request(self, req: Any): ...
    def json_obj(self, method: Any, param: Any): ...
    def universal(self, **opts: Any): ...
