import aiohttp
import enum
from . import abc as ni_abc
from aiohttp import web as web
from typing import AbstractSet, Any, Dict, Optional

JSON = Any
JSONDict = Dict[str, Any]
LABEL_PREFIX: str
CLA_OK: Any
NO_CLA: Any
EASTEREGG_PROBABILITY: float
NO_CLA_TEMPLATE: str
NO_CLA_BODY: str
NO_CLA_BODY_EASTEREGG: Any
NO_USERNAME_BODY: str
GITHUB_EMAIL: Any

class PullRequestEvent(enum.Enum):
    assigned: str = ...
    unassigned: str = ...
    labeled: str = ...
    unlabeled: str = ...
    opened: str = ...
    closed: str = ...
    reopened: str = ...
    synchronize: str = ...

class Host(ni_abc.ContribHost):
    route: Any = ...
    _useful_actions: Any = ...
    server: Any = ...
    event: Any = ...
    request: Any = ...
    _gh: Any = ...
    def __init__(self, server: ni_abc.ServerHost, client: aiohttp.ClientSession, event: PullRequestEvent, request: JSONDict) -> None: ...
    @classmethod
    async def process(cls: Any, server: ni_abc.ServerHost, request: web.Request, client: aiohttp.ClientSession) -> Host: ...
    async def usernames(self) -> AbstractSet[str]: ...
    _labels_url: Any = ...
    async def labels_url(self, label: str=...) -> str: ...
    async def current_label(self) -> Optional[str]: ...
    async def set_label(self, status: ni_abc.Status) -> str: ...
    async def remove_label(self) -> Optional[str]: ...
    async def comment(self, status: ni_abc.Status) -> Optional[str]: ...
    async def update(self, status: ni_abc.Status) -> None: ...
