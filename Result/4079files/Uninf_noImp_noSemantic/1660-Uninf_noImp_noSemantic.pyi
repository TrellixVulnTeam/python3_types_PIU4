import aiohttp
import typing
from datetime import datetime, timedelta
from enum import Enum
from typing import Any

class StationInfo:
    required_fields: Any = ...
    signature: Any = ...
    name: Any = ...
    def __init__(self, signature: str, name: str) -> None: ...
    @classmethod
    def from_xml_node(cls, node: Any): ...

class TrainStopStatus(Enum):
    on_time: str = ...
    delayed: str = ...
    canceled: str = ...

class TrainStop:
    required_fields: Any = ...
    id: Any = ...
    canceled: Any = ...
    advertised_time_at_location: Any = ...
    estimated_time_at_location: Any = ...
    time_at_location: Any = ...
    other_information: Any = ...
    deviations: Any = ...
    modified_time: Any = ...
    def __init__(self, id: Any, canceled: bool, advertised_time_at_location: datetime, estimated_time_at_location: datetime, time_at_location: datetime, other_information: typing.List[str], deviations: typing.List[str], modified_time: datetime) -> None: ...
    def get_state(self) -> TrainStopStatus: ...
    def get_delay_time(self) -> timedelta: ...
    @classmethod
    def from_xml_node(cls, node: Any): ...

class TrafikverketTrain:
    _api: Any = ...
    def __init__(self, client_session: aiohttp.ClientSession, api_key: str) -> None: ...
    async def async_get_train_station(self, location_name: str) -> StationInfo: ...
    async def async_search_train_stations(self, location_name: str) -> typing.List[StationInfo]: ...
    async def async_get_train_stop(self, from_station: StationInfo, to_station: StationInfo, time_at_location: datetime) -> TrainStop: ...
    async def async_get_next_train_stop(self, from_station: StationInfo, to_station: StationInfo, after_time: datetime) -> TrainStop: ...
