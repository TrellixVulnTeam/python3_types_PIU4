from abc import ABCMeta
from aiohttp import web
from parkkeeper import models
from typing import Any

def start_server() -> None: ...
def add_routes(app: Any) -> None: ...

class WebSocketHandler(metaclass=ABCMeta):
    stop_msg: str = ...
    need_background: bool = ...
    stop_background_timeout: int = ...
    async def process_msg(self, msg_text: str) -> Any: ...
    async def background(self, ws: web.WebSocketResponse) -> Any: ...
    async def get_handler(self, request: Any): ...
    async def _receive_msg(self, ws: web.WebSocketResponse) -> Any: ...

class MonitSchedulesHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

class WorkSchedulesHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

class MonitResultHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

class WorkResultHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

class MonitWaitingTaskHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

class MonitCurrentWorkerHandler(WebSocketHandler):
    need_background: bool = ...
    stop_background_timeout: float = ...
    async def background(self, ws: Any) -> None: ...

def _get_worker_represent(worker: models.CurrentWorker) -> dict: ...
def _get_task_represent(task: dict) -> dict: ...
