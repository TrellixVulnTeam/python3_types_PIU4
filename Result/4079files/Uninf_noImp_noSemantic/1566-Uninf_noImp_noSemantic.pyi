import threading
from . import util
from .util import print_error as print_error
from typing import Any

ca_path: Any

def Connection(server: Any, queue: Any, config_path: Any): ...

class TcpConnection(threading.Thread, util.PrintError):
    config_path: Any = ...
    queue: Any = ...
    server: Any = ...
    host: Any = ...
    port: Any = ...
    use_ssl: Any = ...
    daemon: bool = ...
    def __init__(self, server: Any, queue: Any, config_path: Any) -> None: ...
    def diagnostic_name(self): ...
    def check_host_name(self, peercert: Any, name: Any): ...
    def get_simple_socket(self): ...
    @staticmethod
    def get_ssl_context(cert_reqs: Any, ca_certs: Any): ...
    def get_socket(self): ...
    def run(self) -> None: ...

class Interface(util.PrintError):
    server: Any = ...
    socket: Any = ...
    pipe: Any = ...
    debug: bool = ...
    unsent_requests: Any = ...
    unanswered_requests: Any = ...
    last_request: Any = ...
    last_ping: int = ...
    closed_remotely: bool = ...
    def __init__(self, server: Any, socket: Any) -> None: ...
    def diagnostic_name(self): ...
    def fileno(self): ...
    def close(self) -> None: ...
    request_time: Any = ...
    def queue_request(self, *args: Any) -> None: ...
    def num_requests(self): ...
    def send_requests(self): ...
    def ping_required(self): ...
    def has_timed_out(self): ...
    def get_responses(self): ...

def check_cert(host: Any, cert: Any) -> None: ...
def _match_hostname(name: Any, val: Any): ...
def test_certificates() -> None: ...
