from pyqtgraph.Qt import QtCore, QtWidgets
from typing import Any

WindowTemplate: Any
TemplateBaseClass: Any

class MainWindow(TemplateBaseClass):
    ui: Any = ...
    portSelector: Any = ...
    plots: Any = ...
    data: Any = ...
    def __init__(self) -> None: ...
    def update(self, sample: tuple) -> Any: ...
    def closeEvent(self, event: Any) -> None: ...

class Emitter(QtCore.QObject):
    newSample: Any = ...
    def __init__(self) -> None: ...
    def connect(self) -> None: ...
    def emit(self, data: Any) -> None: ...

class Port(QtWidgets.QListWidgetItem):
    serial: Any = ...
    port: Any = ...
    description: Any = ...
    emitter: Any = ...
    readThread: Any = ...
    close_request: Any = ...
    def __init__(self, port_data: Any, *args: Any, **kwargs: Any) -> None: ...
    def open(self, baudrate: Any, parity: Any, bytesize: Any) -> None: ...
    def close(self) -> None: ...
    def isOpen(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __repr__(self): ...
    def listen(self) -> None: ...

class PortSelector:
    list_w: Any = ...
    baudrate_combo: Any = ...
    parity_combo: Any = ...
    bytesize_combo: Any = ...
    baudrate_validator: Any = ...
    port: Any = ...
    check_availability_list: Any = ...
    check_availability_timer: Any = ...
    refresh_timer: Any = ...
    def __init__(self, list_w: QtWidgets.QListWidget, baudrate_combo: QtWidgets.QComboBox, parity_combo: QtWidgets.QComboBox, bytesize_combo: QtWidgets.QComboBox) -> None: ...
    def refresh(self) -> None: ...
    def setPort(self, port: Port) -> Any: ...
    def check_availability(self) -> None: ...
    def getPortList(self) -> list: ...

class Generator(QtCore.QThread):
    newData: Any = ...
    def __init__(self, f: Any) -> None: ...
    def run(self) -> None: ...
