import unittest
from antlr4.RuleContext import RuleContext
from antlr4.Token import Token
from typing import Any

RecognitionException: Any

class Recognizer:
    tokenTypeMapCache: Any = ...
    ruleIndexMapCache: Any = ...
    _listeners: Any = ...
    _interp: Any = ...
    _stateNumber: int = ...
    def __init__(self) -> None: ...
    def extractVersion(self, version: Any): ...
    def checkVersion(self, toolVersion: Any) -> None: ...
    def addErrorListener(self, listener: Any) -> None: ...
    def removeErrorListener(self, listener: Any) -> None: ...
    def removeErrorListeners(self) -> None: ...
    def getTokenTypeMap(self): ...
    def getRuleIndexMap(self): ...
    def getTokenType(self, tokenName: str) -> Any: ...
    def getErrorHeader(self, e: RecognitionException) -> Any: ...
    def getTokenErrorDisplay(self, t: Token) -> Any: ...
    def getErrorListenerDispatch(self): ...
    def sempred(self, localctx: RuleContext, ruleIndex: int, actionIndex: int) -> Any: ...
    def precpred(self, localctx: RuleContext, precedence: int) -> Any: ...
    @property
    def state(self): ...
    @state.setter
    def state(self, atnState: int) -> Any: ...

class Test(unittest.TestCase):
    def testVersion(self) -> None: ...
