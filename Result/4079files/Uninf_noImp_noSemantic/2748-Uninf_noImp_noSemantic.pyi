import argparse
from typing import Any, List, Match, Optional, Sequence, Tuple

TYPESHED_SUBDIRS: Any
TYPESHED_HOME: str
UNSET: Any

def main() -> None: ...
def create_parser() -> argparse.ArgumentParser: ...

class PathMatcher:
    matcher: Any = ...
    def __init__(self, patterns: Sequence[str]) -> None: ...
    def search(self, path: str) -> Optional[Match[str]]: ...

def load_blacklist(typeshed_location: str) -> List[str]: ...
def run_pytype(filename: str, python_version: str, python_exe: str, typeshed_location: str) -> Optional[str]: ...
def _get_relative(filename: str) -> str: ...
def _get_module_name(filename: str) -> str: ...
def can_run(exe: str, args: List[str]) -> bool: ...
def _is_version(path: str, version: str) -> bool: ...
def check_subdirs_discoverable(subdir_paths: List[str]) -> None: ...
def check_python_exes_runnable(python27_exe_arg: str, python36_exe_arg: str) -> None: ...
def determine_files_to_test(typeshed_location: str, subdir_paths: Sequence[str]) -> List[Tuple[str, int]]: ...
def run_all_tests(files_to_test: Sequence[Tuple[str, int]], typeshed_location: str, python27_exe: str, python36_exe: str, print_stderr: bool, dry_run: bool) -> None: ...
