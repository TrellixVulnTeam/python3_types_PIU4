from chromewhip.helpers import BaseEvent as BaseEvent, ChromeTypeBase, PayloadMixin
from typing import Any, Optional, Union

log: Any
WindowID = int
WindowState = str

class Bounds(ChromeTypeBase):
    left: Any = ...
    top: Any = ...
    width: Any = ...
    height: Any = ...
    windowState: Any = ...
    def __init__(self, left: Optional[int]=..., top: Optional[int]=..., width: Optional[int]=..., height: Optional[int]=..., windowState: Optional[WindowState]=...) -> None: ...
PermissionType = str

class Bucket(ChromeTypeBase):
    low: Any = ...
    high: Any = ...
    count: Any = ...
    def __init__(self, low: Union[int], high: Union[int], count: Union[int]) -> None: ...

class Histogram(ChromeTypeBase):
    name: Any = ...
    sum: Any = ...
    count: Any = ...
    buckets: Any = ...
    def __init__(self, name: Union[str], sum: Union[int], count: Union[int], buckets: Union['[Bucket]']) -> None: ...

class Browser(PayloadMixin):
    @classmethod
    def grantPermissions(cls: Any, origin: Union[str], permissions: Union['[PermissionType]'], browserContextId: Optional[Target.BrowserContextID]=...) -> Any: ...
    @classmethod
    def resetPermissions(cls: Any, browserContextId: Optional[Target.BrowserContextID]=...) -> Any: ...
    @classmethod
    def close(cls): ...
    @classmethod
    def crash(cls): ...
    @classmethod
    def crashGpuProcess(cls): ...
    @classmethod
    def getVersion(cls): ...
    @classmethod
    def getBrowserCommandLine(cls): ...
    @classmethod
    def getHistograms(cls: Any, query: Optional[str]=..., delta: Optional[bool]=...) -> Any: ...
    @classmethod
    def getHistogram(cls: Any, name: Union[str], delta: Optional[bool]=...) -> Any: ...
    @classmethod
    def getWindowBounds(cls: Any, windowId: Union[WindowID]) -> Any: ...
    @classmethod
    def getWindowForTarget(cls: Any, targetId: Optional[Target.TargetID]=...) -> Any: ...
    @classmethod
    def setWindowBounds(cls: Any, windowId: Union[WindowID], bounds: Union[Bounds]) -> Any: ...
    @classmethod
    def setDockTile(cls: Any, badgeLabel: Optional[str]=..., image: Optional[str]=...) -> Any: ...
