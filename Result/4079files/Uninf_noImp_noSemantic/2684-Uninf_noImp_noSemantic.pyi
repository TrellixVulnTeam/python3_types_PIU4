import enum
from aiohttp import ClientSession, web
from asyncio import BoundedSemaphore
from typing import Any, Callable, Dict, Iterable, List, NamedTuple, Optional, Tuple, Union

class Encoding(enum.Enum):
    URL: str = ...
    FORM: str = ...

class Injection(NamedTuple):
    name: str
    example: str
    test_template_payloads: Iterable[Tuple[str, bool]]
    payload: Union[str, Callable[[str, str], str]]
    def __call__(self, working: Any, expression: Any) -> str: ...
    def test_payloads(self, working_value: Any) -> List[Tuple[str, bool]]: ...

class AttackContext(NamedTuple):
    url: str
    method: str
    target_parameter: str
    parameters: Dict[str, str]
    match_function: Callable[[int, str], bool]
    concurrency: int
    fast_mode: bool
    body: Optional[bytes]
    headers: Dict[str, str]
    encoding: Encoding
    oob_details: str
    session: ClientSession = ...
    features: Dict[str, bool] = ...
    common_strings: Any = ...
    common_characters: Any = ...
    injection: Injection = ...
    semaphore: BoundedSemaphore = ...
    oob_host: str = ...
    oob_app: web.Application = ...
    async def start(self, injection: Injection=...) -> AttackContext: ...
    async def start_oob_server(self) -> AttackContext: ...
    async def null_context(self) -> AttackContext: ...
    @property
    def target_parameter_value(self): ...

async def check(context: AttackContext, payload: str) -> Any: ...
