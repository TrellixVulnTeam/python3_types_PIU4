import couchbaseConstants
import pump
from typing import Any, Dict, Optional, Tuple

class GenSource(pump.Source):
    done: bool = ...
    body: Any = ...
    cur_ops: Any = ...
    cur_gets: Any = ...
    cur_sets: Any = ...
    cur_items: Any = ...
    def __init__(self, opts: Any, spec: Any, source_bucket: Any, source_node: Any, source_map: Any, sink_map: Any, ctl: Any, cur: Any) -> None: ...
    @staticmethod
    def can_handle(opts: Any, spec: str) -> bool: ...
    @staticmethod
    def check(opts: Any, spec: str) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[Dict[str, Any]]]: ...
    @staticmethod
    def parse_spec(opts: Any, spec: str) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[Dict[str, Any]]]: ...
    @staticmethod
    def provide_design(opts: Any, source_spec: Any, source_bucket: Any, source_map: Any) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[str]]: ...
    def provide_batch(self) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[pump.Batch]]: ...
    @staticmethod
    def total_msgs(opts: Any, source_bucket: Any, source_node: Any, source_map: Any) -> Tuple[couchbaseConstants.PUMP_ERROR, Optional[int]]: ...
