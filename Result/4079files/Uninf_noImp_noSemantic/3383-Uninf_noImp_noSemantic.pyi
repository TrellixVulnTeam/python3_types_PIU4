import typing
from typing import Any, Optional

EVENTS_LOG_SIZE_DEFAULT: int
EVENT_TYPE_SHOW: str
EVENT_TYPE_SLUG: str
EVENT_TYPE_COMMENT: str
EVENT_TYPE_OPEN: str
EVENT_TYPE_CLOSE: str
EVENT_TYPE_TAGGED: str
EVENT_TYPE_CHAINED_TO: str
EVENTS_LOG_EVENT_WEIGHTS: Any

def read() -> typing.List: ...
def write(events_log: typing.List) -> None: ...
def timestamp(dt: Optional[Any] = ...): ...
def append_event(issue_uid: str, event_type: str, parameters: typing.Dict=...) -> None: ...
def append_event_open(issue_uid: str, message: str) -> None: ...
def append_event_show(issue_uid: Any) -> None: ...
def append_event_tagged(issue_uid: str, tags: typing.List) -> None: ...
def append_event_chained_to(issue_uid: str, chained_to_these_issues: typing.List) -> None: ...
def append_event_close(issue_uid: str) -> None: ...
def append_event_slug(issue_uid: str, slug: str) -> None: ...
def sort(events_log: Any): ...
def _bug_event_without_assigned_weight(event: Any) -> None: ...
def squash_events_log_aggressive_1(events_log: Any): ...
def rfind_if(seq: Any, pred: Any): ...
def squash_events_log_aggressive_2(events_log: Any): ...
def squash_events_log(events_log: Any, aggressive: int = ...): ...
