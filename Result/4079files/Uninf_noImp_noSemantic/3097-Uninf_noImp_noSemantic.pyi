from pyloom.server import web
from typing import Any

logger: Any

class PickleDriver:
    _count: int = ...
    _max_count: int = ...
    _next_pop_time: Any = ...
    _db: Any = ...
    def __init__(self, path: Any) -> None: ...
    def create(self, project_id: Any, seeders: Any, timeout: Any, interval: Any, results_mode: Any) -> None: ...
    def get_projects(self): ...
    def modify_options(self, project_id: Any, timeout: Any, interval: Any) -> None: ...
    def exist(self, project_id: Any, url: Any, url_hash: Any): ...
    def add(self, project_id: Any, urls: dict, priority: Any) -> Any: ...
    def pop(self, projects: Any, limit: int = ...): ...
    def _flush(self) -> None: ...
    def report_finish(self, project_id: Any, url: Any) -> None: ...
    def report_error(self, project_id: Any, url: Any, tag: Any) -> None: ...
    def get_queues(self, project_id: Any): ...
    def get_error_tags(self, project_id: Any): ...
    def get_error_urls(self, project_id: Any, tag: Any, start: int = ..., limit: int = ...): ...
    def rollback_errors(self, project_id: Any, tag: Any, priority: Any): ...
    def remove(self, project_id: Any) -> None: ...

class MongoDriver:
    def create(self, project_id: Any, seeders: Any, timeout: Any, interval: Any, results_mode: Any) -> None: ...
    def get_projects(self) -> None: ...
    def modify_options(self, project_id: Any, timeout: Any, interval: Any) -> None: ...
    def exist(self, project_id: Any, url: Any, url_hash: Any) -> None: ...
    def add(self, project_id: Any, urls: dict, priority: Any) -> Any: ...
    def pop(self, projects: Any, limit: int = ...) -> None: ...
    def report_finish(self, project_id: Any, url: Any) -> None: ...
    def report_error(self, project_id: Any, url: Any, tag: Any) -> None: ...
    def get_queues(self, project_id: Any) -> None: ...
    def get_error_tags(self, project_id: Any) -> None: ...
    def get_error_urls(self, project_id: Any, tag: Any, start: int = ..., limit: int = ...) -> None: ...
    def rollback_errors(self, project_id: Any, tag: Any, priority: Any) -> None: ...
    def remove(self, project_id: Any) -> None: ...

class _BaseHandler(web.BaseHandler):
    worker_driver: Any = ...
    driver: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class QueuesHandler(_BaseHandler):
    def post(self): ...
    def get(self): ...

class QueueHandler(_BaseHandler):
    def get(self, project_id: Any): ...
    def delete(self, project_id: Any): ...
    def patch(self, project_id: Any): ...

class QueueURLsHandler(_BaseHandler):
    def post(self, project_id: Any): ...
    def patch(self, project_id: Any): ...
    def pop(self): ...
    def report_finish(self, project_id: Any): ...
    def report_error(self, project_id: Any): ...

class ErrorsHandler(_BaseHandler):
    def get(self, project_id: Any): ...

class ErrorHandler(_BaseHandler):
    def get(self, project_id: Any, tag: Any): ...
    def patch(self, project_id: Any, tag: Any): ...
    def rollback(self, project_id: Any, tag: Any): ...
