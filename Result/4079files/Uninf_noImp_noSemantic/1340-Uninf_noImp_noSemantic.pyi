import bpy
from typing import Any

class MaterialProperty:
    @classmethod
    def define_blender_props(cls, b_prop_group: Any) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...

class MicrofacetProperty(MaterialProperty):
    @classmethod
    def define_blender_props(cls, b_prop_group: Any) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...
    @classmethod
    def get_roughness(cls, b_prop_group: Any): ...
    @classmethod
    def get_roughness_u(cls, b_prop_group: Any): ...
    @classmethod
    def get_roughness_v(cls, b_prop_group: Any): ...
    @classmethod
    def is_anisotropic(cls, b_prop_group: Any): ...

class MaterialType(bpy.types.PropertyGroup):
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...
    @classmethod
    def get_description(cls): ...
    @classmethod
    def to_sdl(cls, b_prop_group: Any, sdlconsole: Any, res_name: Any) -> None: ...
    @classmethod
    def get_name(cls): ...

class MatteOpaque(MaterialType):
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...
    @classmethod
    def to_sdl(cls, b_prop_group: Any, sdlconsole: Any, res_name: Any): ...
    @classmethod
    def get_name(cls): ...

class AbradedOpaque(MaterialType):
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...
    @classmethod
    def to_sdl(cls, b_prop_group: Any, sdlconsole: Any, res_name: Any): ...
    @classmethod
    def get_name(cls): ...

class AbradedTranslucent(MaterialType):
    @classmethod
    def define_blender_props(cls) -> None: ...
    @classmethod
    def display_blender_props(cls, b_layout: Any, b_prop_group: Any) -> None: ...
    @classmethod
    def to_sdl(cls, b_prop_group: Any, sdlconsole: Any, res_name: Any): ...
    @classmethod
    def get_name(cls): ...

AVAILABLE_MATERIAL_TYPES: Any

def define_blender_props() -> None: ...
def display_blender_props(b_layout: Any, b_material: Any) -> None: ...
def to_sdl(b_material: Any, sdlconsole: Any, res_name: Any): ...
