from assets import DEFAULT_DURATION as DEFAULT_DURATION, audio_asset as audio_asset, avi_video_asset as avi_video_asset, bmp_image_asset as bmp_image_asset, gif_image_asset as gif_image_asset, mkv_video_asset as mkv_video_asset, mp2_video_asset as mp2_video_asset, mp3_audio_asset as mp3_audio_asset, mp4_video_asset as mp4_video_asset, nut_audio_asset as nut_audio_asset, nut_video_asset as nut_video_asset, ogg_video_asset as ogg_video_asset, opus_audio_asset as opus_audio_asset, png_image_asset as png_image_asset, png_image_asset_gray as png_image_asset_gray, png_image_asset_gray_alpha as png_image_asset_gray_alpha, png_image_asset_palette as png_image_asset_palette, png_image_asset_rgb as png_image_asset_rgb, png_image_asset_rgb_alpha as png_image_asset_rgb_alpha, svg_vector_asset as svg_vector_asset, tiff_image_asset as tiff_image_asset, tiff_image_asset_cmyk as tiff_image_asset_cmyk, tiff_image_asset_gray_16bit as tiff_image_asset_gray_16bit, tiff_image_asset_gray_8bit as tiff_image_asset_gray_8bit, tiff_image_asset_gray_8bit_alpha as tiff_image_asset_gray_8bit_alpha, tiff_image_asset_palette as tiff_image_asset_palette, tiff_image_asset_rgb as tiff_image_asset_rgb, tiff_image_asset_rgb_alpha as tiff_image_asset_rgb_alpha, wav_audio_asset as wav_audio_asset, webp_image_asset as webp_image_asset, webp_image_asset_rgb as webp_image_asset_rgb, webp_image_asset_rgb_alpha as webp_image_asset_rgb_alpha
from typing import Any

class TestAsset:
    def test_asset_string_representation_contains_class_name(self) -> None: ...
    def test_asset_string_representation_contains_metadata(self) -> None: ...
    def test_asset_string_representation_does_not_contain_complex_metadata(self) -> None: ...

class TestMadam:
    def madam_instance(self): ...
    def read_asset(self, manager: Any, asset: Any): ...
    def test_get_processor_returns_processor_for_readable_asset(self, manager: Any, asset: Any) -> None: ...
    def test_get_processor_returns_none_for_unreadable_asset(self, manager: Any, unknown_asset: Any) -> None: ...
    def test_read_returns_jpeg_asset_with_correct_metadata(self, manager: Any, jpeg_data_with_exif: Any) -> None: ...
    def test_read_returns_jpeg_asset_whose_essence_does_not_contain_metadata(self, manager: Any, jpeg_image_asset: Any, tmpdir: Any) -> None: ...
    def test_read_empty_file_raises_error(self, manager: Any) -> None: ...
    def test_read_raises_when_file_is_none(self, manager: Any) -> None: ...
    def test_read_raises_error_when_format_is_unknown(self, manager: Any, unknown_asset: Any) -> None: ...
    def test_read_returns_asset_when_reading_valid_data(self, read_asset: Any) -> None: ...
    def test_read_returns_asset_with_correct_mime_type(self, manager: Any, asset: Any) -> None: ...
    def test_read_stores_additional_metadata(self, manager: Any, asset: Any) -> None: ...
    def test_read_returns_asset_whose_essence_is_filled(self, read_asset: Any) -> None: ...
    def test_read_returns_image_asset_with_correct_color_mode(self, manager: Any, image_asset: Any) -> None: ...
    def test_read_jpeg_does_not_alter_the_original_file(self, manager: Any) -> None: ...
    def test_read_video_returns_asset_with_duration_metadata(self, manager: Any, video_asset: Any) -> None: ...
    def test_read_video_returns_asset_containing_video_size_metadata(self, manager: Any, video_asset: Any) -> None: ...
    def test_read_returns_video_asset_containing_video_stream_metadata(self, manager: Any, video_asset: Any) -> None: ...
    def test_read_returns_video_asset_containing_color_mode_metadata(self, manager: Any, video_asset: Any) -> None: ...
    def test_read_returns_asset_containing_image_size_metadata(self, manager: Any, image_asset: Any) -> None: ...
    def test_read_returns_image_asset_containing_color_depth_metadata(self, manager: Any, image_asset: Any) -> None: ...
    def test_read_only_returns_python_types_in_metadata(self, manager: Any, jpeg_image_asset: Any, tmpdir: Any) -> None: ...
    def test_writes_correct_essence_without_metadata(self, manager: Any, asset: Any) -> None: ...
    def test_writes_correct_essence_with_metadata(self, manager: Any, jpeg_image_asset: Any) -> None: ...
    def test_config_contains_list_of_all_processors_by_default(self, manager: Any) -> None: ...
    def test_config_contains_list_of_all_metadata_processors_by_default(self, manager: Any) -> None: ...
    def test_config_does_not_contain_metadata_processor_when_it_is_not_installed(self) -> None: ...
