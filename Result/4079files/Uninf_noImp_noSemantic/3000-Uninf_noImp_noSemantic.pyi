import abc
import enum
import pathlib
from typing import Any

def create_log_entry(id_: Any, date: Any, author: Any): ...

class Supported(enum.Enum):
    hg: int = ...
    git: int = ...

class Repo(metaclass=abc.ABCMeta):
    supported: Any = ...
    type: Any = ...
    @classmethod
    def register(cls, subclass: Any) -> None: ...
    @classmethod
    def get(cls: Any, type_: str, remote: str, dest_parent: str, *, branch: Any=...) -> Any: ...
    remote: Any = ...
    branch: Any = ...
    directory: Any = ...
    claimed_commits: Any = ...
    commits: Any = ...
    def __init__(self, remote: str, parent_path: pathlib.Path, *, branch: Any=...) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    @abc.abstractmethod
    def clone(self): ...
    @abc.abstractmethod
    def update(self): ...
    @abc.abstractmethod
    def log(self, name: Any): ...
    @abc.abstractmethod
    def close(self): ...
    def claim_commit(self, name: Any, id_: Any) -> None: ...

class Hg(Repo):
    type: Any = ...
    def _author_name(self, commit: Any): ...
    _client: Any = ...
    def clone(self) -> None: ...
    def update(self) -> None: ...
    def log(self): ...
    def close(self) -> None: ...

class Git(Repo):
    type: Any = ...
    _repo: Any = ...
    def clone(self) -> None: ...
    def update(self) -> None: ...
    def log(self): ...
    def close(self) -> None: ...
