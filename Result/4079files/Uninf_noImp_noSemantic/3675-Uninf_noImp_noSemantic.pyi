from typing import Any, Optional

__author__: str

class Node:
    _children_list: Any = ...
    def __init__(self, children: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def children(self): ...
    def to_ecma(self): ...

class SetOfNodes(Node): ...
class Program(Node): ...
class Block(Node): ...

class Boolean(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class Null(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class Number(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class Identifier(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class String(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class Regex(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class Array(Node):
    items: Any = ...
    def __init__(self, items: Any) -> None: ...
    def children(self): ...

class Object(Node):
    properties: Any = ...
    def __init__(self, properties: Optional[Any] = ...) -> None: ...
    def children(self): ...

class NewExpr(Node):
    identifier: Any = ...
    args: Any = ...
    def __init__(self, identifier: Any, args: Optional[Any] = ...) -> None: ...
    def children(self): ...

class FunctionCall(Node):
    identifier: Any = ...
    args: Any = ...
    def __init__(self, identifier: Any, args: Optional[Any] = ...) -> None: ...
    def children(self): ...

class BracketAccessor(Node):
    node: Any = ...
    expr: Any = ...
    def __init__(self, node: Any, expr: Any) -> None: ...
    def children(self): ...

class DotAccessor(Node):
    node: Any = ...
    identifier: Any = ...
    def __init__(self, node: Any, identifier: Any) -> None: ...
    def children(self): ...

class Assign(Node):
    op: Any = ...
    left: Any = ...
    right: Any = ...
    def __init__(self, op: Any, left: Any, right: Any) -> None: ...
    def children(self): ...

class GetPropAssign(Node):
    prop_name: Any = ...
    elements: Any = ...
    def __init__(self, prop_name: Any, elements: Any) -> None: ...
    def children(self): ...

class SetPropAssign(Node):
    prop_name: Any = ...
    parameters: Any = ...
    elements: Any = ...
    def __init__(self, prop_name: Any, parameters: Any, elements: Any) -> None: ...
    def children(self): ...

class VarStatement(Node): ...

class VarDecl(Node):
    identifier: Any = ...
    initializer: Any = ...
    def __init__(self, identifier: Any, initializer: Optional[Any] = ...) -> None: ...
    def children(self): ...

class UnaryOp(Node):
    op: Any = ...
    value: Any = ...
    postfix: Any = ...
    def __init__(self, op: Any, value: Any, postfix: bool = ...) -> None: ...
    def children(self): ...

class BinOp(Node):
    op: Any = ...
    left: Any = ...
    right: Any = ...
    def __init__(self, op: Any, left: Any, right: Any) -> None: ...
    def children(self): ...

class Conditional(Node):
    predicate: Any = ...
    consequent: Any = ...
    alternative: Any = ...
    def __init__(self, predicate: Any, consequent: Any, alternative: Any) -> None: ...
    def children(self): ...

class If(Node):
    predicate: Any = ...
    consequent: Any = ...
    alternative: Any = ...
    def __init__(self, predicate: Any, consequent: Any, alternative: Optional[Any] = ...) -> None: ...
    def children(self): ...

class DoWhile(Node):
    predicate: Any = ...
    statement: Any = ...
    def __init__(self, predicate: Any, statement: Any) -> None: ...
    def children(self): ...

class While(Node):
    predicate: Any = ...
    statement: Any = ...
    def __init__(self, predicate: Any, statement: Any) -> None: ...
    def children(self): ...

class For(Node):
    init: Any = ...
    cond: Any = ...
    count: Any = ...
    statement: Any = ...
    def __init__(self, init: Any, cond: Any, count: Any, statement: Any) -> None: ...
    def children(self): ...

class ForIn(Node):
    item: Any = ...
    iterable: Any = ...
    statement: Any = ...
    def __init__(self, item: Any, iterable: Any, statement: Any) -> None: ...
    def children(self): ...

class Continue(Node):
    identifier: Any = ...
    def __init__(self, identifier: Optional[Any] = ...) -> None: ...
    def children(self): ...

class Break(Node):
    identifier: Any = ...
    def __init__(self, identifier: Optional[Any] = ...) -> None: ...
    def children(self): ...

class Return(Node):
    expr: Any = ...
    def __init__(self, expr: Optional[Any] = ...) -> None: ...
    def children(self): ...

class With(Node):
    expr: Any = ...
    statement: Any = ...
    def __init__(self, expr: Any, statement: Any) -> None: ...
    def children(self): ...

class Switch(Node):
    expr: Any = ...
    cases: Any = ...
    default: Any = ...
    def __init__(self, expr: Any, cases: Any, default: Optional[Any] = ...) -> None: ...
    def children(self): ...

class Case(Node):
    expr: Any = ...
    elements: Any = ...
    def __init__(self, expr: Any, elements: Any) -> None: ...
    def children(self): ...

class Default(Node):
    elements: Any = ...
    def __init__(self, elements: Any) -> None: ...
    def children(self): ...

class Label(Node):
    identifier: Any = ...
    statement: Any = ...
    def __init__(self, identifier: Any, statement: Any) -> None: ...
    def children(self): ...

class Throw(Node):
    expr: Any = ...
    def __init__(self, expr: Any) -> None: ...
    def children(self): ...

class Try(Node):
    statements: Any = ...
    catch: Any = ...
    fin: Any = ...
    def __init__(self, statements: Any, catch: Optional[Any] = ..., fin: Optional[Any] = ...) -> None: ...
    def children(self): ...

class Catch(Node):
    identifier: Any = ...
    elements: Any = ...
    def __init__(self, identifier: Any, elements: Any) -> None: ...
    def children(self): ...

class Finally(Node):
    elements: Any = ...
    def __init__(self, elements: Any) -> None: ...
    def children(self): ...

class Debugger(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class FuncBase(Node):
    identifier: Any = ...
    parameters: Any = ...
    elements: Any = ...
    def __init__(self, identifier: Any, parameters: Any, elements: Any) -> None: ...
    def _init_ids(self) -> None: ...
    def children(self): ...

class FuncDecl(FuncBase): ...
class FuncExpr(FuncBase): ...

class Comma(Node):
    left: Any = ...
    right: Any = ...
    def __init__(self, left: Any, right: Any) -> None: ...
    def children(self): ...

class EmptyStatement(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class ExprStatement(Node):
    expr: Any = ...
    def __init__(self, expr: Any) -> None: ...
    def children(self): ...

class Elision(Node):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def children(self): ...

class This(Node):
    def __init__(self) -> None: ...
    def children(self): ...
