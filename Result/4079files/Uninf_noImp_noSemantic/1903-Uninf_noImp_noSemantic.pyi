from ..amodels import Model as Model, method_connect_once as method_connect_once
from typing import Any, Optional

class AbstractUser(Model):
    list_fields: Any = ...
    user_profile_fields: Any = ...
    @classmethod
    def set_defaults(cls: Any, data: dict) -> Any: ...
    @classmethod
    def get_user_by_email(cls, email: Any, *, silent: bool = ..., connection: Optional[Any] = ...): ...
    is_active: bool = ...
    async def activate(self, connection: Optional[Any] = ...) -> None: ...
    date_deleted: Any = ...
    email: Any = ...
    async def delete_account(self, connection: Optional[Any] = ...) -> None: ...
    async def get_profile(self, connection: Optional[Any] = ...): ...
    async def patch_profile(self, profile_data: Any, connection: Optional[Any] = ...) -> None: ...
    def prepare_image(self, result: Optional[Any] = ...) -> None: ...
    @classmethod
    async def change_email(cls, user_id: Any, new_email_address: Any, connection: Optional[Any] = ...) -> None: ...
    last_login: Any = ...
    async def on_login(self, connection: Optional[Any] = ...) -> None: ...
    @classmethod
    async def get_by_oauth_provider(cls, provider: Any, uid: Any, connection: Optional[Any] = ...): ...
    async def save_oauth_info(self, provider: Any, uid: Any, connection: Optional[Any] = ...) -> None: ...
    def __repr__(self): ...

class BaseAbstractConfirmationRequest(Model):
    primary_key: str = ...
    @classmethod
    def set_defaults(cls: Any, data: dict) -> Any: ...
    @property
    def code(self): ...
    @classmethod
    def get_by_email(cls, email: Any, connection: Optional[Any] = ...): ...
    def is_confirmed(self): ...
    def is_cancelled(self): ...
    status: Any = ...
    async def confirm(self, connection: Optional[Any] = ...) -> None: ...
    async def cancel(self, connection: Optional[Any] = ...) -> None: ...
    async def mark_as_sent(self, connection: Optional[Any] = ...) -> None: ...
    async def send_via_mailer(self, connection: Optional[Any] = ...) -> None: ...
    @classmethod
    async def send(cls, user: Any, lang_code: Any, connection: Optional[Any] = ...): ...
    def get_status(self): ...

class AbstractUserActivationRequest(BaseAbstractConfirmationRequest):
    template_name: str = ...
    def get_template_context(self): ...

class AbstractUserProfileDeleteRequest(BaseAbstractConfirmationRequest):
    template_name: str = ...
    def get_template_context(self): ...

class AbstractUserChangeEmailOriginalAddressRequest(BaseAbstractConfirmationRequest):
    template_name: str = ...
    def get_template_context(self): ...
    @classmethod
    async def get_by_new_email(cls, new_email_address: Any, user_id: Optional[Any] = ..., connection: Optional[Any] = ...): ...
    @classmethod
    async def send(cls, user: Any, new_email_address: Any, lang_code: Any, connection: Optional[Any] = ...): ...

class AbstractUserChangeEmailNewAddressRequest(AbstractUserChangeEmailOriginalAddressRequest):
    template_name: str = ...
    @classmethod
    async def send(cls, user: Any, new_email_address: Any, lang_code: Any, connection: Optional[Any] = ...): ...
