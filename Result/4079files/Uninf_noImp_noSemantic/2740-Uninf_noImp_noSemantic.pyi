import typing as T
import argparse
from crawl.cmd.base import BaseCommand
from crawl.history import History
from pathlib import Path
from requests import Response
from typing import Any

MEDIA_EXTENSIONS: Any

class ProbeResult:
    url: str
    is_media: bool
    child_urls: T.Set[str] = ...

class LinkScanResult:
    errors: T.List[str] = ...
    document_urls: T.Set[str] = ...
    media_urls: T.Set[str] = ...
    linkings: T.Dict[str, T.Set[str]] = ...
    @property
    def total(self) -> int: ...

class DownloadStats:
    total: int = ...
    downloaded: int = ...
    errors: T.List[str] = ...
    @property
    def skipped(self) -> int: ...
    @property
    def processed(self) -> int: ...

def _link_scan(args: argparse.Namespace, result: LinkScanResult) -> None: ...
def _download_media(args: argparse.Namespace, link_scan_result: LinkScanResult, stats: DownloadStats) -> None: ...
def _probe_url(url: str, history: History) -> ProbeResult: ...
def _download_url(url: str, history: History, args: argparse.Namespace, link_scan_result: LinkScanResult) -> Path: ...
def _get_target_path(url: str, args: argparse.Namespace, link_scan_result: LinkScanResult) -> Path: ...
def _collect_links(response: Response) -> T.Set[str]: ...

class DownloadCommand(BaseCommand):
    name: str = ...
    def decorate_parser(self, parser: argparse.ArgumentParser) -> None: ...
    def run(self, args: argparse.Namespace) -> None: ...
