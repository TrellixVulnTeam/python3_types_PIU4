import collections
import subprocess
from typing import Any, Iterable, List, Optional, Tuple

def shell_cmd(input_cmd: list) -> subprocess.Popen: ...
def timestamp_path(path: str, keyword: Any=...) -> str: ...
def get_path_ancestry(paths: Iterable[str]) -> List[str]: ...
def secure_string(length: int) -> str: ...
def contract_user(path: str) -> str: ...
def set_path_autocomplete() -> None: ...
def set_no_autocomplete() -> None: ...

class FactoryDict(collections.defaultdict):
    def __missing__(self, key: Any): ...

class DictProperty:
    class _Proxy:
        _obj: Any = ...
        _fget: Any = ...
        _fset: Any = ...
        _fdel: Any = ...
        def __init__(self, obj: Any, fget: Any, fset: Any, fdel: Any) -> None: ...
        def __getitem__(self, key: Any): ...
        def __setitem__(self, key: Any, value: Any) -> None: ...
        def __delitem__(self, key: Any) -> None: ...
    _fget: Any = ...
    _fset: Any = ...
    _fdel: Any = ...
    __doc__: Any = ...
    def __init__(self, fget: Optional[Any] = ..., fset: Optional[Any] = ..., fdel: Optional[Any] = ..., doc: Optional[Any] = ...) -> None: ...
    def __get__(self, obj: Any, objtype: Optional[Any] = ...): ...
    def getter(self, fget: Any): ...
    def setter(self, fset: Any): ...
    def deleter(self, fdel: Any): ...

class ProgressBar:
    coverage: Any = ...
    message: Any = ...
    r_align: Any = ...
    fill_char: Any = ...
    empty_char: Any = ...
    left_char: Any = ...
    right_char: Any = ...
    def __init__(self, coverage: float, message: Any=..., r_align: Any=..., fill_char: Any=..., empty_char: Any=..., left_char: Any=..., right_char: Any=...) -> None: ...
    def update(self, fill_amount: float) -> None: ...

class BoxTable:
    HORIZONTAL_CHAR: str = ...
    VERTICAL_CHAR: str = ...
    TOP_RIGHT_CHAR: str = ...
    TOP_LEFT_CHAR: str = ...
    BOTTOM_RIGHT_CHAR: str = ...
    BOTTOM_LEFT_CHAR: str = ...
    CROSS_CHAR: str = ...
    TOP_TEE_CHAR: str = ...
    BOTTOM_TEE_CHAR: str = ...
    LEFT_TEE_CHAR: str = ...
    RIGHT_TEE_CHAR: str = ...
    ANSI_REGEX: Any = ...
    HEADER_ANSI: Any = ...
    data: Any = ...
    _lengths: Any = ...
    def __init__(self, data: List[Tuple[str, ...]]) -> None: ...
    def _get_column_lengths(self) -> List[int]: ...
    def _get_separator(self) -> List[str]: ...
    def _format_top_separator(self) -> str: ...
    def _format_bottom_separator(self) -> str: ...
    def _format_inside_separator(self) -> str: ...
    def _format_row(self) -> str: ...
    def format(self) -> str: ...
