from codot import CONFIG_EXT as CONFIG_EXT, HOME_DIR as HOME_DIR
from codot.utils import rm_ext as rm_ext
from typing import Any, Optional, Tuple

class ProgramData:
    _cfg_file: Any = ...
    _info_file: Any = ...
    def __init__(self) -> None: ...
    def read(self) -> None: ...
    def generate(self) -> None: ...
    def write(self) -> None: ...
    @property
    def overwrite_always(self) -> bool: ...
    @property
    def id_format(self) -> str: ...
    def last_sync(self, key: str) -> float: ...
    @last_sync.setter
    def last_sync(self, key: str, value: float) -> None: ...

class ConfigFile:
    COMMENT_REGEX: Any = ...
    SEPARATOR: str = ...
    path: Any = ...
    raw_vals: Any = ...
    def __init__(self, path: str) -> None: ...
    def vals(self, key: Any) -> str: ...
    @vals.setter
    def vals(self, key: str, value: str) -> None: ...
    @classmethod
    def readline(cls: Any, line: str) -> Optional[Tuple[str, str]]: ...
    def read(self) -> None: ...

class JSONFile:
    path: Any = ...
    vals: Any = ...
    def __init__(self, path: Any) -> None: ...
    def read(self) -> None: ...
    def write(self) -> None: ...

class ProgramConfigFile(ConfigFile):
    true_vals: Any = ...
    false_vals: Any = ...
    _req_keys: Any = ...
    _opt_keys: Any = ...
    _all_keys: Any = ...
    _bool_keys: Any = ...
    _defaults: Any = ...
    def vals(self, key: Any) -> Any: ...
    @vals.setter
    def vals(self, key: str, value: str) -> None: ...
    def _check_value(self, key: str, value: str) -> Optional[str]: ...
    def check_all(self, check_empty: Any=..., context: Any=...) -> None: ...

class ProgramInfoFile(JSONFile):
    vals: Any = ...
    def __init__(self, path: str) -> None: ...
    def generate(self) -> None: ...
