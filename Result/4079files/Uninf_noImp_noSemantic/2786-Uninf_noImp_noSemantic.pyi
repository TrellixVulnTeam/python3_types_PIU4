from gi.repository import Ide
from typing import Any

_: Any
_ATTRIBUTES: Any

class MavenBuildSystemDiscovery(Ide.SimpleBuildSystemDiscovery):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class MavenBuildSystem(Ide.Object, Ide.BuildSystem):
    project_file: Any = ...
    def do_get_id(self): ...
    def do_get_display_name(self): ...
    def do_get_priority(self): ...

class MavenPipelineAddin(Ide.Object, Ide.PipelineAddin):
    def do_load(self, pipeline: Any) -> None: ...
    def _query(self, stage: Any, pipeline: Any, targets: Any, cancellable: Any) -> None: ...

class MavenBuildTarget(Ide.Object, Ide.BuildTarget):
    def do_get_install_directory(self) -> None: ...
    def do_get_name(self): ...
    def do_get_language(self): ...
    def do_get_cwd(self): ...
    def do_get_argv(self): ...
    def do_get_priority(self): ...

class MavenBuildTargetProvider(Ide.Object, Ide.BuildTargetProvider):
    def do_get_targets_async(self, cancellable: Any, callback: Any, data: Any) -> None: ...
    def do_get_targets_finish(self, result: Any): ...

class MavenIdeTestProvider(Ide.TestProvider):
    def do_run_async(self, test: Any, pipeline: Any, pty: Any, cancellable: Any, callback: Any, data: Any) -> None: ...
    def do_run_finish(self, result: Any): ...
    def do_reload(self) -> None: ...
    def on_enumerator_loaded(self, parent: Any, result: Any, data: Any) -> None: ...

class MavenTest(Ide.Test):
    def get_command(self): ...
    command: Any = ...
    def set_command(self, command: Any) -> None: ...
