from strips import *
from collections import defaultdict as defaultdict
from typing import Any

class Tetromino(Object):
    data: Any = ...
    def __init__(self, name: Any, data: Any) -> None: ...

class Tetris(State):
    ROWS: int = ...
    COLS: int = ...
    tetrominoes: Any = ...
    current: Any = ...
    row: int = ...
    col: Any = ...
    board: Any = ...
    def __init__(self) -> None: ...
    def copy(self): ...
    def copy_current_to_board(self) -> None: ...
    def generate_new_tetromino(self) -> None: ...
    def idx(self): ...
    def subidx(self): ...
    def is_collision(self, dr: int = ..., dc: int = ...): ...
    def check_collision(self, dr: int = ..., dc: int = ...) -> None: ...
    def transform(self, t: Any) -> None: ...
    def rotate_left(self): ...
    def rotate_right(self): ...
    def move_left(self) -> None: ...
    def move_right(self) -> None: ...
    def is_row_full(self, row: Any): ...
    def clear_row(self, row: Any) -> None: ...
    def clear_full_rows(self) -> None: ...
    def down(self) -> None: ...
    def move_down(self) -> None: ...
    def drop(self) -> None: ...
    def tick(self) -> None: ...
    def final_positions(self): ...
    def all_final_positions(self): ...
    def print(self) -> None: ...

def curses_tetris(scr: Any) -> None: ...
