from typing import Any, Optional

def derivation_weight(derivation: Any, semiring: Any = ..., Z: Optional[Any] = ..., omega: Any = ...): ...
def acyclic_value_recursion(forest: Any, topsorted: Any, semiring: Any, omega: Any = ..., infinity: int = ...): ...
def robust_value_recursion(forest: Any, tsort: Any, semiring: Any, omega: Any = ..., infinity: int = ...): ...
def approximate_supremum(forest: Any, omega: Any, I: Any, bucket: Any, semiring: Any, infinity: int = ...): ...
def _robust_value_recursion(forest: Any, tsort: Any, semiring: Any, omega: Any = ..., infinity: int = ...): ...
def compute_edge_values(forest: Any, semiring: Any, node_values: Any, omega: Any = ..., normalise: bool = ...): ...

class LazyEdgeValues:
    _semiring: Any = ...
    _node_values: Any = ...
    _edge_values: Any = ...
    _omega: Any = ...
    _compute: Any = ...
    def __init__(self, semiring: Any, node_values: Any, edge_values: Any = ..., omega: Any = ..., normalise: bool = ...): ...
    def _normalised(self, edge: Any): ...
    def _unnormalised(self, edge: Any): ...
    def __getitem__(self, edge: Any): ...
