import numpy.random as np
from typing import Any, Optional

toyear: Any
tomonth: Any
yrmths: Any
flatten_multindex: Any
mse: Any

def check_one2one(df: Any, k1: Any, krest: Any) -> None: ...
def random_requests(urls: Any, mean: int = ..., sd: int = ..., min: float = ...) -> None: ...
def impute(df: Any): ...
def ends_with(suff: Any): ...
def batchify(x: Any, batch_size: int = ..., train_len: int = ...): ...
def test_batchify() -> None: ...
def to_sub_seqs(x: np.array, seq_len: Any=..., warn: Any=...) -> Any: ...
def test_to_sub_seqs() -> None: ...
def batch_getterer(x: Any, *, y: Optional[Any] = ..., batch_size: int = ..., var: bool = ...): ...

isint: Any

class BatchArraySingle:
    truncate: Any = ...
    x: Any = ...
    N: Any = ...
    seq_len: Any = ...
    rem: Any = ...
    ix: Any = ...
    retfunc: Any = ...
    def __init__(self, x: Optional[Any] = ..., seq_len: int = ..., truncate: bool = ..., tovar: bool = ...) -> None: ...
    def __getitem__(self, ix: Any): ...
    idxmax: Any = ...

class BatchArray(BatchArraySingle):
    xb: Any = ...
    rem: Any = ...
    y: Any = ...
    yb: Any = ...
    batch_size: Any = ...
    num_batches: Any = ...
    num_truncated_rows: Any = ...
    num_leftover_rows: Any = ...
    def __init__(self, x: Optional[Any] = ..., y: Optional[Any] = ..., seq_len: int = ..., truncate: bool = ..., tovar: bool = ..., batch_size: int = ...) -> None: ...
    def __getitem__(self, ix: Any): ...
    def batch_ix_iter(self, batch_size: Optional[Any] = ...): ...
    @property
    def train_samples_y(self): ...
    @property
    def train_samples_x(self): ...
    @property
    def test_samples_x(self): ...
    @property
    def test_samples_y(self): ...

def collapse_dims_(t: Any, dim_prods: [Tuple[int]]) -> Any: ...
def collapse_dims(t: Any, dim_prods: [Tuple[int]]) -> Any: ...
def test_collapse_dims_() -> None: ...
def ravel(t: Any): ...
def repackage_hidden(h: Any): ...
def add_dates_(df: Any, l: Any): ...
def rep_with_dummies_(df: Any, col: Any): ...
def replace_with_dummies(df: Any, cols: Any): ...
def filter_dtypes(df: Any, dtypes: Any = ...): ...
def log_(s: Any): ...
def join_pollen_weather(poldf: Any, ddf: Any, time_cols: Any, ycol: str = ...): ...
def gen_dat1(P: int = ..., N: int = ..., dtype: Any = ...): ...
def gen_dat2(P: int = ..., N: int = ..., dtype: Any = ...): ...
def check_cached(min_time: Any): ...
def show_dt(X: Any, y: Any, criterion: str = ..., max_depth: int = ...) -> None: ...
def read(fn: Any): ...
