from data.generating import *
from data.blackmarket_statuses import *
from auctions.models import *
from core.models import *
from random import *
from typing import Any

def randfloat(a: Any, b: Any): ...
def ent_filter(**kwargs: Any): ...

class EvolvingSetting:
    setting: Any = ...
    def __init__(self, setting: Any) -> None: ...
    def value_in_time(self, time: Any): ...

class SellerBase:
    game_len: Any = ...
    def __init__(self) -> None: ...
    @staticmethod
    def get_items_to_price(price: Any, items: Any): ...
    def generate_one(self, time: Any) -> None: ...
    @staticmethod
    def estimate_price(auction: Any, coef: Any): ...
    @staticmethod
    def add_auction_item(auction: Any, entity: Any, amount: Any, visible: bool = ..., will_sell: bool = ...): ...
    def generate(self) -> None: ...

class RandomSellerBase(SellerBase):
    def max_buy_count(self, time: Any) -> None: ...
    def max_sell_count(self, time: Any) -> None: ...
    def max_buy_price(self, time: Any) -> None: ...
    def max_sell_price(self, time: Any) -> None: ...
    def income_coef(self, time: Any) -> None: ...
    def buying_entities(self, time: Any) -> None: ...
    def selling_entities(self, time: Any) -> None: ...
    def generate_one(self, time: Any) -> None: ...

class RandomStuffRiscantSeller(RandomSellerBase):
    name: str = ...
    risks: Any = ...
    spans: Any = ...
    buying_entities: Any = ...
    selling_entities: Any = ...
    max_buy_price: Any = ...
    max_sell_setting: Any = ...
    max_sell_price: Any = ...
    income_coef: Any = ...
    max_sell_count: Any = ...
    max_buy_count: Any = ...
    def __init__(self) -> None: ...
    def generate(self) -> None: ...

class TrivialSeller(SellerBase):
    def max_buy_count(self, time: Any): ...
    def max_sell_count(self, time: Any): ...
    def max_sell_price(self, time: Any): ...
    def max_buy_price(self, time: Any): ...
    def income_coef(self, time: Any): ...
    def generate(self) -> None: ...
    def buying_entities(self, time: Any): ...
    def selling_entities(self, time: Any): ...

class StaticAuction(SellerBase):
    estimate: Any = ...
    coef: Any = ...
    b: Any = ...
    def __init__(self, coef: int = ..., *args: Any, **kwargs: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

def e(name: Any): ...
def sell_rafts_for_robots() -> None: ...
def peanut_merchant() -> None: ...
def generate_blackmarket(force: bool = ...): ...
