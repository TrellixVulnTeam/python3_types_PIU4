from docutils import nodes, writers
from sphinx import roles
from typing import Any, Optional

def _finilize_markdown_cells(nb: Any): ...

class NBWriter(writers.Writer):
    app: Any = ...
    docpath: Any = ...
    def __init__(self, app: Any, docpath: Any) -> None: ...
    output: Any = ...
    def translate(self) -> None: ...

def _split_doctest(code: Any): ...

class NBTranslator(nodes.NodeVisitor):
    section_level: int = ...
    indent: int = ...
    paragraph_prefix: str = ...
    app: Any = ...
    config: Any = ...
    docpath: Any = ...
    nb: Any = ...
    def __init__(self, document: Any, app: Any, docpath: Any) -> None: ...
    def write_markdown(self, text: Any) -> None: ...
    def rstrip_markdown(self, chars: Optional[Any] = ...) -> None: ...
    def add_codecell(self, code: Any) -> None: ...
    def write_code(self, code: Any) -> None: ...
    def visit_section(self, node: Any) -> None: ...
    def depart_section(self, node: Any) -> None: ...
    def visit_title(self, node: Any) -> None: ...
    def depart_title(self, node: Any) -> None: ...
    def visit_Text(self, node: Any) -> None: ...
    def depart_Text(self, node: Any) -> None: ...
    def visit_list_item(self, node: Any) -> None: ...
    def depart_list_item(self, node: Any) -> None: ...
    def visit_note(self, node: Any) -> None: ...
    def depart_note(self, node: Any) -> None: ...
    def visit_paragraph(self, node: Any) -> None: ...
    def depart_paragraph(self, node: Any) -> None: ...
    def visit_reference(self, node: Any) -> None: ...
    def depart_reference(self, node: Any) -> None: ...
    def visit_download_reference(self, node: Any) -> None: ...
    def depart_download_reference(self, node: Any) -> None: ...
    def visit_literal(self, node: Any) -> None: ...
    def depart_literal(self, node: Any) -> None: ...
    def visit_literal_block(self, node: Any) -> None: ...
    def visit_doctest_block(self, node: Any) -> None: ...
    def visit_math(self, node: Any) -> None: ...
    def visit_displaymath(self, node: Any) -> None: ...
    def unknown_visit(self, node: Any) -> None: ...
    def unknown_departure(self, node: Any) -> None: ...

def export_notebooks(app: Any, document: Any, docname: Any) -> None: ...
def cleanup_notebooks(app: Any, _: Any) -> None: ...
def remove_notebooks_from_deps(app: Any, _: Any) -> None: ...
def _make_empty_file(abspath: Any) -> None: ...

class NotebookExportRole(roles.XRefRole):
    def process_link(self, env: Any, refnode: Any, has_explicit_title: Any, title: Any, target: Any): ...
    def result_nodes(self, document: Any, env: Any, node: Any, is_ref: Any): ...

def setup(app: Any): ...
