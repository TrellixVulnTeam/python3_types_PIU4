from typing import Any, AsyncIterable, AsyncIterator, List, Optional, TypeVar

T = TypeVar('T')

class BaseObject(dict):
    @staticmethod
    def _get_key_mappings(): ...
    def __init__(self, document: Any) -> None: ...
    def __getattr__(self, attr: Any): ...
    def _normalise_document(self, document: Any): ...
    def _normalise_key(self, document: Any, key: Any) -> None: ...
    def _set_from_document(self, document: Any) -> None: ...

class BaseResponseObject(BaseObject):
    _url: Any = ...
    _default_urls: Any = ...
    _client: Any = ...
    _limits: Any = ...
    _header_links: Any = ...
    _fetch_params: Any = ...
    def __init__(self, client: Any, document: Optional[Any] = ..., limits: Optional[Any] = ..., links: Optional[Any] = ..., fetch_params: Optional[Any] = ...) -> None: ...
    async def fetch_data(self) -> None: ...
    def _get_related_fetch_params(self) -> None: ...
    def _get_related_url(self, property_name: Any, element_type: Any, **kwargs: Any): ...
    async def _get_related_object(self, property_name: Any, element_type: Any, **kwargs: Any): ...
    @property
    def limits(self): ...

class PaginatedList(AsyncIterator[T]):
    _client: Any = ...
    _element_type: Any = ...
    _pages: Any = ...
    _current_page_number: int = ...
    _fetch_params: Any = ...
    _current_iter: Any = ...
    _current_index: Any = ...
    _limits: Any = ...
    _last_raw_limits: Any = ...
    _max_items: Any = ...
    _header_links: Any = ...
    _item_counter: Any = ...
    def __init__(self, client: Any, element_type: Any, initial_document: Any, limits: Any, links: Any, max_items: Optional[Any] = ..., fetch_params: Optional[Any] = ...) -> None: ...
    async def __aiter__(self) -> PaginatedList[T]: ...
    async def __anext__(self) -> T: ...
    @property
    def limits(self): ...
    def set_max_items(self, max_items: Any) -> None: ...
    async def get_all(self) -> List[T]: ...
    def _has_more_pages(self) -> bool: ...
    def _make_element(self, document: Any) -> T: ...
    def _increment_page_number(self) -> None: ...
    async def _get_next_page(self) -> None: ...

class PaginatedListProxy(AsyncIterable[T]):
    _client: Any = ...
    _url: Any = ...
    _element_type: Any = ...
    _fetch_params: Any = ...
    _max_items: Any = ...
    _paginator: Any = ...
    def __init__(self, client: Any, url: Any, element_type: Any, fetch_params: Any) -> None: ...
    async def __aiter__(self) -> PaginatedList[T]: ...
    def limit(self, max_items: Any): ...
    async def all(self): ...
    async def _get_paginator(self): ...
