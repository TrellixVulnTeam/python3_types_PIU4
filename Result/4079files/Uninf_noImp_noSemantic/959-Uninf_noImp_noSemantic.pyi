from typing import Any, Dict, Iterator, List, Optional, Tuple

paperformats: Dict[str, List[int]]
units: Dict[str, float]

def reverse_remainder(dividend: int, divisor: int) -> int: ...
def calculate_signature_length(page_count: int) -> int: ...
def cut_in_signatures(inpages: List, signature_length: int) -> Iterator[List]: ...
def impose(pages: List, pages_per_sheet: int, binding: str) -> List: ...
def merge(pages: Any, rotation: Any, binding: Any) -> Any: ...
def set_binding(page: Any, binding: Any, rotation: Any): ...
def create_blank_copy(page: Any) -> Any: ...
def calculate_scaled_sub_page_size(pages_per_sheet: int, papersize: Optional[Dict]) -> List[int]: ...
def add_blanks(signature: List, pages_per_sheet: int) -> List: ...
def get_media_box_size(outpages: Any) -> List[int]: ...
def calculate_margins(output_size: Any, current_size: Any) -> Tuple[Any, float, float]: ...
def resize(outpages: List, output_size: List[int]) -> List: ...
def is_landscape(page: Any) -> Any: ...
def validate_infile(pdf: str) -> str: ...
def validate_papersize(paperformat: str, unit: str) -> Optional[List[int]]: ...
def validate_pages_per_sheet(pages_per_sheet: int) -> int: ...
def validate_signature_length(signature_length: int) -> int: ...
def impose_and_merge(inpages: List, signature_length: int, pages_per_sheet: int, output_size: List[int], binding: str) -> List: ...
def add_divider(sheets: List, signature_length: int) -> List: ...
def create_filename(infile: Any) -> str: ...
def save_pdf(infile: Any, outpages: Any) -> None: ...
