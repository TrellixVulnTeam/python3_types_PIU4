import abc
import typing
from asyncqlio.orm.schema import column as md_column
from typing import Any

class OperatorResponse:
    __slots__: Any = ...
    sql: Any = ...
    parameters: Any = ...
    def __init__(self, sql: str, parameters: dict) -> None: ...

def requires_bop(func: Any) -> typing.Callable[[BaseOperator, BaseOperator], typing.Any]: ...

class BaseOperator(abc.ABC):
    @abc.abstractmethod
    def generate_sql(self, emitter: typing.Callable[[], typing.Tuple[str, str]]) -> OperatorResponse: ...
    def __and__(self, other: BaseOperator) -> Any: ...
    def __or__(self, other: BaseOperator) -> Any: ...
    __rand__: Any = ...
    __ror__: Any = ...

class And(BaseOperator):
    operators: Any = ...
    def __init__(self, *ops: BaseOperator) -> None: ...
    def generate_sql(self, emitter: Any): ...

class Or(BaseOperator):
    operators: Any = ...
    def __init__(self, *ops: BaseOperator) -> None: ...
    def generate_sql(self, emitter: Any): ...

class Sorter(BaseOperator, metaclass=abc.ABCMeta):
    cols: Any = ...
    def __init__(self, *columns: md_column.Column) -> None: ...
    @property
    @abc.abstractmethod
    def sort_order(self): ...
    def generate_sql(self, emitter: Any): ...

class AscSorter(Sorter):
    sort_order: str = ...

class DescSorter(Sorter):
    sort_order: str = ...

class ColumnValueMixin:
    column: Any = ...
    value: Any = ...
    def __init__(self, column: md_column.Column, value: typing.Any) -> None: ...

class BasicSetter(BaseOperator, ColumnValueMixin, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def set_operator(self) -> str: ...
    def generate_sql(self, emitter: Any): ...

class ValueSetter(BasicSetter):
    set_operator: str = ...
    def generate_sql(self, emitter: Any): ...

class IncrementSetter(BasicSetter):
    set_operator: str = ...

class DecrementSetter(BasicSetter):
    set_operator: str = ...

class In(BaseOperator, ColumnValueMixin):
    def generate_sql(self, emitter: typing.Callable[[str], str]) -> Any: ...

class ComparisonOp(ColumnValueMixin, BaseOperator):
    operator: Any = ...
    def generate_sql(self, emitter: Any): ...

class Eq(ComparisonOp):
    operator: str = ...
    def generate_sql(self, emitter: Any): ...

class NEq(ComparisonOp):
    operator: str = ...
    def generate_sql(self, emitter: Any): ...

class Lt(ComparisonOp):
    operator: str = ...

class Gt(ComparisonOp):
    operator: str = ...

class Lte(ComparisonOp):
    operator: str = ...

class Gte(ComparisonOp):
    operator: str = ...

class Like(ComparisonOp):
    operator: str = ...

class ILike(ComparisonOp):
    operator: str = ...

class HackyILike(BaseOperator, ColumnValueMixin):
    def generate_sql(self, emitter: Any): ...
