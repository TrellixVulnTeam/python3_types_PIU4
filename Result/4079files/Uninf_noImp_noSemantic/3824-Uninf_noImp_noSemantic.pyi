from typing import Any, Optional

class ApiObject:
    _type: Any = ...
    data: Any = ...
    def __init__(self, _type: Optional[Any] = ..., **data: Any) -> None: ...
    def get_type(self): ...
    def get_or_fail(self, key: Any): ...
    def get_or_default(self, key: Any, default: Optional[Any] = ...): ...
    def __getattr__(self, item: Any): ...
    @staticmethod
    def wrap_api_object(data: Any): ...
    def unwrap_api_object(self): ...

class ApiObjectList:
    data_list: Any = ...
    def __init__(self, data_list: list) -> None: ...
    def __iter__(self) -> Any: ...
    def __wrapped_api_objects(self) -> None: ...
    def unwrap_api_object(self): ...

class OutApiObject(ApiObject):
    LOCAL_PARAM_ERROR_CALLBACK: str = ...
    LOCAL_PARAM_SCHEDULER: str = ...
    LOCAL_PARAMS: Any = ...
    def with_error_callback(self, func: Any): ...

class Message(OutApiObject):
    def to_chat(self, chat: Optional[Any] = ..., message: Optional[Any] = ..., chat_id: Optional[Any] = ...): ...
    def reply_to_message(self, message: Optional[Any] = ..., message_id: Optional[Any] = ...): ...
    def to_chat_replying(self, message: Any): ...
    def set_message_id(self, message_id: Any) -> None: ...
    def with_reply_markup(self, reply_markup: dict) -> Any: ...
    def inline_message_id(self, inline_message_id: int) -> Any: ...
    def copy(self): ...
    @staticmethod
    def create(text: Any, chat_id: Optional[Any] = ..., **kwargs: Any): ...
    @staticmethod
    def create_reply(message: Any, reply_text: Any): ...

class CaptionableMessage(Message):
    def with_caption(self, caption_text: Any): ...

class Photo(CaptionableMessage):
    @staticmethod
    def create_photo(file_id: Any): ...

class Sticker(Message):
    @staticmethod
    def create_sticker(file_id: Any): ...

class Document(CaptionableMessage):
    @staticmethod
    def create_document(file_id: Any): ...

class Voice(CaptionableMessage):
    @staticmethod
    def create_voice(file_id: Any): ...

class VideoNote(Message):
    @staticmethod
    def create_video_note(file_id: Any, length: Any): ...

class Audio(CaptionableMessage):
    @staticmethod
    def create_audio(file_id: Any): ...

class Video(CaptionableMessage):
    @staticmethod
    def create_video(file_id: Any): ...

class Location(Message):
    @staticmethod
    def create_location(latitude: Any, longitude: Any): ...

class Contact(Message):
    @staticmethod
    def create_contact(phone_number: Any, first_name: Any, last_name: Optional[Any] = ...): ...

class MessageEntityParser:
    text_as_utf16_bytes: Any = ...
    def __init__(self, message: Any) -> None: ...
    def get_entity_text(self, entity: Any): ...
    def get_text_after_entity(self, entity: Any): ...
