import typing as ty
from . import common
from typing import Any

__author__: str
__copyright__: str

class AbstractComparator:
    name: ty.Optional[str] = ...
    opts: Dict[str, ty.Any] = ...
    conf: Any = ...
    def __init__(self, conf: ty.Optional[dict]) -> None: ...
    def new(self, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[str, dict]: ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

def _check_changes(ctx: common.Context, changed_lines: int, old_lines: int, changes_th: ty.Optional[float], min_changed: ty.Optional[float]) -> bool: ...

class ContextDiff(AbstractComparator):
    name: str = ...
    opts: Dict[str, ty.Any] = ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

class UnifiedDiff(AbstractComparator):
    name: str = ...
    opts: Any = ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

class NDiff(AbstractComparator):
    name: str = ...
    opts: Any = ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

def _instr_separator(instr1: str, instr2: ty.Optional[str]) -> str: ...
def _substract_lists(instr1: str, instr2: str) -> ty.Tuple[str, int, int, int]: ...
def _drop_old_hashes(previous_hash: ty.Dict[str, int], days: int) -> ty.Dict[str, int]: ...
def hash_item(item: str) -> str: ...
def hash_strings(inp: ty.List[str]) -> ty.Dict[int, int]: ...

class Added(AbstractComparator):
    name: str = ...
    def new(self, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[str, dict]: ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

class Deleted(AbstractComparator):
    name: str = ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

class Last(AbstractComparator):
    name: str = ...
    def compare(self, old: str, old_date: str, new: str, new_date: str, ctx: common.Context, meta: dict) -> ty.Tuple[bool, ty.Optional[str], ty.Optional[dict]]: ...

def get_comparator(name: str, conf: ty.Optional[dict]) -> ty.Optional[AbstractComparator]: ...
