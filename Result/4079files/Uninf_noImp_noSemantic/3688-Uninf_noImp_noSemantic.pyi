import multiprocessing
import seproxer.mitmproxy_extensions.master
from seproxer import mitmproxy_extensions
from typing import Any

logger: Any

class ProxyError(Exception): ...
class ProxyRunningError(ProxyError): ...
class ProxyNotRunningError(ProxyError): ...
class ProxyMalformedData(ProxyError): ...

class ProxyProc(multiprocessing.Process):
    proxy_master: Any = ...
    def __init__(self, proxy_master: mitmproxy_extensions.master.ProxyMaster) -> None: ...
    def _handle_sig(self, signum: Any, frame: Any) -> None: ...
    def run(self) -> None: ...

class Runner:
    mitmproxy_options: Any = ...
    _proxy_server: Any = ...
    _results_queue: Any = ...
    _producer_push_event: Any = ...
    _has_active_flows_state: Any = ...
    _proxy_proc: Any = ...
    def __init__(self, mitmproxy_options: mitmproxy_extensions.options.MitmproxyExtendedOptions) -> None: ...
    def run(self) -> None: ...
    @property
    def is_running(self) -> bool: ...
    def done(self) -> None: ...
    def get_results(self) -> bytes: ...
    def has_pending_requests(self) -> bool: ...
    def clear_flows(self) -> None: ...
    @staticmethod
    def from_options(options: seproxer.options.Options) -> Runner: ...
