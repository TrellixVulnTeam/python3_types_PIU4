import abc
import argparse
import configparser
from typing import Any, Dict, Optional, Sequence, Text

LOGGER: Any
CONFIG_FILE_NAME: str
DEFAULT_CONFIG_FILE: Any

def parse_arguments(argv: Optional[Sequence[str]]=...) -> argparse.Namespace: ...
def parse_mapping(mapping_file: Optional[str]) -> configparser.ConfigParser: ...
def parse_request() -> Dict[str, str]: ...

class DataExtractor(abc.ABC):
    _option_suffix: Any = ...
    def __init__(self, option_suffix: Text=...) -> None: ...
    @abc.abstractmethod
    def configure(self, config: configparser.SectionProxy) -> Any: ...
    @abc.abstractmethod
    def get_value(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...

class SkippingDataExtractor(DataExtractor):
    _prefix_length: Any = ...
    def __init__(self, prefix_length: int, option_suffix: Text=...) -> None: ...
    @abc.abstractmethod
    def configure(self, config: Any): ...
    @abc.abstractmethod
    def _get_raw(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...
    def get_value(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...

class SpecificLineExtractor(SkippingDataExtractor):
    _line: Any = ...
    def __init__(self, line: int, prefix_length: int, option_suffix: Text=...) -> None: ...
    def configure(self, config: Any) -> None: ...
    def _get_raw(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...

class RegexSearchExtractor(DataExtractor):
    _regex: Any = ...
    def __init__(self, regex: str, option_suffix: str) -> None: ...
    def _build_matcher(self, regex: Any): ...
    def configure(self, config: Any) -> None: ...
    def get_value(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...

class EntryNameExtractor(DataExtractor):
    def configure(self, config: Any) -> None: ...
    def get_value(self, entry_name: Text, entry_lines: Sequence[Text]) -> Optional[Text]: ...

_line_extractor_name: str
_username_extractors: Any

def get_password(request: Any, mapping: Any) -> None: ...
def handle_skip() -> None: ...
def main(argv: Optional[Sequence[str]]=...) -> None: ...
