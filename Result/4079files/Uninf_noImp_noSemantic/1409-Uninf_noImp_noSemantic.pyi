import unittest
from typing import Any

class TestContestHandler(unittest.TestCase):
    handler: Any = ...
    inputid: str = ...
    log_backup: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_compute_score(self) -> None: ...
    def test_update_user_score(self) -> None: ...
    def test_update_user_score_less(self) -> None: ...
    def test_generate_input_invalid_token(self) -> None: ...
    def test_generate_input_invalid_task(self) -> None: ...
    def test_generate_input_already_have(self, get_file_size_mock: Any, get_input_mock: Any) -> None: ...
    def test_generate_input_transaction_broken(self, register_mock: Any, get_file_size_mock: Any, get_input_mock: Any) -> None: ...
    def test_generate_input(self, get_file_size_mock: Any, get_input_mock: Any) -> None: ...
    def test_submit_invalid_output(self) -> None: ...
    def test_sumbit_invalid_source(self, g_f_s_mock: Any, g_i_mock: Any) -> None: ...
    def test_sumbit_not_matching(self, g_f_s_mock: Any, g_i_mock: Any) -> None: ...
    def test_submit_db_broken(self, g_i_mock: Any, g_f_s_mock: Any) -> None: ...
    def test_submit_broken_transaction(self, gen_i_mock: Any, a_s_mock: Any, g_f_s_mock: Any, g_i_mock: Any) -> None: ...
    def test_submit(self, g_f_s_mock: Any, g_i_mock: Any) -> None: ...
    def _insert_data(self, token: str = ..., task: str = ...) -> None: ...
