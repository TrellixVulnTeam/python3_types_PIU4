from typing import Any, Optional, Tuple

class Move:
    MOVE_PATTERN: Any = ...
    move_reference: Any = ...
    hidden: Any = ...
    def __init__(self, move_reference: str, hidden: bool=...) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __str__(self) -> str: ...
    def __hash__(self) -> int: ...
    @classmethod
    def from_coordinates(cls: Any, x: int, y: int, hidden: bool=...) -> Any: ...
    @property
    def coordinates(self) -> Optional[Tuple[int, int]]: ...

class Goban:
    Group: Any = ...
    votes: Any = ...
    image_url: str = ...
    imgur_client: Any = ...
    next_turn_color: str = ...
    moves: Any = ...
    history: Any = ...
    captures: Any = ...
    passed: bool = ...
    def __init__(self) -> None: ...
    def vote_move(self, move: Move, user: str) -> str: ...
    def vote_random(self, user: str, hidden: bool) -> str: ...
    def is_valid(self, move: Move) -> bool: ...
    def superko(self, move: Move) -> bool: ...
    def get_votes(self) -> str: ...
    def play_move(self) -> Optional[str]: ...
    def place_stone(self, move: Move) -> None: ...
    def pass_move(self) -> str: ...
    def resign(self) -> str: ...
    def restart_game(self) -> None: ...
    def _toggle_color(self) -> str: ...
    def current_game_state(self) -> dict: ...
    def remove_if_captured(self, move: Move) -> None: ...
    def get_liberties(self, group: Group) -> bool: ...
    def build_group(self, move: Move, group: Optional[Group]=...) -> Group: ...
    def get_adjacent_moves(self, move: Move) -> Group: ...
    def show_board(self) -> str: ...
    def get_captures(self) -> str: ...
    def draw_board(self, highlighted_move: Move) -> None: ...
