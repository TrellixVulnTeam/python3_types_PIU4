from IPython.display import Image as IPyImage
from PIL.Image import Image as Image
from traitlets import Any, HasTraits
from typing import Optional
from weakref import WeakKeyDictionary
from yuuno.clip import Clip, Frame
from yuuno_ipython.ipython.apps.preview import Preview
from yuuno_ipython.ipython.environment import Environment
from yuuno_ipython.ipython.feature import Feature

class InlineFormat(HasTraits):
    clip: Clip = ...
    environment: Environment = ...
    preview: Preview = ...
    first_frame: Frame = ...
    _ipy_image_cache: IPyImage = ...
    def _update_initial_frame(self, value: Any) -> None: ...
    def _default_preview(self): ...
    @property
    def ipy_image(self) -> IPyImage: ...
    REPR_TYPES: Any = ...
    def _repr_pretty(self): ...
    def _repr_png(self, *args: Any, **kwargs: Any): ...
    def _repr_preview(self): ...
    def _repr_mimebundle_(self, include: Optional[Any] = ..., exclude: Optional[Any] = ...): ...

class Formatter(Feature):
    cache: WeakKeyDictionary = ...
    def _default__cache(self): ...
    @property
    def display_formatters(self): ...
    def wrap_cached(self, obj: Any) -> InlineFormat: ...
    def display(self, obj: Any, *args: Any, **kwargs: Any): ...
    def initialize(self) -> None: ...
    def deinitialize(self) -> None: ...
