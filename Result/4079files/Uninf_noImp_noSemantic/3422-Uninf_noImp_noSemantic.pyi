import typing
from mitmproxy import http as http
from typing import Any, Optional

class KeyifyList:
    inner: Any = ...
    key: Any = ...
    def __init__(self, inner: Any, key: Any) -> None: ...
    def __len__(self): ...
    def __getitem__(self, k: Any): ...

class SessionDB:
    content_threshold: int = ...
    type_mappings: Any = ...
    live_components: Any = ...
    tempdir: Any = ...
    con: Any = ...
    body_ledger: Any = ...
    id_ledger: Any = ...
    def __init__(self, db_path: Optional[Any] = ...) -> None: ...
    def __del__(self) -> None: ...
    def __contains__(self, fid: Any): ...
    def __len__(self): ...
    def _load_session(self, path: Any) -> None: ...
    def _create_session(self) -> None: ...
    @staticmethod
    def is_session_db(path: Any): ...
    def _disassemble(self, flow: Any) -> None: ...
    def _reassemble(self, flow: Any): ...
    def store_flows(self, flows: Any) -> None: ...
    def retrieve_flows(self, ids: Optional[Any] = ...): ...
    def clear(self) -> None: ...

matchall: Any
orders: Any

class Session:
    _FP_RATE: int = ...
    _FP_DECREMENT: float = ...
    _FP_DEFAULT: float = ...
    db_store: Any = ...
    _hot_store: Any = ...
    _order_store: Any = ...
    _view: Any = ...
    order: Any = ...
    filter: Any = ...
    _flush_period: Any = ...
    _flush_rate: Any = ...
    started: bool = ...
    def __init__(self) -> None: ...
    def load(self, loader: Any): ...
    def running(self) -> None: ...
    def configure(self, updated: Any) -> None: ...
    async def _writer(self) -> None: ...
    def load_view(self) -> typing.Sequence[http.HTTPFlow]: ...
    def load_storage(self, ids: Any=...) -> typing.Sequence[http.HTTPFlow]: ...
    def clear_storage(self) -> None: ...
    def store_count(self) -> int: ...
    @staticmethod
    def _generate_order(o: str, f: http.HTTPFlow) -> typing.Optional[typing.Union[str, int, float]]: ...
    def _store_order(self, f: http.HTTPFlow) -> Any: ...
    def set_order(self, order: str) -> None: ...
    def _refilter(self) -> None: ...
    def set_filter(self, input_filter: typing.Optional[str]) -> None: ...
    def update_view(self, f: Any): ...
    def update(self, flows: typing.Sequence[http.HTTPFlow]) -> None: ...
    def request(self, f: Any) -> None: ...
    def error(self, f: Any) -> None: ...
    def response(self, f: Any) -> None: ...
    def intercept(self, f: Any) -> None: ...
    def resume(self, f: Any) -> None: ...
    def kill(self, f: Any) -> None: ...
