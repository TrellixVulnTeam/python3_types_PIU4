from pygdbmi.gdbcontroller import GdbController
from typing import Any, Dict, List, Optional

REQUIRED_GDB_FLAGS: Any
logger: Any

class StateManager:
    controller_to_client_ids: Any = ...
    gdb_reader_thread: Any = ...
    config: Any = ...
    def __init__(self, config: Dict[str, Any]) -> None: ...
    def connect_client(self, client_id: str, desired_gdbpid: int) -> Dict[str, Any]: ...
    def remove_gdb_controller_by_pid(self, gdbpid: int) -> List[str]: ...
    def remove_gdb_controller(self, controller: GdbController) -> List[str]: ...
    def get_client_ids_from_gdb_pid(self, pid: int) -> List[str]: ...
    def get_client_ids_from_controller(self, controller: GdbController) -> Any: ...
    def get_pid_from_controller(self, controller: GdbController) -> Optional[int]: ...
    def get_controller_from_pid(self, pid: int) -> Optional[GdbController]: ...
    def get_controller_from_client_id(self, client_id: str) -> Optional[GdbController]: ...
    def exit_all_gdb_processes(self) -> None: ...
    def get_dashboard_data(self): ...
    def disconnect_client(self, client_id: str) -> Any: ...
    def _spawn_new_gdb_controller(self) -> None: ...
    def _connect_to_existing_gdb_controller(self) -> None: ...
