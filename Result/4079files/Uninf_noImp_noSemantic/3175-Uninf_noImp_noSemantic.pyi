import unittest2 as unittest
from typing import Any

buffer = memoryview

def _nobuf(x: Any): ...
def consumeN(conn: Any, consumer: Any, n: int = ..., timeout: int = ...): ...

class TransportCase(unittest.TestCase):
    transport: Any = ...
    prefix: Any = ...
    sep: str = ...
    userid: Any = ...
    password: Any = ...
    event_loop_max: int = ...
    connection_options: Any = ...
    suppress_disorder_warning: bool = ...
    reliable_purge: bool = ...
    connected: bool = ...
    skip_test_reason: Any = ...
    message_size_limit: Any = ...
    def before_connect(self) -> None: ...
    def after_connect(self, connection: Any) -> None: ...
    exchange: Any = ...
    queue: Any = ...
    def setUp(self) -> None: ...
    def purge(self, names: Any): ...
    def get_connection(self, **options: Any): ...
    connection: Any = ...
    def do_connect(self) -> None: ...
    def verify_alive(self): ...
    def purge_consumer(self, consumer: Any): ...
    def test_produce__consume(self) -> None: ...
    def test_purge(self) -> None: ...
    def _digest(self, data: Any): ...
    def test_produce__consume_large_messages(self, bytes: int = ..., n: int = ..., charset: Any = ...) -> None: ...
    def P(self, rest: Any): ...
    def test_produce__consume_multiple(self) -> None: ...
    def test_timeout(self) -> None: ...
    def test_basic_get(self) -> None: ...
    def test_cyclic_reference_transport(self): ...
    def test_cyclic_reference_connection(self): ...
    def test_cyclic_reference_channel(self): ...
    def tearDown(self) -> None: ...
