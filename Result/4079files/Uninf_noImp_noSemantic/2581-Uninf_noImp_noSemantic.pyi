from .core.base import ITransform
from typing import Any

class Transform(ITransform):
    def __call__(self, other_transform: Any): ...

class Identity(Transform):
    def forward_tensor(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def forward(self, x: Any): ...
    def backward(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class Chain(Transform):
    t1: Any = ...
    t2: Any = ...
    def __init__(self, t1: Any, t2: Any) -> None: ...
    def forward_tensor(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def forward(self, x: Any): ...
    def backward(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class Exp(Transform):
    _lower: Any = ...
    def __init__(self, lower: float = ...) -> None: ...
    def forward_tensor(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def forward(self, x: Any): ...
    def backward(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class Log1pe(Transform):
    _lower: Any = ...
    def __init__(self, lower: float = ...) -> None: ...
    def forward(self, x: Any): ...
    def forward_tensor(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def backward(self, y: Any): ...
    def __str__(self): ...

class Logistic(Transform):
    def __init__(self, a: float = ..., b: float = ...) -> None: ...
    def forward_tensor(self, x: Any): ...
    def forward(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def backward(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class Rescale(Transform):
    factor: Any = ...
    def __init__(self, factor: float = ...) -> None: ...
    def forward_tensor(self, x: Any): ...
    def forward(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def backward(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class DiagMatrix(Transform):
    dim: Any = ...
    def __init__(self, dim: int = ...) -> None: ...
    def forward(self, x: Any): ...
    def backward(self, y: Any): ...
    def backward_tensor(self, y: Any): ...
    def forward_tensor(self, x: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

class LowerTriangular(Transform):
    N: Any = ...
    num_matrices: Any = ...
    squeeze: Any = ...
    def __init__(self, N: Any, num_matrices: int = ..., squeeze: bool = ...) -> None: ...
    def forward(self, x: Any): ...
    def backward(self, y: Any): ...
    def forward_tensor(self, x: Any): ...
    def backward_tensor(self, y: Any): ...
    def log_jacobian_tensor(self, x: Any): ...
    def __str__(self): ...

positive: Any

def positiveRescale(scale: Any): ...
