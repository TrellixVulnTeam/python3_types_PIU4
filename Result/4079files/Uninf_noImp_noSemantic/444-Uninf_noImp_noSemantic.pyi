import abc
import aiohttp
import enum
import http
from aiohttp import web
from typing import AbstractSet, Any, Optional, Tuple

class ResponseExit(Exception):
    response: Any = ...
    def __init__(self, *args: Any, status: http.HTTPStatus, text: str=...) -> None: ...

class Status(enum.Enum):
    signed: int = ...
    not_signed: int = ...
    username_not_found: int = ...

class ServerHost(abc.ABC):
    @abc.abstractmethod
    def port(self) -> int: ...
    @abc.abstractmethod
    def contrib_auth_token(self) -> str: ...
    @abc.abstractmethod
    def contrib_secret(self) -> str: ...
    @abc.abstractmethod
    def user_agent(self) -> Optional[str]: ...
    @abc.abstractmethod
    def log_exception(self, exc: BaseException) -> None: ...
    @abc.abstractmethod
    def log(self, message: str) -> None: ...
    @abc.abstractmethod
    def trusted_users(self) -> AbstractSet[str]: ...

class ContribHost(abc.ABC):
    @property
    @abc.abstractmethod
    def route(self) -> Tuple[str, str]: ...
    @classmethod
    @abc.abstractmethod
    async def process(cls: Any, server: ServerHost, request: web.Request, client: aiohttp.ClientSession) -> ContribHost: ...
    @abc.abstractmethod
    async def usernames(self) -> AbstractSet[str]: ...
    @abc.abstractmethod
    async def update(self, status: Status) -> None: ...

class CLAHost(abc.ABC):
    @abc.abstractmethod
    async def check(self, client: aiohttp.ClientSession, usernames: AbstractSet[str]) -> Status: ...
