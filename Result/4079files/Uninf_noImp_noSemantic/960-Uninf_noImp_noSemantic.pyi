import numpy as np
from typing import Any, Optional

class MathCollection:
    inv: Any = ...
    sum: Any = ...
    svd: Any = ...
    pinv: Any = ...
    def __init__(self) -> None: ...
    def __repr__(self): ...

mathcollection: Any

class Result:
    y_hat: Any = ...
    y: Any = ...
    prediction_error: Any = ...
    N: Any = ...
    def __init__(self, y_hat: np.ndarray, y: np.ndarray) -> None: ...
    @property
    def mse(self): ...
    @property
    def std_error(self): ...
    @property
    def error_rate(self): ...

class BaseStatModel:
    train_x: Any = ...
    _raw_train_x: Any = ...
    _raw_train_y: Any = ...
    train_y: Any = ...
    features_name: Any = ...
    do_standardization: Any = ...
    _x_std_: Any = ...
    _x_mean_: Any = ...
    def __init__(self, train_x: np.ndarray, train_y: np.ndarray, features_name: Any=..., do_standardization: Any=...) -> None: ...
    def standardize(self, x: Any, axis: int = ..., with_mean: bool = ..., with_std: bool = ...): ...
    @property
    def N(self): ...
    @property
    def p(self): ...
    def _pre_processing_x(self, X: np.ndarray) -> Any: ...
    def _pre_processing_y(self, y: Any): ...
    def pre_processing(self) -> None: ...
    def train(self) -> None: ...
    def predict(self, X: np.ndarray) -> Any: ...
    def test(self, X: Any, y: Any): ...
    @property
    def math(self): ...

class ClassificationMixin(BaseStatModel):
    n_class: Any = ...
    _label_map: Any = ...
    def __init__(self, *args: Any, n_class: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def _get_unique_sorted_label(self): ...
    def _pre_processing_y(self, y: Any): ...
    def _inverse_matrix_to_class(self, matrix: Any): ...
