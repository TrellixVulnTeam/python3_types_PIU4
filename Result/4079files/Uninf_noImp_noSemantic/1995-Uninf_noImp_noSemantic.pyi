from pyignite.constants import *
from .type_codes import *
from .base import IgniteDataType
from typing import Any

__all__: Any

class DataObject(IgniteDataType):
    c_type: Any = ...
    type_code: Any = ...
    _object_c_type: Any = ...
    @classmethod
    def build_c_type(cls): ...
    @classmethod
    def parse(cls: Any, client: Client) -> Any: ...
    @staticmethod
    def to_python(ctype_object: Any, *args: Any, **kwargs: Any): ...
    @classmethod
    def from_python(cls, value: Any): ...

class ByteObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: int = ...

class ShortObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: int = ...

class IntObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: int = ...

class LongObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: int = ...

class FloatObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: float = ...

class DoubleObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: float = ...

class CharObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: str = ...
    @classmethod
    def to_python(cls, ctype_object: Any, *args: Any, **kwargs: Any): ...
    @classmethod
    def from_python(cls, value: Any): ...

class BoolObject(DataObject):
    c_type: Any = ...
    type_code: Any = ...
    pythonic: Any = ...
    default: bool = ...
