from typing import Any, Optional

module_level_variable1: int
module_level_variable2: int

def function_with_types_in_docstring(param1: Any, param2: Any) -> None: ...
def function_with_pep484_type_annotations(param1: int, param2: str) -> bool: ...
def module_level_function(param1: Any, param2: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
def example_generator(n: Any) -> None: ...

class ExampleError(Exception):
    msg: Any = ...
    code: Any = ...
    def __init__(self, msg: Any, code: Any) -> None: ...

class ExampleClass:
    attr1: Any = ...
    attr2: Any = ...
    attr3: Any = ...
    attr4: Any = ...
    attr5: Any = ...
    def __init__(self, param1: Any, param2: Any, param3: Any) -> None: ...
    @property
    def readonly_property(self): ...
    @property
    def readwrite_property(self): ...
    @readwrite_property.setter
    def readwrite_property(self, value: Any) -> None: ...
    def example_method(self, param1: Any, param2: Any): ...
    def __special__(self) -> None: ...
    def __special_without_docstring__(self) -> None: ...
    def _private(self) -> None: ...
    def _private_without_docstring(self) -> None: ...
