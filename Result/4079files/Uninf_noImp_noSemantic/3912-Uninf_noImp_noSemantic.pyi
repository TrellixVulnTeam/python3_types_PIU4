import asyncio
from .config import Config
from typing import Any

class WatchTask:
    _loop: Any = ...
    _app: Any = ...
    _task: Any = ...
    stopper: Any = ...
    _awatch: Any = ...
    def __init__(self, path: str, loop: asyncio.AbstractEventLoop) -> None: ...
    async def start(self, app: Any) -> None: ...
    async def _run(self) -> None: ...
    async def close(self, *args: Any) -> None: ...

class AppTask(WatchTask):
    template_files: Any = ...
    _config: Any = ...
    _reloads: int = ...
    _session: Any = ...
    _runner: Any = ...
    def __init__(self, config: Config, loop: asyncio.AbstractEventLoop) -> None: ...
    async def _run(self, live_checks: int = ...) -> None: ...
    async def _src_reload_when_live(self, checks: int = ...) -> None: ...
    _process: Any = ...
    def _start_dev_server(self) -> None: ...
    def _stop_dev_server(self) -> None: ...
    async def close(self, *args: Any) -> None: ...

class LiveReloadTask(WatchTask):
    async def _run(self) -> None: ...
