from abc import ABCMeta, abstractmethod
from enum import Enum
from typing import Any, Tuple

__all__: Any

class Delta(metaclass=ABCMeta):
    __slots__: Any = ...
    class Type(Enum):
        CHANGE: int = ...
        DELETE: int = ...
        INSERT: int = ...
    @property
    @abstractmethod
    def type(self) -> Type: ...
    original: Any = ...
    revised: Any = ...
    def __init__(self, original: Chunk, revised: Chunk) -> None: ...
    def verify(self, target: Any) -> None: ...
    def apply_to(self, target: Any) -> None: ...
    def restore(self, target: Any) -> None: ...
    def reverse(self) -> Delta: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    @staticmethod
    def create(original: Chunk, revised: Chunk) -> Delta: ...

class ChangeDelta(Delta):
    @property
    def type(self): ...

class DeleteDelta(Delta):
    @property
    def type(self): ...

class InsertDelta(Delta):
    @property
    def type(self): ...

class Chunk:
    __slots__: Any = ...
    position: Any = ...
    lines: Any = ...
    def __init__(self, position: Any, lines: Any) -> None: ...
    def verify(self, target: Any) -> None: ...
    def __len__(self): ...
    @property
    def last(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...

class Patch:
    __slots__: str = ...
    _deltas: Any = ...
    def __init__(self) -> None: ...
    def apply_to(self, target: Any): ...
    def restore(self, target: Any): ...
    def add_delta(self, delta: Any) -> None: ...
    @property
    def deltas(self) -> Tuple[Delta, ...]: ...
    def __eq__(self, other: Any) -> Any: ...

class PatchFailedException(Exception): ...
