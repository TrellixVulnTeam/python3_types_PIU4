from pydantic import BaseConfig as BaseConfig
from typing import Any, Dict, Generator, List, Optional, Sequence, Tuple, Type, Union

__all__: Any

class ErrorWrapper:
    __slots__: Any = ...
    exc: Any = ...
    type_: Any = ...
    loc: Any = ...
    msg_template: Any = ...
    def __init__(self, exc: Exception, loc: Union[Tuple[str, ...], str], *, config: Optional[Type[BaseConfig]]=...) -> None: ...
    @property
    def ctx(self) -> Dict[str, Any]: ...
    @property
    def msg(self) -> str: ...
    def dict(self, *, loc_prefix: Optional[Tuple[str, ...]]=...) -> Dict[str, Any]: ...
    def __repr__(self) -> str: ...
ErrorList = Union[Sequence[Any], ErrorWrapper]

class ValidationError(ValueError):
    __slots__: Any = ...
    raw_errors: Any = ...
    model: Any = ...
    def __init__(self, errors: Sequence[ErrorList], model: Type[Any]) -> None: ...
    def errors(self) -> List[Dict[str, Any]]: ...
    def json(self, *, indent: Union[None, int, str]=...) -> str: ...
    def __str__(self) -> str: ...

def display_errors(errors: List[Dict[str, Any]]) -> str: ...
def _display_error_loc(error: Dict[str, Any]) -> str: ...
def _display_error_type_and_ctx(error: Dict[str, Any]) -> str: ...
def flatten_errors(errors: Sequence[Any], *, loc: Optional[Tuple[str, ...]]=...) -> Generator[Dict[str, Any], None, None]: ...
def get_exc_type(cls: Type[Exception]) -> str: ...
