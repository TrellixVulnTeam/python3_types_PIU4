from doubly_stochastic_dgp.layers import GPMC_Layer as GPMC_Layer, GPR_Layer as GPR_Layer, SGPMC_Layer as SGPMC_Layer, SVGP_Layer as SVGP_Layer
from doubly_stochastic_dgp.utils import reparameterize as reparameterize
from gpflow.likelihoods import Gaussian as Gaussian
from gpflow.mean_functions import Identity as Identity, Linear as Linear
from gpflow.models.model import Model
from typing import Any, Optional

float_type: Any

class DGP_Base(Model):
    num_samples: Any = ...
    num_data: Any = ...
    X: Any = ...
    Y: Any = ...
    likelihood: Any = ...
    layers: Any = ...
    def __init__(self, X: Any, Y: Any, likelihood: Any, layers: Any, minibatch_size: Optional[Any] = ..., num_samples: int = ..., num_data: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def propagate(self, X: Any, full_cov: bool = ..., S: int = ..., zs: Optional[Any] = ...): ...
    def _build_predict(self, X: Any, full_cov: bool = ..., S: int = ...): ...
    def E_log_p_Y(self, X: Any, Y: Any): ...
    def _build_likelihood(self): ...
    def predict_f(self, Xnew: Any, num_samples: Any): ...
    def predict_f_full_cov(self, Xnew: Any, num_samples: Any): ...
    def predict_all_layers(self, Xnew: Any, num_samples: Any): ...
    def predict_all_layers_full_cov(self, Xnew: Any, num_samples: Any): ...
    def predict_y(self, Xnew: Any, num_samples: Any): ...
    def predict_density(self, Xnew: Any, Ynew: Any, num_samples: Any): ...

class DGP_Quad(DGP_Base):
    H: Any = ...
    D_quad: Any = ...
    gh_w: Any = ...
    gh_x: Any = ...
    def __init__(self, *args: Any, H: int = ..., **kwargs: Any) -> None: ...
    def E_log_p_Y(self, X: Any, Y: Any): ...

class DGP(DGP_Base):
    def __init__(self, X: Any, Y: Any, Z: Any, kernels: Any, likelihood: Any, num_outputs: Optional[Any] = ..., mean_function: Any = ..., white: bool = ..., **kwargs: Any) -> None: ...
