from enum import Enum
from typing import Any, Optional

class Chromosome:
    genes: Any = ...
    fitness: Any = ...
    age: int = ...
    Strategy: Any = ...
    def __init__(self, genes: Any, fitness: Any, Strategy: Any) -> None: ...

class Strategies(Enum):
    create: Any = ...
    mutate: Any = ...
    crossover: int = ...

def get_best(get_fitness: Any, target_len: Any, optimal_fitness: Any, gene_set: Any, display: Any, custom_mutate: Optional[Any] = ..., custom_create: Optional[Any] = ..., max_age: Optional[Any] = ..., pool_size: int = ..., crossover: Optional[Any] = ..., max_seconds: Optional[Any] = ...): ...
def _get_improvement(new_child: Any, generate_parent: Any, max_age: Any, pool_size: Any, max_seconds: Any) -> None: ...
def _generate_parent(length: Any, gene_set: Any, get_fitness: Any): ...
def _mutate(parent: Any, gene_set: Any, get_fitness: Any): ...
def _mutate_custom(parent: Any, custom_mutate: Any, get_fitness: Any): ...
def _crossover(parent_genes: Any, index: Any, parents: Any, get_fitness: Any, crossover: Any, mutate: Any, generate_parent: Any): ...
