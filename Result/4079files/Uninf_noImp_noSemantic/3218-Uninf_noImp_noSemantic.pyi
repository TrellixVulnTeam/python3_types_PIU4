import unittest
from typing import Any

class _C:
    x: Any = ...
    def __init__(self, x: Any) -> None: ...

dis_c_instance_method: Any
dis_c_instance_method_bytes: str

def _f(a: Any): ...

dis_f: Any
dis_f_co_code: str

def bug708901() -> None: ...

dis_bug708901: Any

def bug1333982(x: Any = ...) -> None: ...

dis_bug1333982: Any
_BIG_LINENO_FORMAT: str
dis_module_expected_results: str
expr_str: str
dis_expr_str: str
simple_stmt_str: str
dis_simple_stmt_str: str
compound_stmt_str: str
dis_compound_stmt_str: str

class DisTests(unittest.TestCase):
    def get_disassembly(self, func: Any, lasti: int = ..., wrapper: bool = ...): ...
    def get_disassemble_as_string(self, func: Any, lasti: int = ...): ...
    def do_disassembly_test(self, func: Any, expected: Any) -> None: ...
    def test_opmap(self) -> None: ...
    def test_opname(self) -> None: ...
    def test_boundaries(self) -> None: ...
    def test_dis(self) -> None: ...
    def test_bug_708901(self) -> None: ...
    def test_bug_1333982(self) -> None: ...
    def test_big_linenos(self): ...
    def test_disassemble_str(self) -> None: ...
    def test_disassemble_bytes(self) -> None: ...
    def test_disassemble_method(self) -> None: ...
    def test_disassemble_method_bytes(self) -> None: ...
    def test_dis_none(self) -> None: ...
    def test_dis_traceback(self) -> None: ...
    def test_dis_object(self) -> None: ...

code_info_code_info: Any
code_info_tricky: str
code_info_tricky_nested_f: str
code_info_expr_str: str
code_info_simple_stmt_str: str
code_info_compound_stmt_str: str

class CodeInfoTests(unittest.TestCase):
    test_pairs: Any = ...
    maxDiff: int = ...
    def test_code_info(self) -> None: ...
    def test_show_code(self) -> None: ...
    def test_code_info_object(self) -> None: ...
    def test_pretty_flags_no_flags(self) -> None: ...

def test_main() -> None: ...
