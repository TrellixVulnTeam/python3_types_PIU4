import numpy as np
from typing import Any, Optional

__all__: Any

def cosine_distance(X: Any): ...
def euclidean_distance(X: Any): ...
def lp_norm(X: np.ndarray, Y: np.ndarray=..., p: float=..., n_jobs: int=...) -> Any: ...
def _mp_load_shared_Y(Y_: Any, n_bins_: Any) -> None: ...
def _mp_load_shared_data(X_: Any, Y_: Any, p_: Any, n_bins_: Any, R_bins_: Any, R_bins_np_: Any, X_bins_: Any, X_bins_np_: Any, Y_bins_: Any, Y_bins_np_: Any, mp_: Any, mp_np_: Any) -> None: ...
def _mp_find_bin_edges(i: Any): ...
def _mp_calc_histograms(i: Any): ...
def _mp_calc_histograms_n_bins(i: Any): ...
def _mp_create_r_bins(i: Any) -> None: ...
def _mp_estimate_r(i: Any) -> None: ...
def _mp_calc_mp_dissim(x: Any) -> None: ...
def mp_dissim(X: np.ndarray, Y: np.ndarray=..., p: float=..., n_bins: int=..., bin_size: str=..., n_jobs: int=..., verbose: int=...) -> Any: ...
def sample_distance(X: Any, y: Any, sample_size: Any, metric: str = ..., strategy: str = ..., random_state: Optional[Any] = ...): ...
