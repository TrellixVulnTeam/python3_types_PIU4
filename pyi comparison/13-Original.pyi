# (generated with --quick)

from typing import Any, Tuple

check_random_state: Any
make_regression: Any
np: module
shuffle: Any

def _checkParam(n_samples: int = ..., n_features: int = ..., n_redundant: int = ..., n_strel: int = ..., n_repeated: int = ..., flip_y: float = ..., noise: float = ..., partition = ..., **kwargs) -> None: ...
def _combFeat(n, size, strRelFeat, randomstate) -> Any: ...
def _dummyFeat(n, randomstate) -> Any: ...
def _fillVariableSpace(X_informative, random_state: object, n_samples: int = ..., n_features: int = ..., n_redundant: int = ..., n_strel: int = ..., n_repeated: int = ..., noise: float = ..., partition = ..., **kwargs) -> Any: ...
def _repeatFeat(feats, i, randomstate) -> Any: ...
def genClassificationData(n_samples: int = ..., n_features: int = ..., n_redundant: int = ..., n_strel: int = ..., n_repeated: int = ..., noise: float = ..., flip_y: float = ..., random_state: object = ..., partition = ...) -> Tuple[Any, Any]: ...
def genOrdinalRegressionData(n_samples: int = ..., n_features: int = ..., n_redundant: int = ..., n_strel: int = ..., n_repeated: int = ..., noise: float = ..., random_state: object = ..., partition = ..., n_target_bins: int = ...) -> Tuple[Any, Any]: ...
def genRegressionData(n_samples: int = ..., n_features: int = ..., n_redundant: int = ..., n_strel: int = ..., n_repeated: int = ..., noise: float = ..., random_state: object = ..., partition = ...) -> Any: ...
