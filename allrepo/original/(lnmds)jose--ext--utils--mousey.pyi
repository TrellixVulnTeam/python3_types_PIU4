# (generated with --quick)

import asyncio.events
from typing import Any, Coroutine, List, Optional, Tuple, TypeVar

asyncio: module
functools: module
time: module

_TTimer = TypeVar('_TTimer', bound=Timer)

class Table:
    _rows: List[Tuple[str, ...]]
    _widths: List[int]
    def __init__(self, *column_titles: str) -> None: ...
    def _render(self) -> str: ...
    def _update_widths(self, row: tuple) -> None: ...
    def add_row(self, *row: str) -> None: ...
    def add_rows(self, *rows: List[str]) -> None: ...
    def render(self, loop: Optional[asyncio.events.AbstractEventLoop] = ...) -> Coroutine[Any, Any, nothing]: ...

class Timer:
    __doc__: str
    duration: Any
    end: Optional[float]
    start: Optional[float]
    def __aenter__(self) -> Coroutine[Any, Any, Timer]: ...
    def __aexit__(self, exc_type, exc_val, exc_tb) -> Coroutine[Any, Any, None]: ...
    def __enter__(self: _TTimer) -> _TTimer: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
