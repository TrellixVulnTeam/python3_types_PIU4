# (generated with --quick)

from typing import Any, Sequence, Tuple, TypeVar

RSA: module
bignum: Any
binascii: module
sieve_base: Any

_T = TypeVar('_T')

def GCD(x, y) -> Any: ...
def bytes_to_long(s) -> Any: ...
def choice(seq: Sequence[_T]) -> _T: ...
def getPrime(N, randfunc = ...) -> Any: ...
def getRandomInteger(N, randfunc = ...) -> Any: ...
def getRandomNBitInteger(N, randfunc = ...) -> Any: ...
def getRandomNumber(N, randfunc = ...) -> Any: ...
def getRandomRange(a, b, randfunc = ...) -> Any: ...
def getStrongPrime(N, e: int = ..., false_positive_prob: float = ..., randfunc = ...) -> Any: ...
def inverse(u, v) -> Any: ...
def isPrime(N, false_positive_prob: float = ..., randfunc = ...) -> Any: ...
def long2str(n, blocksize: int = ...) -> Any: ...
def long_to_bytes(n, blocksize: int = ...) -> Any: ...
def opsenssh_keypair(passphrase) -> Tuple[Any, bytes]: ...
def pem_to_openssh(key) -> bytes: ...
def random_key(length) -> str: ...
def size(N) -> Any: ...
def str2long(s) -> Any: ...
