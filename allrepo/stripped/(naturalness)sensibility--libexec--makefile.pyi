# (generated with --quick)

import contextlib
import pathlib
from typing import Any, IO, List, Optional, Type, TypeVar, Union

Path: Type[pathlib.Path]
StrPath: Type[Union[_PathLike, str]]
io: module
os: module
redirect_stdout: Type[contextlib.redirect_stdout]

_TCommand = TypeVar('_TCommand', bound=Command)
_TMakefile = TypeVar('_TMakefile', bound=Makefile)
_TRule = TypeVar('_TRule', bound=Rule)

class Command:
    arguments: list
    bin: Any
    def __call__(self: _TCommand, *args, **kwargs) -> _TCommand: ...
    def __init__(self, bin, *args, **kwargs) -> None: ...
    def __str__(self) -> str: ...
    def _add_arguments(self: _TCommand, *args, **kwargs) -> _TCommand: ...
    def copy(self: _TCommand) -> _TCommand: ...

class Makefile:
    __doc__: str
    phonies: List[PhonyRule]
    rules: List[Rule]
    def __enter__(self: _TMakefile) -> _TMakefile: ...
    def __exit__(self, exc_class, exc_inst, tb) -> None: ...
    def __init__(self) -> None: ...
    def phony_rule(self, name, *sources) -> PhonyRule: ...
    def print(self) -> None: ...
    def rule(self, *targets) -> Rule: ...

class PhonyRule(Rule):
    __doc__: str
    recipe: Any
    sources: Any
    targets: Any

class Rule:
    recipe: Any
    sources: Any
    targets: Any
    def __init__(self, targets, sources, recipe) -> None: ...
    @classmethod
    def creates(self, *items) -> Rule: ...
    def depends_on(self: _TRule, *sources) -> _TRule: ...
    def print(self) -> None: ...
    def set_recipe(self: _TRule, *commands) -> _TRule: ...

def pprint(object: object, stream: Optional[IO[str]] = ..., indent: int = ..., width: int = ..., depth: Optional[int] = ..., *, compact: bool = ...) -> None: ...
